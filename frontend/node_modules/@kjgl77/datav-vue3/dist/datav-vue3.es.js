import './style.css';
import { openBlock as le, createElementBlock as se, createElementVNode as ae, createStaticVNode as Tt, defineComponent as Le, useCssVars as pt, unref as i, computed as be, createBlock as ja, resolveDynamicComponent as Ea, renderSlot as Me, getCurrentScope as za, onScopeDispose as qa, watch as ke, ref as me, onMounted as Re, onUnmounted as Ft, onActivated as Ia, onDeactivated as Ha, nextTick as Bt, reactive as Pe, Fragment as Ae, renderList as Se, toDisplayString as We, createCommentVNode as $e, onBeforeUnmount as Va, normalizeStyle as Ge, getCurrentInstance as Ca, createVNode as Z, normalizeClass as Ua, toRef as Ee, h as Xa } from "vue";
var $a = /* @__PURE__ */ ((e) => (e.transparent = "rgba(0,0,0,0)", e.black = "#000000", e.silver = "#C0C0C0", e.gray = "#808080", e.white = "#FFFFFF", e.maroon = "#800000", e.red = "#FF0000", e.purple = "#800080", e.fuchsia = "#FF00FF", e.green = "#008000", e.lime = "#00FF00", e.olive = "#808000", e.yellow = "#FFFF00", e.navy = "#000080", e.blue = "#0000FF", e.teal = "#008080", e.aqua = "#00FFFF", e.aliceblue = "#f0f8ff", e.antiquewhite = "#faebd7", e.aquamarine = "#7fffd4", e.azure = "#f0ffff", e.beige = "#f5f5dc", e.bisque = "#ffe4c4", e.blanchedalmond = "#ffebcd", e.blueviolet = "#8a2be2", e.brown = "#a52a2a", e.burlywood = "#deb887", e.cadetblue = "#5f9ea0", e.chartreuse = "#7fff00", e.chocolate = "#d2691e", e.coral = "#ff7f50", e.cornflowerblue = "#6495ed", e.cornsilk = "#fff8dc", e.crimson = "#dc143c", e.cyan = "#00ffff", e.darkblue = "#00008b", e.darkcyan = "#008b8b", e.darkgoldenrod = "#b8860b", e.darkgray = "#a9a9a9", e.darkgreen = "#006400", e.darkgrey = "#a9a9a9", e.darkkhaki = "#bdb76b", e.darkmagenta = "#8b008b", e.darkolivegreen = "#556b2f", e.darkorange = "#ff8c00", e.darkorchid = "#9932cc", e.darkred = "#8b0000", e.darksalmon = "#e9967a", e.darkseagreen = "#8fbc8f", e.darkslateblue = "#483d8b", e.darkslategray = "#2f4f4f", e.darkslategrey = "#2f4f4f", e.darkturquoise = "#00ced1", e.darkviolet = "#9400d3", e.deeppink = "#ff1493", e.deepskyblue = "#00bfff", e.dimgray = "#696969", e.dimgrey = "#696969", e.dodgerblue = "#1e90ff", e.firebrick = "#b22222", e.floralwhite = "#fffaf0", e.forestgreen = "#228b22", e.gainsboro = "#dcdcdc", e.ghostwhite = "#f8f8ff", e.gold = "#ffd700", e.goldenrod = "#daa520", e.greenyellow = "#adff2f", e.grey = "#808080", e.honeydew = "#f0fff0", e.hotpink = "#ff69b4", e.indianred = "#cd5c5c", e.indigo = "#4b0082", e.ivory = "#fffff0", e.khaki = "#f0e68c", e.lavender = "#e6e6fa", e.lavenderblush = "#fff0f5", e.lawngreen = "#7cfc00", e.lemonchiffon = "#fffacd", e.lightblue = "#add8e6", e.lightcoral = "#f08080", e.lightcyan = "#e0ffff", e.lightgoldenrodyellow = "#fafad2", e.lightgray = "#d3d3d3", e.lightgreen = "#90ee90", e.lightgrey = "#d3d3d3", e.lightpink = "#ffb6c1", e.lightsalmon = "#ffa07a", e.lightseagreen = "#20b2aa", e.lightskyblue = "#87cefa", e.lightslategray = "#778899", e.lightslategrey = "#778899", e.lightsteelblue = "#b0c4de", e.lightyellow = "#ffffe0", e.limegreen = "#32cd32", e.linen = "#faf0e6", e.magenta = "#ff00ff", e.mediumaquamarine = "#66cdaa", e.mediumblue = "#0000cd", e.mediumorchid = "#ba55d3", e.mediumpurple = "#9370db", e.mediumseagreen = "#3cb371", e.mediumslateblue = "#7b68ee", e.mediumspringgreen = "#00fa9a", e.mediumturquoise = "#48d1cc", e.mediumvioletred = "#c71585", e.midnightblue = "#191970", e.mintcream = "#f5fffa", e.mistyrose = "#ffe4e1", e.moccasin = "#ffe4b5", e.navajowhite = "#ffdead", e.oldlace = "#fdf5e6", e.olivedrab = "#6b8e23", e.orange = "#ffa500", e.orangered = "#ff4500", e.orchid = "#da70d6", e.palegoldenrod = "#eee8aa", e.palegreen = "#98fb98", e.paleturquoise = "#afeeee", e.palevioletred = "#db7093", e.papayawhip = "#ffefd5", e.peachpuff = "#ffdab9", e.peru = "#cd853f", e.pink = "#ffc0cb", e.plum = "#dda0dd", e.powderblue = "#b0e0e6", e.rosybrown = "#bc8f8f", e.royalblue = "#4169e1", e.saddlebrown = "#8b4513", e.salmon = "#fa8072", e.sandybrown = "#f4a460", e.seagreen = "#2e8b57", e.seashell = "#fff5ee", e.sienna = "#a0522d", e.skyblue = "#87ceeb", e.slateblue = "#6a5acd", e.slategray = "#708090", e.snow = "#fffafa", e.springgreen = "#00ff7f", e.steelblue = "#4682b4", e.tan = "#d2b48c", e.thistle = "#d8bfd8", e.tomato = "#ff6347", e.turquoise = "#40e0d0", e.violet = "#ee82ee", e.wheat = "#f5deb3", e.whitesmoke = "#f5f5f5", e.yellowgreen = "#9acd32", e))($a || {});
function Nt(e) {
  return typeof e != "string" ? !1 : (e = e.toLowerCase(), /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/.test(e));
}
function Qa(e) {
  return typeof e != "string" ? !1 : (e = e.toLowerCase(), /^(rgb\(|RGB\()/.test(e));
}
function _a(e) {
  return typeof e != "string" ? !1 : (e = e.toLowerCase(), /^(rgba|RGBA)/.test(e));
}
function Pa(e) {
  return /^(rgb|rgba|RGB|RGBA)/.test(e);
}
function Ya(e) {
  return $a[e];
}
function wa(e) {
  if (Nt(e) || Pa(e))
    return e;
  const r = Ya(e);
  if (!r)
    throw new Error(`Color: Invalid Input of ${e}`);
  return r;
}
function Ka(e) {
  e = e.replace("#", ""), e.length === 3 && (e = Array.from(e).map((a) => a + a).join(""));
  const r = e.split("");
  return new Array(3).fill(0).map((a, t) => parseInt(`0x${r[t * 2]}${r[t * 2 + 1]}`));
}
function Ja(e) {
  return e.replace(/rgb\(|rgba\(|\)/g, "").split(",").slice(0, 3).map((r) => parseInt(r));
}
function gt(e) {
  const r = wa(e).toLowerCase();
  return Nt(r) ? Ka(r) : Ja(r);
}
function ka(e) {
  const r = wa(e);
  return _a(r) ? Number(
    r.toLowerCase().split(",").slice(-1)[0].replace(/[)|\s]/g, "")
  ) : 1;
}
function un(e) {
  const r = gt(e);
  return r && [...r, ka(e)];
}
function Za(e, r) {
  const a = gt(e);
  return typeof r == "number" ? `rgba(${a.join(",")},${r})` : `rgb(${a.join(",")})`;
}
function ei(e) {
  if (Nt(e))
    return e;
  const r = gt(e), a = (t) => Number(t).toString(16).padStart(2, "0");
  return `#${r.map(a).join("")}`;
}
function Wt(e) {
  if (!Array.isArray(e))
    throw new Error(`getColorFromRgbValue: ${e} is not an array`);
  const { length: r } = e;
  if (r !== 3 && r !== 4)
    throw new Error("getColorFromRgbValue: value length should be 3 or 4");
  return (r === 3 ? "rgb(" : "rgba(") + e.join(",") + ")";
}
function ti(e, r = 0) {
  let a = un(e);
  return a = a.map((t, n) => n === 3 ? t : t - Math.ceil(2.55 * r)).map((t) => t < 0 ? 0 : t), Wt(a);
}
function ln(e, r = 0) {
  let a = un(e);
  return a = a.map((t, n) => n === 3 ? t : t + Math.ceil(2.55 * r)).map((t) => t > 255 ? 255 : t), Wt(a);
}
function De(e, r = 100) {
  const a = gt(e);
  return Wt([...a, r / 100]);
}
const ri = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  darken: ti,
  fade: De,
  getColorFromRgbValue: Wt,
  getOpacity: ka,
  getRgbValue: gt,
  getRgbaValue: un,
  isHex: Nt,
  isRgb: Qa,
  isRgbOrRgba: Pa,
  isRgba: _a,
  lighten: ln,
  toHex: ei,
  toRgb: Za
}, Symbol.toStringTag, { value: "Module" })), Ke = (e, r) => {
  const a = e.__vccOpts || e;
  for (const [t, n] of r)
    a[t] = n;
  return a;
}, ni = {}, ai = {
  viewBox: "0 0 187 38",
  preserveAspectRatio: "none",
  class: "dv-button-svg"
};
function ii(e, r) {
  return le(), se("svg", ai, r[0] || (r[0] = [
    ae("g", { style: { transform: "translate(2px, 2px)" } }, [
      ae("g", null, [
        ae("path", {
          "data-type": "shape",
          d: "M0,0 L0,34 L168,34 L183,19 L183,0",
          class: "dv-button-svg-bg"
        })
      ]),
      ae("path", {
        "data-type": "polyline",
        d: "M0,34 L168,34 L183,19",
        class: "dv-button-svg-line"
      })
    ], -1)
  ]));
}
const oi = /* @__PURE__ */ Ke(ni, [["render", ii]]), li = {}, si = {
  viewBox: "0 0 167 38",
  preserveAspectRatio: "none",
  class: "dv-button-svg"
};
function ui(e, r) {
  return le(), se("svg", si, r[0] || (r[0] = [
    Tt('<g style="transform:translate(2px, 2px);"><g><path data-type="shape" d="M0,0 L0,34 L163,34 L163,0" class="dv-button-svg-bg"></path></g><path data-type="polyline" d="M0,0 L164.1,0" class="dv-button-svg-line"></path><path data-type="polyline" d="M163,0 L163,34" class="dv-button-svg-line"></path><path data-type="polyline" d="M164.1,34 L0,34" class="dv-button-svg-line"></path><path data-type="polyline" d="M1.1,34 L1.1,0" class="dv-button-svg-line"></path></g>', 1)
  ]));
}
const ci = /* @__PURE__ */ Ke(li, [["render", ui]]), fi = {}, di = {
  viewBox: "0 0 167 38",
  preserveAspectRatio: "none",
  class: "dv-button-svg"
};
function hi(e, r) {
  return le(), se("svg", di, r[0] || (r[0] = [
    Tt('<g style="transform:translate(2px, 2px);"><g><path data-type="shape" d="M1,1 L1,33 L162,33 L162,1" class="dv-button-svg-bg"></path></g><path data-type="polyline" d="M0,0 L0,10" class="dv-button-svg-line"></path><path data-type="polyline" d="M-1.1,0 L10,0" class="dv-button-svg-line"></path><path data-type="polyline" d="M164.1,0 L153,0" class="dv-button-svg-line"></path><path data-type="polyline" d="M163,0 L163,10" class="dv-button-svg-line"></path><path data-type="polyline" d="M164.1,34 L153,34" class="dv-button-svg-line"></path><path data-type="polyline" d="M163,34 L163,24" class="dv-button-svg-line"></path><path data-type="polyline" d="M0,34 L0,24" class="dv-button-svg-line"></path><path data-type="polyline" d="M-1.1,34 L10,34" class="dv-button-svg-line"></path></g>', 1)
  ]));
}
const vi = /* @__PURE__ */ Ke(fi, [["render", hi]]), pi = {}, gi = {
  viewBox: "0 0 187 38",
  preserveAspectRatio: "none",
  class: "dv-button-svg"
};
function mi(e, r) {
  return le(), se("svg", gi, r[0] || (r[0] = [
    ae("g", { style: { transform: "translate(2px, 2px)" } }, [
      ae("g", null, [
        ae("path", {
          "data-type": "shape",
          d: "M0,34 L168,34 L183,19 L183,0 L0,0",
          class: "dv-button-svg-bg"
        })
      ]),
      ae("path", {
        "data-type": "polyline",
        d: "M0,34 L168,34 L183,19 L183,0",
        class: "dv-button-svg-line"
      }),
      ae("path", {
        "data-type": "polyline",
        d: "M184.1,0 L0,0 L0,34.7",
        class: "dv-button-svg-line"
      })
    ], -1)
  ]));
}
const yi = /* @__PURE__ */ Ke(pi, [["render", mi]]), bi = {}, xi = {
  viewBox: "0 0 187 38",
  preserveAspectRatio: "none",
  class: "dv-button-svg"
};
function Ci(e, r) {
  return le(), se("svg", xi, r[0] || (r[0] = [
    ae("g", { style: { transform: "translate(2px, 2px)" } }, [
      ae("g", null, [
        ae("path", {
          "data-type": "shape",
          d: "M0,34 L168,34 L183,19 L183,0 L15,0 L0,15",
          class: "dv-button-svg-bg"
        })
      ]),
      ae("path", {
        "data-type": "polyline",
        d: "M0,34 L168,34 L183,19 L183,0",
        class: "dv-button-svg-line"
      }),
      ae("path", {
        "data-type": "polyline",
        d: "M183,0 L15,0 L0,15 L0,34",
        class: "dv-button-svg-line"
      })
    ], -1)
  ]));
}
const $i = /* @__PURE__ */ Ke(bi, [["render", Ci]]), _i = {}, Pi = {
  viewBox: "0 0 167 38",
  preserveAspectRatio: "none",
  class: "dv-button-svg"
};
function wi(e, r) {
  return le(), se("svg", Pi, r[0] || (r[0] = [
    Tt('<g style="transform:translate(2px, 2px);"><g><path data-type="shape" d="M0,0 L0,34 L163,34 L163,0" class="dv-button-svg-bg"></path></g><path data-type="polyline" d="M0,0 L81.6,0" class="dv-button-svg-line"></path><path data-type="polyline" d="M163,0 L81.4,0" class="dv-button-svg-line"></path><path data-type="polyline" d="M0,34 L81.6,34" class="dv-button-svg-line"></path><path data-type="polyline" d="M163,34 L81.4,34" class="dv-button-svg-line"></path><path data-type="polyline" d="M0,1 L10,1" class="dv-button-svg-line"></path><path data-type="polyline" d="M163,1 L153,1" class="dv-button-svg-line"></path><path data-type="polyline" d="M0,33 L10,33" class="dv-button-svg-line"></path><path data-type="polyline" d="M163,33 L153,33" class="dv-button-svg-line"></path></g>', 1)
  ]));
}
const ki = /* @__PURE__ */ Ke(_i, [["render", wi]]), Ai = { class: "dv-button-wrapper" }, Li = { class: "dv-button" }, Si = { class: "dv-button-svg-container" }, Oi = { class: "dv-button-text" }, Gi = /* @__PURE__ */ Le({
  components: {
    Border1: oi,
    Border2: ci,
    Border3: vi,
    Border4: yi,
    Border5: $i,
    Border6: ki
  },
  __name: "index",
  props: {
    color: { default: "#2058c7" },
    fontColor: { default: "" },
    bg: { type: Boolean, default: !0 },
    border: { default: "Border1" },
    fontSize: { default: 14 }
  },
  setup(e) {
    pt((_) => ({
      "108fc75d": i(o),
      "45ef2fd4": _.color,
      fc71f308: i(t),
      "6ca41ab4": i(a),
      "1faf6725": i(n),
      "9aee3820": i(l)
    }));
    const r = e, a = be(() => ln(r.color, 40)), t = be(() => r.fontColor === "" ? r.color : r.fontColor), n = be(() => ln(t.value, 40)), l = be(() => r.bg ? 0.1 : 0), o = be(() => `${r.fontSize}px`);
    return (_, x) => (le(), se("div", Ai, [
      ae("button", Li, [
        ae("div", Si, [
          (le(), ja(Ea(_.border)))
        ]),
        ae("div", Oi, [
          Me(_.$slots, "default")
        ])
      ])
    ]));
  }
}), zt = {
  install(e) {
    e.component("DvButton", Gi);
  }
};
function Mi(e) {
  return za() ? (qa(e), !0) : !1;
}
function Rt(e) {
  return typeof e == "function" ? e() : i(e);
}
const Ri = typeof window < "u" && typeof document < "u";
typeof WorkerGlobalScope < "u" && globalThis instanceof WorkerGlobalScope;
const Di = Object.prototype.toString, Ti = (e) => Di.call(e) === "[object Object]", sn = () => {
};
function Fi(e, r) {
  function a(...t) {
    return new Promise((n, l) => {
      Promise.resolve(e(() => r.apply(this, t), { fn: r, thisArg: this, args: t })).then(n).catch(l);
    });
  }
  return a;
}
function Bi(e, r = {}) {
  let a, t, n = sn;
  const l = (_) => {
    clearTimeout(_), n(), n = sn;
  };
  return (_) => {
    const x = Rt(e), z = Rt(r.maxWait);
    return a && l(a), x <= 0 || z !== void 0 && z <= 0 ? (t && (l(t), t = null), Promise.resolve(_())) : new Promise((E, U) => {
      n = r.rejectOnCancel ? U : E, z && !t && (t = setTimeout(() => {
        a && l(a), t = null, E(_());
      }, z)), a = setTimeout(() => {
        t && l(t), t = null, E(_());
      }, x);
    });
  };
}
function Ni(e, r = 200, a = {}) {
  return Fi(
    Bi(r, a),
    e
  );
}
function Wi(e) {
  var r;
  const a = Rt(e);
  return (r = a == null ? void 0 : a.$el) != null ? r : a;
}
const ji = Ri ? window : void 0;
function Ei(...e) {
  let r, a, t, n;
  if (typeof e[0] == "string" || Array.isArray(e[0]) ? ([a, t, n] = e, r = ji) : [r, a, t, n] = e, !r)
    return sn;
  Array.isArray(a) || (a = [a]), Array.isArray(t) || (t = [t]);
  const l = [], o = () => {
    l.forEach((E) => E()), l.length = 0;
  }, _ = (E, U, T, L) => (E.addEventListener(U, T, L), () => E.removeEventListener(U, T, L)), x = ke(
    () => [Wi(r), Rt(n)],
    ([E, U]) => {
      if (o(), !E)
        return;
      const T = Ti(U) ? { ...U } : U;
      l.push(
        ...a.flatMap((L) => t.map((d) => _(E, L, d, T)))
      );
    },
    { immediate: !0, flush: "post" }
  ), z = () => {
    x(), o();
  };
  return Mi(z), z;
}
function ht(e, r) {
  return arguments.length === 1 ? Number.parseInt((Math.random() * e + 1).toString(), 10) : Number.parseInt((Math.random() * (r - e + 1) + e).toString(), 10);
}
function zi(e, r) {
  const a = window.MutationObserver, t = new a(r);
  return t.observe(e, { attributes: !0, attributeFilter: ["style"], attributeOldValue: !0 }), t;
}
function Dt(e, r) {
  const a = Math.abs(e[0] - r[0]), t = Math.abs(e[1] - r[1]);
  return Math.sqrt(a * a + t * t);
}
function et(e, r, a, t) {
  return [e + Math.cos(t) * a, r + Math.sin(t) * a];
}
function qi(e) {
  return e.filter((r) => typeof r == "number");
}
function Ii(e) {
  return e = qi(e), e.reduce((r, a) => r + a, 0);
}
function Hi(e, r) {
  const a = Math.abs(e.x - r.x), t = Math.abs(e.y - r.y);
  return Math.sqrt(a * a + t * t);
}
function hn(e) {
  const a = Array.from({ length: e.length - 1 }).fill(0).map((t, n) => [e[n], e[n + 1]]).map((t) => Hi(t[0], t[1]));
  return Ii(a);
}
function Vi(e) {
  return `${e.x},${e.y}`;
}
function vn(e) {
  return e.map(Vi).join(" ");
}
function He(e) {
  return "xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx".replace(/[xy]/g, (r) => {
    const a = Math.random() * 16 | 0;
    return (r === "x" ? a : a & 3 | 8).toString(16);
  });
}
function Ce(e, r) {
  for (const a in r) {
    if (e[a] && typeof e[a] == "object") {
      Ce(e[a], r[a]);
      continue;
    }
    if (typeof r[a] == "object") {
      e[a] = _e(r[a]);
      continue;
    }
    e[a] = r[a];
  }
  return e;
}
function _e(e, r) {
  if (!e)
    return e;
  const a = Array.isArray(e) ? [] : {};
  if (e && typeof e == "object")
    for (const t in e)
      Object.prototype.hasOwnProperty.call(e, t) && (e[t] && typeof e[t] == "object" ? a[t] = _e(e[t]) : a[t] = e[t]);
  return a;
}
function xe(e, r, a) {
  const t = me(0), n = me(0);
  let l, o = null, _ = null;
  const x = (L = !0) => new Promise((d) => {
    Bt(() => {
      _ = e.value, t.value = e.value ? e.value.clientWidth : 0, n.value = e.value ? e.value.clientHeight : 0, e.value ? (!t.value || !n.value) && console.warn("DataV: Component width or height is 0px, rendering abnormality may occur!") : console.warn("DataV: Failed to get dom node, component rendering may be abnormal!"), typeof r == "function" && L && r(), d(!0);
    });
  }), z = () => {
    l = Ni(x, 200);
  }, E = () => {
    o = zi(_, l), Ei(window, "resize", l);
  }, U = () => {
    o && (o.disconnect(), o.takeRecords(), o = null);
  }, T = async () => {
    await x(!1), z(), E(), typeof a == "function" && a();
  };
  return Re(() => {
    T();
  }), Ft(() => {
    U();
  }), Ia(T), Ha(U), {
    width: t,
    height: n,
    initWH: x
  };
}
const Ui = ["width", "height"], Xi = ["d", "fill"], Qi = ["fill", "x", "y"], Yi = ["xlink:href", "width", "height", "x", "y"], Ki = ["fill", "x", "y"], Ji = {
  __name: "index",
  props: {
    config: {
      type: Object,
      default: () => ({})
    }
  },
  setup(e) {
    pt((L) => ({
      "51c9737a": i(o)
    }));
    const r = e, a = me(null), { width: t, height: n } = xe(a, x, _), l = Pe({
      defaultConfig: {
        /**
         * @description Chart data
         * @type {Array<object>}
         * @default data = []
         */
        data: [],
        /**
         * @description Chart img
         * @type {Array<string>}
         * @default img = []
         */
        img: [],
        /**
         * @description Chart font size
         * @type {number}
         * @default fontSize = 12
         */
        fontSize: 12,
        /**
         * @description Img side length
         * @type {number}
         * @default imgSideLength = 30
         */
        imgSideLength: 30,
        /**
         * @description Column color
         * @type {string}
         * @default columnColor = 'rgba(0, 194, 255, 0.4)'
         */
        columnColor: "rgba(0, 194, 255, 0.4)",
        /**
         * @description Text color
         * @type {string}
         * @default textColor = '#fff'
         */
        textColor: "#fff",
        /**
         * @description Show value
         * @type {boolean}
         * @default showValue = false
         */
        showValue: !1,
        /**
         * @description Auto sort by value
         * @type {boolean}
         * @default sort = true
         */
        sort: !0
      },
      mergedConfig: null,
      column: []
    }), o = be(() => `${r.config.fontSize ? r.config.fontSize : l.defaultConfig.fontSize}px`);
    ke(() => r.config, () => {
      z();
    }, {
      deep: !0
    });
    function _() {
      z();
    }
    function x() {
      z();
    }
    function z() {
      E(), U(), T();
    }
    function E() {
      l.mergedConfig = Ce(_e(l.defaultConfig), r.config || {});
    }
    function U() {
      let { data: L } = l.mergedConfig;
      const { sort: d } = l.mergedConfig;
      L = _e(L), d && L.sort(({ value: W }, { value: q }) => W > q ? -1 : W < q ? 1 : 0);
      const B = Math.max(...L.map((W) => W.value));
      L = L.map((W) => ({
        ...W,
        percent: B === 0 ? 0 : W.value / B
      })), l.mergedConfig.data = L;
    }
    function T() {
      const { imgSideLength: L, fontSize: d, data: B } = l.mergedConfig, W = B.length, q = t.value / (W + 1), G = n.value - L - d - 5, m = n.value - d - 5;
      l.column = B.map((y, f) => {
        const { percent: D } = y, k = q * (f + 1), C = q * f, $ = q * (f + 2), c = m - G * D, M = G * D * 0.6 + c, A = `
          M${C}, ${m}
          Q${k}, ${M} ${k},${c}
          M${k},${c}
          Q${k}, ${M} ${$},${m}
          L${C}, ${m}
          Z
        `, p = (m + c) / 2 + d / 2;
        return {
          ...y,
          d: A,
          x: k,
          y: c,
          textY: p
        };
      });
    }
    return (L, d) => (le(), se("div", {
      ref_key: "conicalColumnChart",
      ref: a,
      class: "dv-conical-column-chart"
    }, [
      (le(), se("svg", {
        width: i(t),
        height: i(n)
      }, [
        (le(!0), se(Ae, null, Se(i(l).column, (B, W) => (le(), se("g", { key: W }, [
          ae("path", {
            d: B.d,
            fill: i(l).mergedConfig.columnColor
          }, null, 8, Xi),
          ae("text", {
            fill: i(l).mergedConfig.textColor,
            x: B.x,
            y: i(n) - 4
          }, We(B.name), 9, Qi),
          i(l).mergedConfig.img.length ? (le(), se("image", {
            key: 0,
            "xlink:href": i(l).mergedConfig.img[W % i(l).mergedConfig.img.length],
            width: i(l).mergedConfig.imgSideLength,
            height: i(l).mergedConfig.imgSideLength,
            x: B.x - i(l).mergedConfig.imgSideLength / 2,
            y: B.y - i(l).mergedConfig.imgSideLength
          }, null, 8, Yi)) : $e("", !0),
          i(l).mergedConfig.showValue ? (le(), se("text", {
            key: 1,
            fill: i(l).mergedConfig.textColor,
            x: B.x,
            y: B.textY
          }, We(B.value), 9, Ki)) : $e("", !0)
        ]))), 128))
      ], 8, Ui))
    ], 512));
  }
}, qt = {
  install(e) {
    e.component("DvConicalColumnChart", Ji);
  }
}, Zi = ["id"], eo = ["offset", "stop-color"], to = ["id", "x2"], ro = ["offset", "stop-color"], no = ["x", "y", "rx", "ry", "stroke-width", "stroke", "width", "height"], ao = ["stroke-width", "stroke-dasharray", "stroke", "points"], io = ["stroke", "fill", "x", "y"], oo = {
  __name: "index",
  props: {
    config: {
      type: Object,
      default: () => ({})
    }
  },
  setup(e) {
    const r = e, a = He(), t = me(null), n = Pe({
      gradientId1: `percent-pond-gradientId1-${a}`,
      gradientId2: `percent-pond-gradientId2-${a}`,
      width: 0,
      height: 0,
      defaultConfig: {
        /**
         * @description Value
         * @type {number}
         * @default value = 0
         */
        value: 0,
        /**
         * @description Colors (hex|rgb|rgba|color keywords)
         * @type {Array<string>}
         * @default colors = ['#00BAFF', '#3DE7C9']
         * @example colors = ['#000', 'rgb(0, 0, 0)', 'rgba(0, 0, 0, 1)', 'red']
         */
        colors: ["#3DE7C9", "#00BAFF"],
        /**
         * @description Border width
         * @type {number}
         * @default borderWidth = 3
         */
        borderWidth: 3,
        /**
         * @description Gap between border and pond
         * @type {number}
         * @default borderGap = 3
         */
        borderGap: 3,
        /**
         * @description Line dash
         * @type {Array<number>}
         * @default lineDash = [5, 1]
         */
        lineDash: [5, 1],
        /**
         * @description Text color
         * @type {string}
         * @default textColor = '#fff'
         */
        textColor: "#fff",
        /**
         * @description Border radius
         * @type {number}
         * @default borderRadius = 5
         */
        borderRadius: 5,
        /**
         * @description Local Gradient
         * @type {boolean}
         * @default localGradient = false
         * @example localGradient = false | true
         */
        localGradient: !1,
        /**
         * @description Formatter
         * @type {string}
         * @default formatter = '{value}%'
         */
        formatter: "{value}%"
      },
      mergedConfig: null
    }), l = be(() => {
      if (!n.mergedConfig)
        return 0;
      const { borderWidth: W } = n.mergedConfig;
      return n.width - W;
    }), o = be(() => {
      if (!n.mergedConfig)
        return 0;
      const { borderWidth: W } = n.mergedConfig;
      return n.height - W;
    }), _ = be(() => {
      const W = n.height / 2;
      if (!n.mergedConfig)
        return `0, ${W} 0, ${W}`;
      const { borderWidth: q, borderGap: G, value: m } = n.mergedConfig, y = (n.width - (q + G) * 2) / 100 * m;
      return `
        ${q + G}, ${W}
        ${q + G + y}, ${W + 1e-3}
      `;
    }), x = be(() => {
      if (!n.mergedConfig)
        return 0;
      const { borderWidth: W, borderGap: q } = n.mergedConfig;
      return n.height - (W + q) * 2;
    }), z = be(() => {
      if (!n.mergedConfig)
        return [];
      const { colors: W } = n.mergedConfig, G = 100 / (W.length - 1);
      return W.map((m, y) => [G * y, m]);
    }), E = be(() => n.mergedConfig && n.mergedConfig.localGradient ? n.gradientId1 : n.gradientId2), U = be(() => {
      if (!n.mergedConfig)
        return "100%";
      const { value: W } = n.mergedConfig;
      return `${200 - W}%`;
    }), T = be(() => {
      if (!n.mergedConfig)
        return "";
      const { value: W, formatter: q } = n.mergedConfig;
      return q.replace("{value}", W);
    });
    ke(() => r.config, () => {
      B();
    }, {
      deep: !0
    }), Re(() => {
      L();
    });
    async function L() {
      await d(), r.config && B();
    }
    async function d() {
      await Bt();
      const { clientWidth: W, clientHeight: q } = t.value;
      n.width = W, n.height = q;
    }
    function B() {
      n.mergedConfig = Ce(_e(n.defaultConfig), r.config || {});
    }
    return (W, q) => (le(), se("div", {
      ref_key: "percentPond",
      ref: t,
      class: "dv-percent-pond"
    }, [
      (le(), se("svg", null, [
        ae("defs", null, [
          ae("linearGradient", {
            id: i(n).gradientId1,
            x1: "0%",
            y1: "0%",
            x2: "100%",
            y2: "0%"
          }, [
            (le(!0), se(Ae, null, Se(i(z), (G) => (le(), se("stop", {
              key: G[0],
              offset: `${G[0]}%`,
              "stop-color": G[1]
            }, null, 8, eo))), 128))
          ], 8, Zi),
          ae("linearGradient", {
            id: i(n).gradientId2,
            x1: "0%",
            y1: "0%",
            x2: i(U),
            y2: "0%"
          }, [
            (le(!0), se(Ae, null, Se(i(z), (G) => (le(), se("stop", {
              key: G[0],
              offset: `${G[0]}%`,
              "stop-color": G[1]
            }, null, 8, ro))), 128))
          ], 8, to)
        ]),
        ae("rect", {
          x: i(n).mergedConfig ? i(n).mergedConfig.borderWidth / 2 : "0",
          y: i(n).mergedConfig ? i(n).mergedConfig.borderWidth / 2 : "0",
          rx: i(n).mergedConfig ? i(n).mergedConfig.borderRadius : "0",
          ry: i(n).mergedConfig ? i(n).mergedConfig.borderRadius : "0",
          fill: "transparent",
          "stroke-width": i(n).mergedConfig ? i(n).mergedConfig.borderWidth : "0",
          stroke: `url(#${i(n).gradientId1})`,
          width: i(l) > 0 ? i(l) : 0,
          height: i(o) > 0 ? i(o) : 0
        }, null, 8, no),
        ae("polyline", {
          "stroke-width": i(x),
          "stroke-dasharray": i(n).mergedConfig ? i(n).mergedConfig.lineDash.join(",") : "0",
          stroke: `url(#${i(E)})`,
          points: i(_)
        }, null, 8, ao),
        ae("text", {
          stroke: i(n).mergedConfig ? i(n).mergedConfig.textColor : "#fff",
          fill: i(n).mergedConfig ? i(n).mergedConfig.textColor : "#fff",
          x: i(n).width / 2,
          y: i(n).height / 2
        }, We(i(T)), 9, io)
      ]))
    ], 512));
  }
}, It = {
  install(e) {
    e.component("DvPercentPond", oo);
  }
};
function Aa(e) {
  return e && e.__esModule && Object.prototype.hasOwnProperty.call(e, "default") ? e.default : e;
}
function lo(e) {
  if (e.__esModule) return e;
  var r = e.default;
  if (typeof r == "function") {
    var a = function t() {
      return this instanceof t ? Reflect.construct(r, arguments, this.constructor) : r.apply(this, arguments);
    };
    a.prototype = r.prototype;
  } else a = {};
  return Object.defineProperty(a, "__esModule", { value: !0 }), Object.keys(e).forEach(function(t) {
    var n = Object.getOwnPropertyDescriptor(e, t);
    Object.defineProperty(a, t, n.get ? n : {
      enumerable: !0,
      get: function() {
        return e[t];
      }
    });
  }), a;
}
var jt = {}, La = { exports: {} };
(function(e) {
  function r(a) {
    return a && a.__esModule ? a : {
      default: a
    };
  }
  e.exports = r, e.exports.__esModule = !0, e.exports.default = e.exports;
})(La);
var we = La.exports, Ht = {}, Vt = { exports: {} }, Ut = { exports: {} }, Xt = { exports: {} }, pn;
function Be() {
  return pn || (pn = 1, function(e) {
    function r(a) {
      "@babel/helpers - typeof";
      return e.exports = r = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
        return typeof t;
      } : function(t) {
        return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
      }, e.exports.__esModule = !0, e.exports.default = e.exports, r(a);
    }
    e.exports = r, e.exports.__esModule = !0, e.exports.default = e.exports;
  }(Xt)), Xt.exports;
}
var Qt = { exports: {} }, gn;
function so() {
  return gn || (gn = 1, function(e) {
    var r = Be().default;
    function a(t, n) {
      if (r(t) != "object" || !t) return t;
      var l = t[Symbol.toPrimitive];
      if (l !== void 0) {
        var o = l.call(t, n || "default");
        if (r(o) != "object") return o;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (n === "string" ? String : Number)(t);
    }
    e.exports = a, e.exports.__esModule = !0, e.exports.default = e.exports;
  }(Qt)), Qt.exports;
}
var mn;
function uo() {
  return mn || (mn = 1, function(e) {
    var r = Be().default, a = so();
    function t(n) {
      var l = a(n, "string");
      return r(l) == "symbol" ? l : String(l);
    }
    e.exports = t, e.exports.__esModule = !0, e.exports.default = e.exports;
  }(Ut)), Ut.exports;
}
var yn;
function Ve() {
  return yn || (yn = 1, function(e) {
    var r = uo();
    function a(t, n, l) {
      return n = r(n), n in t ? Object.defineProperty(t, n, {
        value: l,
        enumerable: !0,
        configurable: !0,
        writable: !0
      }) : t[n] = l, t;
    }
    e.exports = a, e.exports.__esModule = !0, e.exports.default = e.exports;
  }(Vt)), Vt.exports;
}
var Yt = { exports: {} }, Kt = { exports: {} }, Jt = { exports: {} }, bn;
function Sa() {
  return bn || (bn = 1, function(e) {
    function r(a, t) {
      (t == null || t > a.length) && (t = a.length);
      for (var n = 0, l = new Array(t); n < t; n++) l[n] = a[n];
      return l;
    }
    e.exports = r, e.exports.__esModule = !0, e.exports.default = e.exports;
  }(Jt)), Jt.exports;
}
var xn;
function co() {
  return xn || (xn = 1, function(e) {
    var r = Sa();
    function a(t) {
      if (Array.isArray(t)) return r(t);
    }
    e.exports = a, e.exports.__esModule = !0, e.exports.default = e.exports;
  }(Kt)), Kt.exports;
}
var Zt = { exports: {} }, Cn;
function fo() {
  return Cn || (Cn = 1, function(e) {
    function r(a) {
      if (typeof Symbol < "u" && a[Symbol.iterator] != null || a["@@iterator"] != null) return Array.from(a);
    }
    e.exports = r, e.exports.__esModule = !0, e.exports.default = e.exports;
  }(Zt)), Zt.exports;
}
var er = { exports: {} }, $n;
function Oa() {
  return $n || ($n = 1, function(e) {
    var r = Sa();
    function a(t, n) {
      if (t) {
        if (typeof t == "string") return r(t, n);
        var l = Object.prototype.toString.call(t).slice(8, -1);
        if (l === "Object" && t.constructor && (l = t.constructor.name), l === "Map" || l === "Set") return Array.from(t);
        if (l === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(l)) return r(t, n);
      }
    }
    e.exports = a, e.exports.__esModule = !0, e.exports.default = e.exports;
  }(er)), er.exports;
}
var tr = { exports: {} }, _n;
function ho() {
  return _n || (_n = 1, function(e) {
    function r() {
      throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
    }
    e.exports = r, e.exports.__esModule = !0, e.exports.default = e.exports;
  }(tr)), tr.exports;
}
var Pn;
function Te() {
  return Pn || (Pn = 1, function(e) {
    var r = co(), a = fo(), t = Oa(), n = ho();
    function l(o) {
      return r(o) || a(o) || t(o) || n();
    }
    e.exports = l, e.exports.__esModule = !0, e.exports.default = e.exports;
  }(Yt)), Yt.exports;
}
var rr = { exports: {} }, wn;
function mt() {
  return wn || (wn = 1, function(e) {
    function r(a, t) {
      if (!(a instanceof t))
        throw new TypeError("Cannot call a class as a function");
    }
    e.exports = r, e.exports.__esModule = !0, e.exports.default = e.exports;
  }(rr)), rr.exports;
}
const yt = /* @__PURE__ */ lo(ri);
var nr = {}, ar = {}, ir = { exports: {} }, or = { exports: {} }, kn;
function vo() {
  return kn || (kn = 1, function(e) {
    function r(a) {
      if (Array.isArray(a)) return a;
    }
    e.exports = r, e.exports.__esModule = !0, e.exports.default = e.exports;
  }(or)), or.exports;
}
var lr = { exports: {} }, An;
function po() {
  return An || (An = 1, function(e) {
    function r(a, t) {
      var n = a == null ? null : typeof Symbol < "u" && a[Symbol.iterator] || a["@@iterator"];
      if (n != null) {
        var l, o, _, x, z = [], E = !0, U = !1;
        try {
          if (_ = (n = n.call(a)).next, t === 0) {
            if (Object(n) !== n) return;
            E = !1;
          } else for (; !(E = (l = _.call(n)).done) && (z.push(l.value), z.length !== t); E = !0) ;
        } catch (T) {
          U = !0, o = T;
        } finally {
          try {
            if (!E && n.return != null && (x = n.return(), Object(x) !== x)) return;
          } finally {
            if (U) throw o;
          }
        }
        return z;
      }
    }
    e.exports = r, e.exports.__esModule = !0, e.exports.default = e.exports;
  }(lr)), lr.exports;
}
var sr = { exports: {} }, Ln;
function go() {
  return Ln || (Ln = 1, function(e) {
    function r() {
      throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
    }
    e.exports = r, e.exports.__esModule = !0, e.exports.default = e.exports;
  }(sr)), sr.exports;
}
var Sn;
function Ne() {
  return Sn || (Sn = 1, function(e) {
    var r = vo(), a = po(), t = Oa(), n = go();
    function l(o, _) {
      return r(o) || a(o, _) || t(o, _) || n();
    }
    e.exports = l, e.exports.__esModule = !0, e.exports.default = e.exports;
  }(ir)), ir.exports;
}
var On;
function mo() {
  return On || (On = 1, function(e) {
    var r = we;
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.bezierCurveToPolyline = q, e.getBezierCurveLength = G, e.default = void 0;
    var a = r(Ne()), t = r(Te()), n = Math.sqrt, l = Math.pow, o = Math.ceil, _ = Math.abs, x = 50;
    function z(y) {
      var f = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 5, D = y.length - 1, k = y[0], C = y[D][2], $ = y.slice(1), c = $.map(function(V, X) {
        var ee = X === 0 ? k : $[X - 1][2];
        return E.apply(void 0, [ee].concat((0, t.default)(V)));
      }), M = new Array(D).fill(x), A = d(c, M), p = W(A, c, $, f);
      return p.segmentPoints.push(C), p;
    }
    function E(y, f, D, k) {
      return function(C) {
        var $ = 1 - C, c = l($, 3), M = l($, 2), A = l(C, 3), p = l(C, 2);
        return [y[0] * c + 3 * f[0] * C * M + 3 * D[0] * p * $ + k[0] * A, y[1] * c + 3 * f[1] * C * M + 3 * D[1] * p * $ + k[1] * A];
      };
    }
    function U(y, f) {
      var D = (0, a.default)(y, 2), k = D[0], C = D[1], $ = (0, a.default)(f, 2), c = $[0], M = $[1];
      return n(l(k - c, 2) + l(C - M, 2));
    }
    function T(y) {
      return y.reduce(function(f, D) {
        return f + D;
      }, 0);
    }
    function L(y) {
      return y.map(function(f, D) {
        return new Array(f.length - 1).fill(0).map(function(k, C) {
          return U(f[C], f[C + 1]);
        });
      });
    }
    function d(y, f) {
      return y.map(function(D, k) {
        var C = 1 / f[k];
        return new Array(f[k]).fill("").map(function($, c) {
          return D(c * C);
        });
      });
    }
    function B(y, f) {
      return y.map(function(D) {
        return D.map(function(k) {
          return _(k - f);
        });
      }).map(function(D) {
        return T(D);
      }).reduce(function(D, k) {
        return D + k;
      }, 0);
    }
    function W(y, f, D, k) {
      var C = 4, $ = 1, c = function() {
        var p = y.reduce(function(Q, te) {
          return Q + te.length;
        }, 0);
        y.forEach(function(Q, te) {
          return Q.push(D[te][2]);
        });
        var V = L(y), X = V.reduce(function(Q, te) {
          return Q + te.length;
        }, 0), ee = V.map(function(Q) {
          return T(Q);
        }), u = T(ee), I = u / X, g = B(V, I);
        if (g <= k) return "break";
        p = o(I / k * p * 1.1);
        var v = ee.map(function(Q) {
          return o(Q / u * p);
        });
        y = d(f, v), p = y.reduce(function(Q, te) {
          return Q + te.length;
        }, 0);
        var S = JSON.parse(JSON.stringify(y));
        S.forEach(function(Q, te) {
          return Q.push(D[te][2]);
        }), V = L(S), X = V.reduce(function(Q, te) {
          return Q + te.length;
        }, 0), ee = V.map(function(Q) {
          return T(Q);
        }), u = T(ee), I = u / X;
        var J = 1 / p / 10;
        f.forEach(function(Q, te) {
          for (var oe = v[te], ve = new Array(oe).fill("").map(function(w, O) {
            return O / v[te];
          }), Y = 0; Y < C; Y++)
            for (var ie = L([y[te]])[0], ce = ie.map(function(w) {
              return w - I;
            }), fe = 0, N = 0; N < oe; N++) {
              if (N === 0) return;
              fe += ce[N - 1], ve[N] -= J * fe, ve[N] > 1 && (ve[N] = 1), ve[N] < 0 && (ve[N] = 0), y[te][N] = Q(ve[N]);
            }
        }), C *= 4, $++;
      };
      do {
        var M = c();
        if (M === "break") break;
      } while (C <= 1025);
      return y = y.reduce(function(A, p) {
        return A.concat(p);
      }, []), {
        segmentPoints: y,
        cycles: $,
        rounds: C
      };
    }
    function q(y) {
      var f = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 5;
      if (!y)
        return console.error("bezierCurveToPolyline: Missing parameters!"), !1;
      if (!(y instanceof Array))
        return console.error("bezierCurveToPolyline: Parameter bezierCurve must be an array!"), !1;
      if (typeof f != "number")
        return console.error("bezierCurveToPolyline: Parameter precision must be a number!"), !1;
      var D = z(y, f), k = D.segmentPoints;
      return k;
    }
    function G(y) {
      var f = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 5;
      if (!y)
        return console.error("getBezierCurveLength: Missing parameters!"), !1;
      if (!(y instanceof Array))
        return console.error("getBezierCurveLength: Parameter bezierCurve must be an array!"), !1;
      if (typeof f != "number")
        return console.error("getBezierCurveLength: Parameter precision must be a number!"), !1;
      var D = z(y, f), k = D.segmentPoints, C = L([k])[0], $ = T(C);
      return $;
    }
    var m = q;
    e.default = m;
  }(ar)), ar;
}
var ur = {}, Gn;
function yo() {
  return Gn || (Gn = 1, function(e) {
    var r = we;
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.default = void 0;
    var a = r(Ne()), t = r(Te());
    function n(z) {
      var E = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1, U = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0.25, T = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0.25;
      if (!(z instanceof Array))
        return console.error("polylineToBezierCurve: Parameter polyline must be an array!"), !1;
      if (z.length <= 2)
        return console.error("polylineToBezierCurve: Converting to a curve requires at least 3 points!"), !1;
      var L = z[0], d = z.length - 1, B = new Array(d).fill(0).map(function(W, q) {
        return [].concat((0, t.default)(l(z, q, E, U, T)), [z[q + 1]]);
      });
      return E && o(B, L), B.unshift(z[0]), B;
    }
    function l(z, E) {
      var U = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1, T = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0.25, L = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 0.25, d = z.length;
      if (!(d < 3 || E >= d)) {
        var B = E - 1;
        B < 0 && (B = U ? d + B : 0);
        var W = E + 1;
        W >= d && (W = U ? W - d : d - 1);
        var q = E + 2;
        q >= d && (q = U ? q - d : d - 1);
        var G = z[B], m = z[E], y = z[W], f = z[q];
        return [[m[0] + T * (y[0] - G[0]), m[1] + T * (y[1] - G[1])], [y[0] - L * (f[0] - m[0]), y[1] - L * (f[1] - m[1])]];
      }
    }
    function o(z, E) {
      var U = z[0], T = z.slice(-1)[0];
      return z.push([_(T[1], T[2]), _(U[0], E), E]), z;
    }
    function _(z, E) {
      var U = (0, a.default)(z, 2), T = U[0], L = U[1], d = (0, a.default)(E, 2), B = d[0], W = d[1], q = B - T, G = W - L;
      return [B + q, W + G];
    }
    var x = n;
    e.default = x;
  }(ur)), ur;
}
var Mn;
function cn() {
  return Mn || (Mn = 1, function(e) {
    var r = we;
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), Object.defineProperty(e, "bezierCurveToPolyline", {
      enumerable: !0,
      get: function() {
        return a.bezierCurveToPolyline;
      }
    }), Object.defineProperty(e, "getBezierCurveLength", {
      enumerable: !0,
      get: function() {
        return a.getBezierCurveLength;
      }
    }), Object.defineProperty(e, "polylineToBezierCurve", {
      enumerable: !0,
      get: function() {
        return t.default;
      }
    }), e.default = void 0;
    var a = mo(), t = r(yo()), n = {
      bezierCurveToPolyline: a.bezierCurveToPolyline,
      getBezierCurveLength: a.getBezierCurveLength,
      polylineToBezierCurve: t.default
    };
    e.default = n;
  }(nr)), nr;
}
var cr = {}, Rn;
function Fe() {
  return Rn || (Rn = 1, function(e) {
    var r = we;
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.deepClone = T, e.eliminateBlur = L, e.checkPointIsInCircle = d, e.getTwoPointDistance = B, e.checkPointIsInPolygon = W, e.checkPointIsInSector = q, e.checkPointIsNearPolyline = m, e.checkPointIsInRect = y, e.getRotatePointPos = f, e.getScalePointPos = D, e.getTranslatePointPos = k, e.getDistanceBetweenPointAndLine = C, e.getCircleRadianPoint = $, e.getRegularPolygonPoints = c, e.default = void 0;
    var a = r(Te()), t = r(Ne()), n = r(Be()), l = Math.abs, o = Math.sqrt, _ = Math.sin, x = Math.cos, z = Math.max, E = Math.min, U = Math.PI;
    function T(A) {
      var p = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;
      if (!A) return A;
      var V = JSON.parse, X = JSON.stringify;
      if (!p) return V(X(A));
      var ee = A instanceof Array ? [] : {};
      if (A && (0, n.default)(A) === "object")
        for (var u in A)
          A.hasOwnProperty(u) && (A[u] && (0, n.default)(A[u]) === "object" ? ee[u] = T(A[u], !0) : ee[u] = A[u]);
      return ee;
    }
    function L(A) {
      return A.map(function(p) {
        var V = (0, t.default)(p, 2), X = V[0], ee = V[1];
        return [parseInt(X) + 0.5, parseInt(ee) + 0.5];
      });
    }
    function d(A, p, V, X) {
      return B(A, [p, V]) <= X;
    }
    function B(A, p) {
      var V = (0, t.default)(A, 2), X = V[0], ee = V[1], u = (0, t.default)(p, 2), I = u[0], g = u[1], v = l(X - I), S = l(ee - g);
      return o(v * v + S * S);
    }
    function W(A, p) {
      for (var V = 0, X = (0, t.default)(A, 2), ee = X[0], u = X[1], I = p.length, g = 1, v = p[0]; g <= I; g++) {
        var S = p[g % I];
        if (ee > E(v[0], S[0]) && ee <= z(v[0], S[0]) && u <= z(v[1], S[1]) && v[0] !== S[0]) {
          var J = (ee - v[0]) * (S[1] - v[1]) / (S[0] - v[0]) + v[1];
          (v[1] === S[1] || u <= J) && V++;
        }
        v = S;
      }
      return V % 2 === 1;
    }
    function q(A, p, V, X, ee, u, I) {
      if (!A || B(A, [p, V]) > X) return !1;
      if (!I) {
        var g = T([u, ee]), v = (0, t.default)(g, 2);
        ee = v[0], u = v[1];
      }
      var S = ee > u;
      if (S) {
        var J = [u, ee];
        ee = J[0], u = J[1];
      }
      var Q = u - ee;
      if (Q >= U * 2) return !0;
      var te = (0, t.default)(A, 2), oe = te[0], ve = te[1], Y = $(p, V, X, ee), ie = (0, t.default)(Y, 2), ce = ie[0], fe = ie[1], N = $(p, V, X, u), w = (0, t.default)(N, 2), O = w[0], F = w[1], H = [oe - p, ve - V], re = [ce - p, fe - V], h = [O - p, F - V], j = Q > U;
      if (j) {
        var s = T([h, re]), b = (0, t.default)(s, 2);
        re = b[0], h = b[1];
      }
      var P = G(re, H) && !G(h, H);
      return j && (P = !P), S && (P = !P), P;
    }
    function G(A, p) {
      var V = (0, t.default)(A, 2), X = V[0], ee = V[1], u = (0, t.default)(p, 2), I = u[0], g = u[1];
      return -ee * I + X * g > 0;
    }
    function m(A, p, V) {
      var X = V / 2, ee = p.map(function(g) {
        var v = (0, t.default)(g, 2), S = v[0], J = v[1];
        return [S, J - X];
      }), u = p.map(function(g) {
        var v = (0, t.default)(g, 2), S = v[0], J = v[1];
        return [S, J + X];
      }), I = [].concat((0, a.default)(ee), (0, a.default)(u.reverse()));
      return W(A, I);
    }
    function y(A, p, V, X, ee) {
      var u = (0, t.default)(A, 2), I = u[0], g = u[1];
      return !(I < p || g < V || I > p + X || g > V + ee);
    }
    function f() {
      var A = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0, p = arguments.length > 1 ? arguments[1] : void 0, V = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [0, 0];
      if (!p) return !1;
      if (A % 360 === 0) return p;
      var X = (0, t.default)(p, 2), ee = X[0], u = X[1], I = (0, t.default)(V, 2), g = I[0], v = I[1];
      return A *= U / 180, [(ee - g) * x(A) - (u - v) * _(A) + g, (ee - g) * _(A) + (u - v) * x(A) + v];
    }
    function D() {
      var A = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [1, 1], p = arguments.length > 1 ? arguments[1] : void 0, V = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [0, 0];
      if (!p) return !1;
      if (A === 1) return p;
      var X = (0, t.default)(p, 2), ee = X[0], u = X[1], I = (0, t.default)(V, 2), g = I[0], v = I[1], S = (0, t.default)(A, 2), J = S[0], Q = S[1], te = ee - g, oe = u - v;
      return [te * J + g, oe * Q + v];
    }
    function k(A, p) {
      if (!A || !p) return !1;
      var V = (0, t.default)(p, 2), X = V[0], ee = V[1], u = (0, t.default)(A, 2), I = u[0], g = u[1];
      return [X + I, ee + g];
    }
    function C(A, p, V) {
      if (!A || !p || !V) return !1;
      var X = (0, t.default)(A, 2), ee = X[0], u = X[1], I = (0, t.default)(p, 2), g = I[0], v = I[1], S = (0, t.default)(V, 2), J = S[0], Q = S[1], te = Q - v, oe = g - J, ve = v * (J - g) - g * (Q - v), Y = l(te * ee + oe * u + ve), ie = o(te * te + oe * oe);
      return Y / ie;
    }
    function $(A, p, V, X) {
      return [A + x(X) * V, p + _(X) * V];
    }
    function c(A, p, V, X) {
      var ee = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : U * -0.5, u = U * 2 / X, I = new Array(X).fill("").map(function(g, v) {
        return v * u + ee;
      });
      return I.map(function(g) {
        return $(A, p, V, g);
      });
    }
    var M = {
      deepClone: T,
      eliminateBlur: L,
      checkPointIsInCircle: d,
      checkPointIsInPolygon: W,
      checkPointIsInSector: q,
      checkPointIsNearPolyline: m,
      getTwoPointDistance: B,
      getRotatePointPos: f,
      getScalePointPos: D,
      getTranslatePointPos: k,
      getCircleRadianPoint: $,
      getRegularPolygonPoints: c,
      getDistanceBetweenPointAndLine: C
    };
    e.default = M;
  }(cr)), cr;
}
var fr = {}, dr = {}, Dn;
function bo() {
  return Dn || (Dn = 1, function(e) {
    var r = we;
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.drawPolylinePath = t, e.drawBezierCurvePath = n, e.default = void 0;
    var a = r(Te());
    function t(o, _) {
      var x = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1, z = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : !1;
      if (!o || _.length < 2) return !1;
      x && o.beginPath(), _.forEach(function(E, U) {
        return E && (U === 0 ? o.moveTo.apply(o, (0, a.default)(E)) : o.lineTo.apply(o, (0, a.default)(E)));
      }), z && o.closePath();
    }
    function n(o, _) {
      var x = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1, z = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : !1, E = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : !1;
      if (!o || !_) return !1;
      z && o.beginPath(), x && o.moveTo.apply(o, (0, a.default)(x)), _.forEach(function(U) {
        return U && o.bezierCurveTo.apply(o, (0, a.default)(U[0]).concat((0, a.default)(U[1]), (0, a.default)(U[2])));
      }), E && o.closePath();
    }
    var l = {
      drawPolylinePath: t,
      drawBezierCurvePath: n
    };
    e.default = l;
  }(dr)), dr;
}
var Tn;
function fn() {
  return Tn || (Tn = 1, function(e) {
    var r = we;
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.extendNewGraph = D, e.default = e.text = e.bezierCurve = e.smoothline = e.polyline = e.regPolygon = e.sector = e.arc = e.ring = e.rect = e.ellipse = e.circle = void 0;
    var a = r(Te()), t = r(Ne()), n = r(cn()), l = Fe(), o = bo(), _ = n.default.polylineToBezierCurve, x = n.default.bezierCurveToPolyline, z = {
      shape: {
        rx: 0,
        ry: 0,
        r: 0
      },
      validator: function(C) {
        var $ = C.shape, c = $.rx, M = $.ry, A = $.r;
        return typeof c != "number" || typeof M != "number" || typeof A != "number" ? (console.error("Circle shape configuration is abnormal!"), !1) : !0;
      },
      draw: function(C, $) {
        var c = C.ctx, M = $.shape;
        c.beginPath();
        var A = M.rx, p = M.ry, V = M.r;
        c.arc(A, p, V > 0 ? V : 0.01, 0, Math.PI * 2), c.fill(), c.stroke(), c.closePath();
      },
      hoverCheck: function(C, $) {
        var c = $.shape, M = c.rx, A = c.ry, p = c.r;
        return (0, l.checkPointIsInCircle)(C, M, A, p);
      },
      setGraphCenter: function(C, $) {
        var c = $.shape, M = $.style, A = c.rx, p = c.ry;
        M.graphCenter = [A, p];
      },
      move: function(C, $) {
        var c = C.movementX, M = C.movementY, A = $.shape;
        this.attr("shape", {
          rx: A.rx + c,
          ry: A.ry + M
        });
      }
    };
    e.circle = z;
    var E = {
      shape: {
        rx: 0,
        ry: 0,
        hr: 0,
        vr: 0
      },
      validator: function(C) {
        var $ = C.shape, c = $.rx, M = $.ry, A = $.hr, p = $.vr;
        return typeof c != "number" || typeof M != "number" || typeof A != "number" || typeof p != "number" ? (console.error("Ellipse shape configuration is abnormal!"), !1) : !0;
      },
      draw: function(C, $) {
        var c = C.ctx, M = $.shape;
        c.beginPath();
        var A = M.rx, p = M.ry, V = M.hr, X = M.vr;
        c.ellipse(A, p, V > 0 ? V : 0.01, X > 0 ? X : 0.01, 0, 0, Math.PI * 2), c.fill(), c.stroke(), c.closePath();
      },
      hoverCheck: function(C, $) {
        var c = $.shape, M = c.rx, A = c.ry, p = c.hr, V = c.vr, X = Math.max(p, V), ee = Math.min(p, V), u = Math.sqrt(X * X - ee * ee), I = [M - u, A], g = [M + u, A], v = (0, l.getTwoPointDistance)(C, I) + (0, l.getTwoPointDistance)(C, g);
        return v <= 2 * X;
      },
      setGraphCenter: function(C, $) {
        var c = $.shape, M = $.style, A = c.rx, p = c.ry;
        M.graphCenter = [A, p];
      },
      move: function(C, $) {
        var c = C.movementX, M = C.movementY, A = $.shape;
        this.attr("shape", {
          rx: A.rx + c,
          ry: A.ry + M
        });
      }
    };
    e.ellipse = E;
    var U = {
      shape: {
        x: 0,
        y: 0,
        w: 0,
        h: 0
      },
      validator: function(C) {
        var $ = C.shape, c = $.x, M = $.y, A = $.w, p = $.h;
        return typeof c != "number" || typeof M != "number" || typeof A != "number" || typeof p != "number" ? (console.error("Rect shape configuration is abnormal!"), !1) : !0;
      },
      draw: function(C, $) {
        var c = C.ctx, M = $.shape;
        c.beginPath();
        var A = M.x, p = M.y, V = M.w, X = M.h;
        c.rect(A, p, V, X), c.fill(), c.stroke(), c.closePath();
      },
      hoverCheck: function(C, $) {
        var c = $.shape, M = c.x, A = c.y, p = c.w, V = c.h;
        return (0, l.checkPointIsInRect)(C, M, A, p, V);
      },
      setGraphCenter: function(C, $) {
        var c = $.shape, M = $.style, A = c.x, p = c.y, V = c.w, X = c.h;
        M.graphCenter = [A + V / 2, p + X / 2];
      },
      move: function(C, $) {
        var c = C.movementX, M = C.movementY, A = $.shape;
        this.attr("shape", {
          x: A.x + c,
          y: A.y + M
        });
      }
    };
    e.rect = U;
    var T = {
      shape: {
        rx: 0,
        ry: 0,
        r: 0
      },
      validator: function(C) {
        var $ = C.shape, c = $.rx, M = $.ry, A = $.r;
        return typeof c != "number" || typeof M != "number" || typeof A != "number" ? (console.error("Ring shape configuration is abnormal!"), !1) : !0;
      },
      draw: function(C, $) {
        var c = C.ctx, M = $.shape;
        c.beginPath();
        var A = M.rx, p = M.ry, V = M.r;
        c.arc(A, p, V > 0 ? V : 0.01, 0, Math.PI * 2), c.stroke(), c.closePath();
      },
      hoverCheck: function(C, $) {
        var c = $.shape, M = $.style, A = c.rx, p = c.ry, V = c.r, X = M.lineWidth, ee = X / 2, u = V - ee, I = V + ee, g = (0, l.getTwoPointDistance)(C, [A, p]);
        return g >= u && g <= I;
      },
      setGraphCenter: function(C, $) {
        var c = $.shape, M = $.style, A = c.rx, p = c.ry;
        M.graphCenter = [A, p];
      },
      move: function(C, $) {
        var c = C.movementX, M = C.movementY, A = $.shape;
        this.attr("shape", {
          rx: A.rx + c,
          ry: A.ry + M
        });
      }
    };
    e.ring = T;
    var L = {
      shape: {
        rx: 0,
        ry: 0,
        r: 0,
        startAngle: 0,
        endAngle: 0,
        clockWise: !0
      },
      validator: function(C) {
        var $ = C.shape, c = ["rx", "ry", "r", "startAngle", "endAngle"];
        return c.find(function(M) {
          return typeof $[M] != "number";
        }) ? (console.error("Arc shape configuration is abnormal!"), !1) : !0;
      },
      draw: function(C, $) {
        var c = C.ctx, M = $.shape;
        c.beginPath();
        var A = M.rx, p = M.ry, V = M.r, X = M.startAngle, ee = M.endAngle, u = M.clockWise;
        c.arc(A, p, V > 0 ? V : 1e-3, X, ee, !u), c.stroke(), c.closePath();
      },
      hoverCheck: function(C, $) {
        var c = $.shape, M = $.style, A = c.rx, p = c.ry, V = c.r, X = c.startAngle, ee = c.endAngle, u = c.clockWise, I = M.lineWidth, g = I / 2, v = V - g, S = V + g;
        return !(0, l.checkPointIsInSector)(C, A, p, v, X, ee, u) && (0, l.checkPointIsInSector)(C, A, p, S, X, ee, u);
      },
      setGraphCenter: function(C, $) {
        var c = $.shape, M = $.style, A = c.rx, p = c.ry;
        M.graphCenter = [A, p];
      },
      move: function(C, $) {
        var c = C.movementX, M = C.movementY, A = $.shape;
        this.attr("shape", {
          rx: A.rx + c,
          ry: A.ry + M
        });
      }
    };
    e.arc = L;
    var d = {
      shape: {
        rx: 0,
        ry: 0,
        r: 0,
        startAngle: 0,
        endAngle: 0,
        clockWise: !0
      },
      validator: function(C) {
        var $ = C.shape, c = ["rx", "ry", "r", "startAngle", "endAngle"];
        return c.find(function(M) {
          return typeof $[M] != "number";
        }) ? (console.error("Sector shape configuration is abnormal!"), !1) : !0;
      },
      draw: function(C, $) {
        var c = C.ctx, M = $.shape;
        c.beginPath();
        var A = M.rx, p = M.ry, V = M.r, X = M.startAngle, ee = M.endAngle, u = M.clockWise;
        c.arc(A, p, V > 0 ? V : 0.01, X, ee, !u), c.lineTo(A, p), c.closePath(), c.stroke(), c.fill();
      },
      hoverCheck: function(C, $) {
        var c = $.shape, M = c.rx, A = c.ry, p = c.r, V = c.startAngle, X = c.endAngle, ee = c.clockWise;
        return (0, l.checkPointIsInSector)(C, M, A, p, V, X, ee);
      },
      setGraphCenter: function(C, $) {
        var c = $.shape, M = $.style, A = c.rx, p = c.ry;
        M.graphCenter = [A, p];
      },
      move: function(C, $) {
        var c = C.movementX, M = C.movementY, A = $.shape, p = A.rx, V = A.ry;
        this.attr("shape", {
          rx: p + c,
          ry: V + M
        });
      }
    };
    e.sector = d;
    var B = {
      shape: {
        rx: 0,
        ry: 0,
        r: 0,
        side: 0
      },
      validator: function(C) {
        var $ = C.shape, c = $.side, M = ["rx", "ry", "r", "side"];
        return M.find(function(A) {
          return typeof $[A] != "number";
        }) ? (console.error("RegPolygon shape configuration is abnormal!"), !1) : c < 3 ? (console.error("RegPolygon at least trigon!"), !1) : !0;
      },
      draw: function(C, $) {
        var c = C.ctx, M = $.shape, A = $.cache;
        c.beginPath();
        var p = M.rx, V = M.ry, X = M.r, ee = M.side;
        if (!A.points || A.rx !== p || A.ry !== V || A.r !== X || A.side !== ee) {
          var u = (0, l.getRegularPolygonPoints)(p, V, X, ee);
          Object.assign(A, {
            points: u,
            rx: p,
            ry: V,
            r: X,
            side: ee
          });
        }
        var I = A.points;
        (0, o.drawPolylinePath)(c, I), c.closePath(), c.stroke(), c.fill();
      },
      hoverCheck: function(C, $) {
        var c = $.cache, M = c.points;
        return (0, l.checkPointIsInPolygon)(C, M);
      },
      setGraphCenter: function(C, $) {
        var c = $.shape, M = $.style, A = c.rx, p = c.ry;
        M.graphCenter = [A, p];
      },
      move: function(C, $) {
        var c = C.movementX, M = C.movementY, A = $.shape, p = $.cache, V = A.rx, X = A.ry;
        p.rx += c, p.ry += M, this.attr("shape", {
          rx: V + c,
          ry: X + M
        }), p.points = p.points.map(function(ee) {
          var u = (0, t.default)(ee, 2), I = u[0], g = u[1];
          return [I + c, g + M];
        });
      }
    };
    e.regPolygon = B;
    var W = {
      shape: {
        points: [],
        close: !1
      },
      validator: function(C) {
        var $ = C.shape, c = $.points;
        return c instanceof Array ? !0 : (console.error("Polyline points should be an array!"), !1);
      },
      draw: function(C, $) {
        var c = C.ctx, M = $.shape, A = $.style.lineWidth;
        c.beginPath();
        var p = M.points, V = M.close;
        A === 1 && (p = (0, l.eliminateBlur)(p)), (0, o.drawPolylinePath)(c, p), V && (c.closePath(), c.fill()), c.stroke();
      },
      hoverCheck: function(C, $) {
        var c = $.shape, M = $.style, A = c.points, p = c.close, V = M.lineWidth;
        return p ? (0, l.checkPointIsInPolygon)(C, A) : (0, l.checkPointIsNearPolyline)(C, A, V);
      },
      setGraphCenter: function(C, $) {
        var c = $.shape, M = $.style, A = c.points;
        M.graphCenter = A[0];
      },
      move: function(C, $) {
        var c = C.movementX, M = C.movementY, A = $.shape, p = A.points, V = p.map(function(X) {
          var ee = (0, t.default)(X, 2), u = ee[0], I = ee[1];
          return [u + c, I + M];
        });
        this.attr("shape", {
          points: V
        });
      }
    };
    e.polyline = W;
    var q = {
      shape: {
        points: [],
        close: !1
      },
      validator: function(C) {
        var $ = C.shape, c = $.points;
        return c instanceof Array ? !0 : (console.error("Smoothline points should be an array!"), !1);
      },
      draw: function(C, $) {
        var c = C.ctx, M = $.shape, A = $.cache, p = M.points, V = M.close;
        if (!A.points || A.points.toString() !== p.toString()) {
          var X = _(p, V), ee = x(X);
          Object.assign(A, {
            points: (0, l.deepClone)(p, !0),
            bezierCurve: X,
            hoverPoints: ee
          });
        }
        var u = A.bezierCurve;
        c.beginPath(), (0, o.drawBezierCurvePath)(c, u.slice(1), u[0]), V && (c.closePath(), c.fill()), c.stroke();
      },
      hoverCheck: function(C, $) {
        var c = $.cache, M = $.shape, A = $.style, p = c.hoverPoints, V = M.close, X = A.lineWidth;
        return V ? (0, l.checkPointIsInPolygon)(C, p) : (0, l.checkPointIsNearPolyline)(C, p, X);
      },
      setGraphCenter: function(C, $) {
        var c = $.shape, M = $.style, A = c.points;
        M.graphCenter = A[0];
      },
      move: function(C, $) {
        var c = C.movementX, M = C.movementY, A = $.shape, p = $.cache, V = A.points, X = V.map(function(v) {
          var S = (0, t.default)(v, 2), J = S[0], Q = S[1];
          return [J + c, Q + M];
        });
        p.points = X;
        var ee = (0, t.default)(p.bezierCurve[0], 2), u = ee[0], I = ee[1], g = p.bezierCurve.slice(1);
        p.bezierCurve = [[u + c, I + M]].concat((0, a.default)(g.map(function(v) {
          return v.map(function(S) {
            var J = (0, t.default)(S, 2), Q = J[0], te = J[1];
            return [Q + c, te + M];
          });
        }))), p.hoverPoints = p.hoverPoints.map(function(v) {
          var S = (0, t.default)(v, 2), J = S[0], Q = S[1];
          return [J + c, Q + M];
        }), this.attr("shape", {
          points: X
        });
      }
    };
    e.smoothline = q;
    var G = {
      shape: {
        points: [],
        close: !1
      },
      validator: function(C) {
        var $ = C.shape, c = $.points;
        return c instanceof Array ? !0 : (console.error("BezierCurve points should be an array!"), !1);
      },
      draw: function(C, $) {
        var c = C.ctx, M = $.shape, A = $.cache, p = M.points, V = M.close;
        if (!A.points || A.points.toString() !== p.toString()) {
          var X = x(p, 20);
          Object.assign(A, {
            points: (0, l.deepClone)(p, !0),
            hoverPoints: X
          });
        }
        c.beginPath(), (0, o.drawBezierCurvePath)(c, p.slice(1), p[0]), V && (c.closePath(), c.fill()), c.stroke();
      },
      hoverCheck: function(C, $) {
        var c = $.cache, M = $.shape, A = $.style, p = c.hoverPoints, V = M.close, X = A.lineWidth;
        return V ? (0, l.checkPointIsInPolygon)(C, p) : (0, l.checkPointIsNearPolyline)(C, p, X);
      },
      setGraphCenter: function(C, $) {
        var c = $.shape, M = $.style, A = c.points;
        M.graphCenter = A[0];
      },
      move: function(C, $) {
        var c = C.movementX, M = C.movementY, A = $.shape, p = $.cache, V = A.points, X = (0, t.default)(V[0], 2), ee = X[0], u = X[1], I = V.slice(1), g = [[ee + c, u + M]].concat((0, a.default)(I.map(function(v) {
          return v.map(function(S) {
            var J = (0, t.default)(S, 2), Q = J[0], te = J[1];
            return [Q + c, te + M];
          });
        })));
        p.points = g, p.hoverPoints = p.hoverPoints.map(function(v) {
          var S = (0, t.default)(v, 2), J = S[0], Q = S[1];
          return [J + c, Q + M];
        }), this.attr("shape", {
          points: g
        });
      }
    };
    e.bezierCurve = G;
    var m = {
      shape: {
        content: "",
        position: [],
        maxWidth: void 0,
        rowGap: 0
      },
      validator: function(C) {
        var $ = C.shape, c = $.content, M = $.position, A = $.rowGap;
        return typeof c != "string" ? (console.error("Text content should be a string!"), !1) : M instanceof Array ? typeof A != "number" ? (console.error("Text rowGap should be a number!"), !1) : !0 : (console.error("Text position should be an array!"), !1);
      },
      draw: function(C, $) {
        var c = C.ctx, M = $.shape, A = M.content, p = M.position, V = M.maxWidth, X = M.rowGap, ee = c.textBaseline, u = c.font, I = parseInt(u.replace(/\D/g, "")), g = p, v = (0, t.default)(g, 2), S = v[0], J = v[1];
        A = A.split(`
`);
        var Q = A.length, te = I + X, oe = Q * te - X, ve = 0;
        ee === "middle" && (ve = oe / 2, J += I / 2), ee === "bottom" && (ve = oe, J += I), p = new Array(Q).fill(0).map(function(Y, ie) {
          return [S, J + ie * te - ve];
        }), c.beginPath(), A.forEach(function(Y, ie) {
          c.fillText.apply(c, [Y].concat((0, a.default)(p[ie]), [V])), c.strokeText.apply(c, [Y].concat((0, a.default)(p[ie]), [V]));
        }), c.closePath();
      },
      hoverCheck: function(C, $) {
        return $.shape, $.style, !1;
      },
      setGraphCenter: function(C, $) {
        var c = $.shape, M = $.style, A = c.position;
        M.graphCenter = (0, a.default)(A);
      },
      move: function(C, $) {
        var c = C.movementX, M = C.movementY, A = $.shape, p = (0, t.default)(A.position, 2), V = p[0], X = p[1];
        this.attr("shape", {
          position: [V + c, X + M]
        });
      }
    };
    e.text = m;
    var y = /* @__PURE__ */ new Map([["circle", z], ["ellipse", E], ["rect", U], ["ring", T], ["arc", L], ["sector", d], ["regPolygon", B], ["polyline", W], ["smoothline", q], ["bezierCurve", G], ["text", m]]), f = y;
    e.default = f;
    function D(k, C) {
      if (!k || !C) {
        console.error("ExtendNewGraph Missing Parameters!");
        return;
      }
      if (!C.shape) {
        console.error("Required attribute of shape to extendNewGraph!");
        return;
      }
      if (!C.validator) {
        console.error("Required function of validator to extendNewGraph!");
        return;
      }
      if (!C.draw) {
        console.error("Required function of draw to extendNewGraph!");
        return;
      }
      y.set(k, C);
    }
  }(fr)), fr;
}
var hr = {}, vr = { exports: {} }, Fn;
function xo() {
  return Fn || (Fn = 1, function(e) {
    var r = Be().default;
    function a() {
      e.exports = a = function() {
        return n;
      }, e.exports.__esModule = !0, e.exports.default = e.exports;
      var t, n = {}, l = Object.prototype, o = l.hasOwnProperty, _ = Object.defineProperty || function(g, v, S) {
        g[v] = S.value;
      }, x = typeof Symbol == "function" ? Symbol : {}, z = x.iterator || "@@iterator", E = x.asyncIterator || "@@asyncIterator", U = x.toStringTag || "@@toStringTag";
      function T(g, v, S) {
        return Object.defineProperty(g, v, {
          value: S,
          enumerable: !0,
          configurable: !0,
          writable: !0
        }), g[v];
      }
      try {
        T({}, "");
      } catch {
        T = function(S, J, Q) {
          return S[J] = Q;
        };
      }
      function L(g, v, S, J) {
        var Q = v && v.prototype instanceof y ? v : y, te = Object.create(Q.prototype), oe = new u(J || []);
        return _(te, "_invoke", {
          value: p(g, S, oe)
        }), te;
      }
      function d(g, v, S) {
        try {
          return {
            type: "normal",
            arg: g.call(v, S)
          };
        } catch (J) {
          return {
            type: "throw",
            arg: J
          };
        }
      }
      n.wrap = L;
      var B = "suspendedStart", W = "suspendedYield", q = "executing", G = "completed", m = {};
      function y() {
      }
      function f() {
      }
      function D() {
      }
      var k = {};
      T(k, z, function() {
        return this;
      });
      var C = Object.getPrototypeOf, $ = C && C(C(I([])));
      $ && $ !== l && o.call($, z) && (k = $);
      var c = D.prototype = y.prototype = Object.create(k);
      function M(g) {
        ["next", "throw", "return"].forEach(function(v) {
          T(g, v, function(S) {
            return this._invoke(v, S);
          });
        });
      }
      function A(g, v) {
        function S(Q, te, oe, ve) {
          var Y = d(g[Q], g, te);
          if (Y.type !== "throw") {
            var ie = Y.arg, ce = ie.value;
            return ce && r(ce) == "object" && o.call(ce, "__await") ? v.resolve(ce.__await).then(function(fe) {
              S("next", fe, oe, ve);
            }, function(fe) {
              S("throw", fe, oe, ve);
            }) : v.resolve(ce).then(function(fe) {
              ie.value = fe, oe(ie);
            }, function(fe) {
              return S("throw", fe, oe, ve);
            });
          }
          ve(Y.arg);
        }
        var J;
        _(this, "_invoke", {
          value: function(te, oe) {
            function ve() {
              return new v(function(Y, ie) {
                S(te, oe, Y, ie);
              });
            }
            return J = J ? J.then(ve, ve) : ve();
          }
        });
      }
      function p(g, v, S) {
        var J = B;
        return function(Q, te) {
          if (J === q) throw new Error("Generator is already running");
          if (J === G) {
            if (Q === "throw") throw te;
            return {
              value: t,
              done: !0
            };
          }
          for (S.method = Q, S.arg = te; ; ) {
            var oe = S.delegate;
            if (oe) {
              var ve = V(oe, S);
              if (ve) {
                if (ve === m) continue;
                return ve;
              }
            }
            if (S.method === "next") S.sent = S._sent = S.arg;
            else if (S.method === "throw") {
              if (J === B) throw J = G, S.arg;
              S.dispatchException(S.arg);
            } else S.method === "return" && S.abrupt("return", S.arg);
            J = q;
            var Y = d(g, v, S);
            if (Y.type === "normal") {
              if (J = S.done ? G : W, Y.arg === m) continue;
              return {
                value: Y.arg,
                done: S.done
              };
            }
            Y.type === "throw" && (J = G, S.method = "throw", S.arg = Y.arg);
          }
        };
      }
      function V(g, v) {
        var S = v.method, J = g.iterator[S];
        if (J === t) return v.delegate = null, S === "throw" && g.iterator.return && (v.method = "return", v.arg = t, V(g, v), v.method === "throw") || S !== "return" && (v.method = "throw", v.arg = new TypeError("The iterator does not provide a '" + S + "' method")), m;
        var Q = d(J, g.iterator, v.arg);
        if (Q.type === "throw") return v.method = "throw", v.arg = Q.arg, v.delegate = null, m;
        var te = Q.arg;
        return te ? te.done ? (v[g.resultName] = te.value, v.next = g.nextLoc, v.method !== "return" && (v.method = "next", v.arg = t), v.delegate = null, m) : te : (v.method = "throw", v.arg = new TypeError("iterator result is not an object"), v.delegate = null, m);
      }
      function X(g) {
        var v = {
          tryLoc: g[0]
        };
        1 in g && (v.catchLoc = g[1]), 2 in g && (v.finallyLoc = g[2], v.afterLoc = g[3]), this.tryEntries.push(v);
      }
      function ee(g) {
        var v = g.completion || {};
        v.type = "normal", delete v.arg, g.completion = v;
      }
      function u(g) {
        this.tryEntries = [{
          tryLoc: "root"
        }], g.forEach(X, this), this.reset(!0);
      }
      function I(g) {
        if (g || g === "") {
          var v = g[z];
          if (v) return v.call(g);
          if (typeof g.next == "function") return g;
          if (!isNaN(g.length)) {
            var S = -1, J = function Q() {
              for (; ++S < g.length; ) if (o.call(g, S)) return Q.value = g[S], Q.done = !1, Q;
              return Q.value = t, Q.done = !0, Q;
            };
            return J.next = J;
          }
        }
        throw new TypeError(r(g) + " is not iterable");
      }
      return f.prototype = D, _(c, "constructor", {
        value: D,
        configurable: !0
      }), _(D, "constructor", {
        value: f,
        configurable: !0
      }), f.displayName = T(D, U, "GeneratorFunction"), n.isGeneratorFunction = function(g) {
        var v = typeof g == "function" && g.constructor;
        return !!v && (v === f || (v.displayName || v.name) === "GeneratorFunction");
      }, n.mark = function(g) {
        return Object.setPrototypeOf ? Object.setPrototypeOf(g, D) : (g.__proto__ = D, T(g, U, "GeneratorFunction")), g.prototype = Object.create(c), g;
      }, n.awrap = function(g) {
        return {
          __await: g
        };
      }, M(A.prototype), T(A.prototype, E, function() {
        return this;
      }), n.AsyncIterator = A, n.async = function(g, v, S, J, Q) {
        Q === void 0 && (Q = Promise);
        var te = new A(L(g, v, S, J), Q);
        return n.isGeneratorFunction(v) ? te : te.next().then(function(oe) {
          return oe.done ? oe.value : te.next();
        });
      }, M(c), T(c, U, "Generator"), T(c, z, function() {
        return this;
      }), T(c, "toString", function() {
        return "[object Generator]";
      }), n.keys = function(g) {
        var v = Object(g), S = [];
        for (var J in v) S.push(J);
        return S.reverse(), function Q() {
          for (; S.length; ) {
            var te = S.pop();
            if (te in v) return Q.value = te, Q.done = !1, Q;
          }
          return Q.done = !0, Q;
        };
      }, n.values = I, u.prototype = {
        constructor: u,
        reset: function(v) {
          if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(ee), !v) for (var S in this) S.charAt(0) === "t" && o.call(this, S) && !isNaN(+S.slice(1)) && (this[S] = t);
        },
        stop: function() {
          this.done = !0;
          var v = this.tryEntries[0].completion;
          if (v.type === "throw") throw v.arg;
          return this.rval;
        },
        dispatchException: function(v) {
          if (this.done) throw v;
          var S = this;
          function J(ie, ce) {
            return oe.type = "throw", oe.arg = v, S.next = ie, ce && (S.method = "next", S.arg = t), !!ce;
          }
          for (var Q = this.tryEntries.length - 1; Q >= 0; --Q) {
            var te = this.tryEntries[Q], oe = te.completion;
            if (te.tryLoc === "root") return J("end");
            if (te.tryLoc <= this.prev) {
              var ve = o.call(te, "catchLoc"), Y = o.call(te, "finallyLoc");
              if (ve && Y) {
                if (this.prev < te.catchLoc) return J(te.catchLoc, !0);
                if (this.prev < te.finallyLoc) return J(te.finallyLoc);
              } else if (ve) {
                if (this.prev < te.catchLoc) return J(te.catchLoc, !0);
              } else {
                if (!Y) throw new Error("try statement without catch or finally");
                if (this.prev < te.finallyLoc) return J(te.finallyLoc);
              }
            }
          }
        },
        abrupt: function(v, S) {
          for (var J = this.tryEntries.length - 1; J >= 0; --J) {
            var Q = this.tryEntries[J];
            if (Q.tryLoc <= this.prev && o.call(Q, "finallyLoc") && this.prev < Q.finallyLoc) {
              var te = Q;
              break;
            }
          }
          te && (v === "break" || v === "continue") && te.tryLoc <= S && S <= te.finallyLoc && (te = null);
          var oe = te ? te.completion : {};
          return oe.type = v, oe.arg = S, te ? (this.method = "next", this.next = te.finallyLoc, m) : this.complete(oe);
        },
        complete: function(v, S) {
          if (v.type === "throw") throw v.arg;
          return v.type === "break" || v.type === "continue" ? this.next = v.arg : v.type === "return" ? (this.rval = this.arg = v.arg, this.method = "return", this.next = "end") : v.type === "normal" && S && (this.next = S), m;
        },
        finish: function(v) {
          for (var S = this.tryEntries.length - 1; S >= 0; --S) {
            var J = this.tryEntries[S];
            if (J.finallyLoc === v) return this.complete(J.completion, J.afterLoc), ee(J), m;
          }
        },
        catch: function(v) {
          for (var S = this.tryEntries.length - 1; S >= 0; --S) {
            var J = this.tryEntries[S];
            if (J.tryLoc === v) {
              var Q = J.completion;
              if (Q.type === "throw") {
                var te = Q.arg;
                ee(J);
              }
              return te;
            }
          }
          throw new Error("illegal catch attempt");
        },
        delegateYield: function(v, S, J) {
          return this.delegate = {
            iterator: I(v),
            resultName: S,
            nextLoc: J
          }, this.method === "next" && (this.arg = t), m;
        }
      }, n;
    }
    e.exports = a, e.exports.__esModule = !0, e.exports.default = e.exports;
  }(vr)), vr.exports;
}
var pr, Bn;
function Co() {
  if (Bn) return pr;
  Bn = 1;
  var e = xo()();
  pr = e;
  try {
    regeneratorRuntime = e;
  } catch {
    typeof globalThis == "object" ? globalThis.regeneratorRuntime = e : Function("r", "regeneratorRuntime = r")(e);
  }
  return pr;
}
var gr = { exports: {} }, Nn;
function $o() {
  return Nn || (Nn = 1, function(e) {
    function r(t, n, l, o, _, x, z) {
      try {
        var E = t[x](z), U = E.value;
      } catch (T) {
        l(T);
        return;
      }
      E.done ? n(U) : Promise.resolve(U).then(o, _);
    }
    function a(t) {
      return function() {
        var n = this, l = arguments;
        return new Promise(function(o, _) {
          var x = t.apply(n, l);
          function z(U) {
            r(x, o, _, z, E, "next", U);
          }
          function E(U) {
            r(x, o, _, z, E, "throw", U);
          }
          z(void 0);
        });
      };
    }
    e.exports = a, e.exports.__esModule = !0, e.exports.default = e.exports;
  }(gr)), gr.exports;
}
var mr = {}, Wn;
function _o() {
  return Wn || (Wn = 1, function(e) {
    var r = we;
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.default = void 0;
    var a = r(Te()), t = r(mt()), n = yt, l = Fe(), o = function L(d) {
      (0, t.default)(this, L), this.colorProcessor(d);
      var B = {
        /**
         * @description Rgba value of graph fill color
         * @type {Array}
         * @default fill = [0, 0, 0, 1]
         */
        fill: [0, 0, 0, 1],
        /**
         * @description Rgba value of graph stroke color
         * @type {Array}
         * @default stroke = [0, 0, 0, 1]
         */
        stroke: [0, 0, 0, 0],
        /**
         * @description Opacity of graph
         * @type {Number}
         * @default opacity = 1
         */
        opacity: 1,
        /**
         * @description LineCap of Ctx
         * @type {String}
         * @default lineCap = null
         * @example lineCap = 'butt'|'round'|'square'
         */
        lineCap: null,
        /**
         * @description Linejoin of Ctx
         * @type {String}
         * @default lineJoin = null
         * @example lineJoin = 'round'|'bevel'|'miter'
         */
        lineJoin: null,
        /**
         * @description LineDash of Ctx
         * @type {Array}
         * @default lineDash = null
         * @example lineDash = [10, 10]
         */
        lineDash: null,
        /**
         * @description LineDashOffset of Ctx
         * @type {Number}
         * @default lineDashOffset = null
         * @example lineDashOffset = 10
         */
        lineDashOffset: null,
        /**
         * @description ShadowBlur of Ctx
         * @type {Number}
         * @default shadowBlur = 0
         */
        shadowBlur: 0,
        /**
         * @description Rgba value of graph shadow color
         * @type {Array}
         * @default shadowColor = [0, 0, 0, 0]
         */
        shadowColor: [0, 0, 0, 0],
        /**
         * @description ShadowOffsetX of Ctx
         * @type {Number}
         * @default shadowOffsetX = 0
         */
        shadowOffsetX: 0,
        /**
         * @description ShadowOffsetY of Ctx
         * @type {Number}
         * @default shadowOffsetY = 0
         */
        shadowOffsetY: 0,
        /**
         * @description LineWidth of Ctx
         * @type {Number}
         * @default lineWidth = 0
         */
        lineWidth: 0,
        /**
         * @description Center point of the graph
         * @type {Array}
         * @default graphCenter = null
         * @example graphCenter = [10, 10]
         */
        graphCenter: null,
        /**
         * @description Graph scale
         * @type {Array}
         * @default scale = null
         * @example scale = [1.5, 1.5]
         */
        scale: null,
        /**
         * @description Graph rotation degree
         * @type {Number}
         * @default rotate = null
         * @example rotate = 10
         */
        rotate: null,
        /**
         * @description Graph translate distance
         * @type {Array}
         * @default translate = null
         * @example translate = [10, 10]
         */
        translate: null,
        /**
         * @description Cursor status when hover
         * @type {String}
         * @default hoverCursor = 'pointer'
         * @example hoverCursor = 'default'|'pointer'|'auto'|'crosshair'|'move'|'wait'|...
         */
        hoverCursor: "pointer",
        /**
         * @description Font style of Ctx
         * @type {String}
         * @default fontStyle = 'normal'
         * @example fontStyle = 'normal'|'italic'|'oblique'
         */
        fontStyle: "normal",
        /**
         * @description Font varient of Ctx
         * @type {String}
         * @default fontVarient = 'normal'
         * @example fontVarient = 'normal'|'small-caps'
         */
        fontVarient: "normal",
        /**
         * @description Font weight of Ctx
         * @type {String|Number}
         * @default fontWeight = 'normal'
         * @example fontWeight = 'normal'|'bold'|'bolder'|'lighter'|Number
         */
        fontWeight: "normal",
        /**
         * @description Font size of Ctx
         * @type {Number}
         * @default fontSize = 10
         */
        fontSize: 10,
        /**
         * @description Font family of Ctx
         * @type {String}
         * @default fontFamily = 'Arial'
         */
        fontFamily: "Arial",
        /**
         * @description TextAlign of Ctx
         * @type {String}
         * @default textAlign = 'center'
         * @example textAlign = 'start'|'end'|'left'|'right'|'center'
         */
        textAlign: "center",
        /**
         * @description TextBaseline of Ctx
         * @type {String}
         * @default textBaseline = 'middle'
         * @example textBaseline = 'top'|'bottom'|'middle'|'alphabetic'|'hanging'
         */
        textBaseline: "middle",
        /**
         * @description The color used to create the gradient
         * @type {Array}
         * @default gradientColor = null
         * @example gradientColor = ['#000', '#111', '#222']
         */
        gradientColor: null,
        /**
         * @description Gradient type
         * @type {String}
         * @default gradientType = 'linear'
         * @example gradientType = 'linear' | 'radial'
         */
        gradientType: "linear",
        /**
         * @description Gradient params
         * @type {Array}
         * @default gradientParams = null
         * @example gradientParams = [x0, y0, x1, y1] (Linear Gradient)
         * @example gradientParams = [x0, y0, r0, x1, y1, r1] (Radial Gradient)
         */
        gradientParams: null,
        /**
         * @description When to use gradients
         * @type {String}
         * @default gradientWith = 'stroke'
         * @example gradientWith = 'stroke' | 'fill'
         */
        gradientWith: "stroke",
        /**
         * @description Gradient color stops
         * @type {String}
         * @default gradientStops = 'auto'
         * @example gradientStops = 'auto' | [0, .2, .3, 1]
         */
        gradientStops: "auto",
        /**
         * @description Extended color that supports animation transition
         * @type {Array|Object}
         * @default colors = null
         * @example colors = ['#000', '#111', '#222', 'red' ]
         * @example colors = { a: '#000', b: '#111' }
         */
        colors: null
      };
      Object.assign(this, B, d);
    };
    e.default = o, o.prototype.colorProcessor = function(L) {
      var d = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1, B = d ? n.getColorFromRgbValue : n.getRgbaValue, W = ["fill", "stroke", "shadowColor"], q = Object.keys(L), G = q.filter(function(D) {
        return W.find(function(k) {
          return k === D;
        });
      });
      G.forEach(function(D) {
        return L[D] = B(L[D]);
      });
      var m = L.gradientColor, y = L.colors;
      if (m && (L.gradientColor = m.map(function(D) {
        return B(D);
      })), y) {
        var f = Object.keys(y);
        f.forEach(function(D) {
          return y[D] = B(y[D]);
        });
      }
    }, o.prototype.initStyle = function(L) {
      _(L, this), z(L, this), E(L, this);
    };
    function _(L, d) {
      L.save();
      var B = d.graphCenter, W = d.rotate, q = d.scale, G = d.translate;
      B instanceof Array && (L.translate.apply(L, (0, a.default)(B)), W && L.rotate(W * Math.PI / 180), q instanceof Array && L.scale.apply(L, (0, a.default)(q)), G && L.translate.apply(L, (0, a.default)(G)), L.translate(-B[0], -B[1]));
    }
    var x = ["lineCap", "lineJoin", "lineDashOffset", "shadowOffsetX", "shadowOffsetY", "lineWidth", "textAlign", "textBaseline"];
    function z(L, d) {
      var B = d.fill, W = d.stroke, q = d.shadowColor, G = d.opacity;
      x.forEach(function(c) {
        (c || typeof c == "number") && (L[c] = d[c]);
      }), B = (0, a.default)(B), W = (0, a.default)(W), q = (0, a.default)(q), B[3] *= G, W[3] *= G, q[3] *= G, L.fillStyle = (0, n.getColorFromRgbValue)(B), L.strokeStyle = (0, n.getColorFromRgbValue)(W), L.shadowColor = (0, n.getColorFromRgbValue)(q);
      var m = d.lineDash, y = d.shadowBlur;
      m && (m = m.map(function(c) {
        return c >= 0 ? c : 0;
      }), L.setLineDash(m)), typeof y == "number" && (L.shadowBlur = y > 0 ? y : 1e-3);
      var f = d.fontStyle, D = d.fontVarient, k = d.fontWeight, C = d.fontSize, $ = d.fontFamily;
      L.font = f + " " + D + " " + k + " " + C + "px " + $;
    }
    function E(L, d) {
      if (U(d)) {
        var B = d.gradientColor, W = d.gradientParams, q = d.gradientType, G = d.gradientWith, m = d.gradientStops, y = d.opacity;
        B = B.map(function(D) {
          var k = D[3] * y, C = (0, a.default)(D);
          return C[3] = k, C;
        }), B = B.map(function(D) {
          return (0, n.getColorFromRgbValue)(D);
        }), m === "auto" && (m = T(B));
        var f = L["create".concat(q.slice(0, 1).toUpperCase() + q.slice(1), "Gradient")].apply(L, (0, a.default)(W));
        m.forEach(function(D, k) {
          return f.addColorStop(D, B[k]);
        }), L["".concat(G, "Style")] = f;
      }
    }
    function U(L) {
      var d = L.gradientColor, B = L.gradientParams, W = L.gradientType, q = L.gradientWith, G = L.gradientStops;
      if (!d || !B) return !1;
      if (d.length === 1)
        return console.warn("The gradient needs to provide at least two colors"), !1;
      if (W !== "linear" && W !== "radial")
        return console.warn("GradientType only supports linear or radial, current value is " + W), !1;
      var m = B.length;
      return W === "linear" && m !== 4 || W === "radial" && m !== 6 ? (console.warn("The expected length of gradientParams is " + (W === "linear" ? "4" : "6")), !1) : q !== "fill" && q !== "stroke" ? (console.warn("GradientWith only supports fill or stroke, current value is " + q), !1) : G !== "auto" && !(G instanceof Array) ? (console.warn("gradientStops only supports 'auto' or Number Array ([0, .5, 1]), current value is " + G), !1) : !0;
    }
    function T(L) {
      var d = 1 / (L.length - 1);
      return L.map(function(B, W) {
        return d * W;
      });
    }
    o.prototype.restoreTransform = function(L) {
      L.restore();
    }, o.prototype.update = function(L) {
      this.colorProcessor(L), Object.assign(this, L);
    }, o.prototype.getStyle = function() {
      var L = (0, l.deepClone)(this, !0);
      return this.colorProcessor(L, !0), L;
    };
  }(mr)), mr;
}
var yr = {}, br = {}, jn;
function Po() {
  return jn || (jn = 1, function(e) {
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.default = e.easeInOutBounce = e.easeOutBounce = e.easeInBounce = e.easeInOutElastic = e.easeOutElastic = e.easeInElastic = e.easeInOutBack = e.easeOutBack = e.easeInBack = e.easeInOutQuint = e.easeOutQuint = e.easeInQuint = e.easeInOutQuart = e.easeOutQuart = e.easeInQuart = e.easeInOutCubic = e.easeOutCubic = e.easeInCubic = e.easeInOutQuad = e.easeOutQuad = e.easeInQuad = e.easeInOutSine = e.easeOutSine = e.easeInSine = e.linear = void 0;
    var r = [[[0, 1], "", [0.33, 0.67]], [[1, 0], [0.67, 0.33]]];
    e.linear = r;
    var a = [[[0, 1]], [[0.538, 0.564], [0.169, 0.912], [0.88, 0.196]], [[1, 0]]];
    e.easeInSine = a;
    var t = [[[0, 1]], [[0.444, 0.448], [0.169, 0.736], [0.718, 0.16]], [[1, 0]]];
    e.easeOutSine = t;
    var n = [[[0, 1]], [[0.5, 0.5], [0.2, 1], [0.8, 0]], [[1, 0]]];
    e.easeInOutSine = n;
    var l = [[[0, 1]], [[0.55, 0.584], [0.231, 0.904], [0.868, 0.264]], [[1, 0]]];
    e.easeInQuad = l;
    var o = [[[0, 1]], [[0.413, 0.428], [0.065, 0.816], [0.76, 0.04]], [[1, 0]]];
    e.easeOutQuad = o;
    var _ = [[[0, 1]], [[0.5, 0.5], [0.3, 0.9], [0.7, 0.1]], [[1, 0]]];
    e.easeInOutQuad = _;
    var x = [[[0, 1]], [[0.679, 0.688], [0.366, 0.992], [0.992, 0.384]], [[1, 0]]];
    e.easeInCubic = x;
    var z = [[[0, 1]], [[0.321, 0.312], [8e-3, 0.616], [0.634, 8e-3]], [[1, 0]]];
    e.easeOutCubic = z;
    var E = [[[0, 1]], [[0.5, 0.5], [0.3, 1], [0.7, 0]], [[1, 0]]];
    e.easeInOutCubic = E;
    var U = [[[0, 1]], [[0.812, 0.74], [0.611, 0.988], [1.013, 0.492]], [[1, 0]]];
    e.easeInQuart = U;
    var T = [[[0, 1]], [[0.152, 0.244], [1e-3, 0.448], [0.285, -0.02]], [[1, 0]]];
    e.easeOutQuart = T;
    var L = [[[0, 1]], [[0.5, 0.5], [0.4, 1], [0.6, 0]], [[1, 0]]];
    e.easeInOutQuart = L;
    var d = [[[0, 1]], [[0.857, 0.856], [0.714, 1], [1, 0.712]], [[1, 0]]];
    e.easeInQuint = d;
    var B = [[[0, 1]], [[0.108, 0.2], [1e-3, 0.4], [0.214, -0.012]], [[1, 0]]];
    e.easeOutQuint = B;
    var W = [[[0, 1]], [[0.5, 0.5], [0.5, 1], [0.5, 0]], [[1, 0]]];
    e.easeInOutQuint = W;
    var q = [[[0, 1]], [[0.667, 0.896], [0.38, 1.184], [0.955, 0.616]], [[1, 0]]];
    e.easeInBack = q;
    var G = [[[0, 1]], [[0.335, 0.028], [0.061, 0.22], [0.631, -0.18]], [[1, 0]]];
    e.easeOutBack = G;
    var m = [[[0, 1]], [[0.5, 0.5], [0.4, 1.4], [0.6, -0.4]], [[1, 0]]];
    e.easeInOutBack = m;
    var y = [[[0, 1]], [[0.474, 0.964], [0.382, 0.988], [0.557, 0.952]], [[0.619, 1.076], [0.565, 1.088], [0.669, 1.08]], [[0.77, 0.916], [0.712, 0.924], [0.847, 0.904]], [[0.911, 1.304], [0.872, 1.316], [0.961, 1.34]], [[1, 0]]];
    e.easeInElastic = y;
    var f = [[[0, 1]], [[0.073, -0.32], [0.034, -0.328], [0.104, -0.344]], [[0.191, 0.092], [0.11, 0.06], [0.256, 0.08]], [[0.31, -0.076], [0.26, -0.068], [0.357, -0.076]], [[0.432, 0.032], [0.362, 0.028], [0.683, -4e-3]], [[1, 0]]];
    e.easeOutElastic = f;
    var D = [[[0, 1]], [[0.21, 0.94], [0.167, 0.884], [0.252, 0.98]], [[0.299, 1.104], [0.256, 1.092], [0.347, 1.108]], [[0.5, 0.496], [0.451, 0.672], [0.548, 0.324]], [[0.696, -0.108], [0.652, -0.112], [0.741, -0.124]], [[0.805, 0.064], [0.756, 0.012], [0.866, 0.096]], [[1, 0]]];
    e.easeInOutElastic = D;
    var k = [[[0, 1]], [[0.148, 1], [0.075, 0.868], [0.193, 0.848]], [[0.326, 1], [0.276, 0.836], [0.405, 0.712]], [[0.6, 1], [0.511, 0.708], [0.671, 0.348]], [[1, 0]]];
    e.easeInBounce = k;
    var C = [[[0, 1]], [[0.357, 4e-3], [0.27, 0.592], [0.376, 0.252]], [[0.604, -4e-3], [0.548, 0.312], [0.669, 0.184]], [[0.82, 0], [0.749, 0.184], [0.905, 0.132]], [[1, 0]]];
    e.easeOutBounce = C;
    var $ = [[[0, 1]], [[0.102, 1], [0.05, 0.864], [0.117, 0.86]], [[0.216, 0.996], [0.208, 0.844], [0.227, 0.808]], [[0.347, 0.996], [0.343, 0.8], [0.48, 0.292]], [[0.635, 4e-3], [0.511, 0.676], [0.656, 0.208]], [[0.787, 0], [0.76, 0.2], [0.795, 0.144]], [[0.905, -4e-3], [0.899, 0.164], [0.944, 0.144]], [[1, 0]]];
    e.easeInOutBounce = $;
    var c = /* @__PURE__ */ new Map([["linear", r], ["easeInSine", a], ["easeOutSine", t], ["easeInOutSine", n], ["easeInQuad", l], ["easeOutQuad", o], ["easeInOutQuad", _], ["easeInCubic", x], ["easeOutCubic", z], ["easeInOutCubic", E], ["easeInQuart", U], ["easeOutQuart", T], ["easeInOutQuart", L], ["easeInQuint", d], ["easeOutQuint", B], ["easeInOutQuint", W], ["easeInBack", q], ["easeOutBack", G], ["easeInOutBack", m], ["easeInElastic", y], ["easeOutElastic", f], ["easeInOutElastic", D], ["easeInBounce", k], ["easeOutBounce", C], ["easeInOutBounce", $]]);
    e.default = c;
  }(br)), br;
}
var En;
function wo() {
  return En || (En = 1, function(e) {
    var r = we;
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.transition = o, e.injectNewCurve = m, e.default = void 0;
    var a = r(Ne()), t = r(Be()), n = r(Po()), l = "linear";
    function o(f) {
      var D = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null, k = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null, C = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 30, $ = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : !1;
      if (!_.apply(void 0, arguments)) return !1;
      try {
        var c = x(f), M = z(c, C);
        return !$ || typeof k == "number" ? d(D, k, M) : G(D, k, M);
      } catch {
        return console.warn("Transition parameter may be abnormal!"), [k];
      }
    }
    function _(f) {
      var D = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1, k = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1, C = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 30;
      if (!f || D === !1 || k === !1 || !C)
        return console.error("transition: Missing Parameters!"), !1;
      if ((0, t.default)(D) !== (0, t.default)(k))
        return console.error("transition: Inconsistent Status Types!"), !1;
      var $ = (0, t.default)(k);
      return $ === "string" || $ === "boolean" || !f.length ? (console.error("transition: Unsupported Data Type of State!"), !1) : (!n.default.has(f) && !(f instanceof Array) && console.warn("transition: Transition curve not found, default curve will be used!"), !0);
    }
    function x(f) {
      var D = "";
      return n.default.has(f) ? D = n.default.get(f) : f instanceof Array ? D = f : D = n.default.get(l), D;
    }
    function z(f, D) {
      var k = 1 / (D - 1), C = new Array(D).fill(0).map(function(c, M) {
        return M * k;
      }), $ = C.map(function(c) {
        return E(f, c);
      });
      return $;
    }
    function E(f, D) {
      var k = U(f, D), C = T(k, D);
      return L(k, C);
    }
    function U(f, D) {
      var k = f.length - 1, C = "", $ = "";
      f.findIndex(function(V, X) {
        if (X !== k) {
          C = V, $ = f[X + 1];
          var ee = C[0][0], u = $[0][0];
          return D >= ee && D < u;
        }
      });
      var c = C[0], M = C[2] || C[0], A = $[1] || $[0], p = $[0];
      return [c, M, A, p];
    }
    function T(f, D) {
      var k = f[0][0], C = f[3][0], $ = C - k, c = D - k;
      return c / $;
    }
    function L(f, D) {
      var k = (0, a.default)(f, 4), C = (0, a.default)(k[0], 2), $ = C[1], c = (0, a.default)(k[1], 2), M = c[1], A = (0, a.default)(k[2], 2), p = A[1], V = (0, a.default)(k[3], 2), X = V[1], ee = Math.pow, u = 1 - D, I = $ * ee(u, 3), g = 3 * M * D * ee(u, 2), v = 3 * p * ee(D, 2) * u, S = X * ee(D, 3);
      return 1 - (I + g + v + S);
    }
    function d(f, D, k) {
      var C = "object";
      return typeof f == "number" && (C = "number"), f instanceof Array && (C = "array"), C === "number" ? B(f, D, k) : C === "array" ? W(f, D, k) : C === "object" ? q(f, D, k) : k.map(function($) {
        return D;
      });
    }
    function B(f, D, k) {
      var C = D - f;
      return k.map(function($) {
        return f + C * $;
      });
    }
    function W(f, D, k) {
      var C = D.map(function($, c) {
        return typeof $ != "number" ? !1 : $ - f[c];
      });
      return k.map(function($) {
        return C.map(function(c, M) {
          return c === !1 ? D[M] : f[M] + c * $;
        });
      });
    }
    function q(f, D, k) {
      var C = Object.keys(D), $ = C.map(function(A) {
        return f[A];
      }), c = C.map(function(A) {
        return D[A];
      }), M = W($, c, k);
      return M.map(function(A) {
        var p = {};
        return A.forEach(function(V, X) {
          return p[C[X]] = V;
        }), p;
      });
    }
    function G(f, D, k) {
      var C = d(f, D, k), $ = function(p) {
        var V = f[p], X = D[p];
        if ((0, t.default)(X) !== "object") return "continue";
        var ee = G(V, X, k);
        C.forEach(function(u, I) {
          return u[p] = ee[I];
        });
      };
      for (var c in D)
        var M = $(c);
      return C;
    }
    function m(f, D) {
      if (!f || !D) {
        console.error("InjectNewCurve Missing Parameters!");
        return;
      }
      n.default.set(f, D);
    }
    var y = o;
    e.default = y;
  }(yr)), yr;
}
var zn;
function ko() {
  return zn || (zn = 1, function(e) {
    var r = we;
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.default = void 0;
    var a = r(Co()), t = r($o()), n = r(Be()), l = r(Te()), o = r(mt()), _ = r(_o()), x = r(wo()), z = Fe(), E = function T(L, d) {
      (0, o.default)(this, T), d = (0, z.deepClone)(d, !0);
      var B = {
        /**
         * @description Weather to render graph
         * @type {Boolean}
         * @default visible = true
         */
        visible: !0,
        /**
         * @description Whether to enable drag
         * @type {Boolean}
         * @default drag = false
         */
        drag: !1,
        /**
         * @description Whether to enable hover
         * @type {Boolean}
         * @default hover = false
         */
        hover: !1,
        /**
         * @description Graph rendering index
         *  Give priority to index high graph in rendering
         * @type {Number}
         * @example index = 1
         */
        index: 1,
        /**
         * @description Animation delay time(ms)
         * @type {Number}
         * @default animationDelay = 0
         */
        animationDelay: 0,
        /**
         * @description Number of animation frames
         * @type {Number}
         * @default animationFrame = 30
         */
        animationFrame: 30,
        /**
         * @description Animation dynamic curve (Supported by transition)
         * @type {String}
         * @default animationCurve = 'linear'
         * @link https://github.com/jiaming743/Transition
         */
        animationCurve: "linear",
        /**
         * @description Weather to pause graph animation
         * @type {Boolean}
         * @default animationPause = false
         */
        animationPause: !1,
        /**
         * @description Rectangular hover detection zone
         *  Use this method for hover detection first
         * @type {Null|Array}
         * @default hoverRect = null
         * @example hoverRect = [0, 0, 100, 100] // [Rect start x, y, Rect width, height]
         */
        hoverRect: null,
        /**
         * @description Mouse enter event handler
         * @type {Function|Null}
         * @default mouseEnter = null
         */
        mouseEnter: null,
        /**
         * @description Mouse outer event handler
         * @type {Function|Null}
         * @default mouseOuter = null
         */
        mouseOuter: null,
        /**
         * @description Mouse click event handler
         * @type {Function|Null}
         * @default click = null
         */
        click: null
      }, W = {
        status: "static",
        animationRoot: [],
        animationKeys: [],
        animationFrameState: [],
        cache: {}
      };
      d.shape || (d.shape = {}), d.style || (d.style = {});
      var q = Object.assign({}, L.shape, d.shape);
      Object.assign(B, d, W), Object.assign(this, L, B), this.shape = q, this.style = new _.default(d.style), this.addedProcessor();
    };
    e.default = E, E.prototype.addedProcessor = function() {
      typeof this.setGraphCenter == "function" && this.setGraphCenter(null, this), typeof this.added == "function" && this.added(this);
    }, E.prototype.drawProcessor = function(T, L) {
      var d = T.ctx;
      L.style.initStyle(d), typeof this.beforeDraw == "function" && this.beforeDraw(this, T), L.draw(T, L), typeof this.drawed == "function" && this.drawed(this, T), L.style.restoreTransform(d);
    }, E.prototype.hoverCheckProcessor = function(T, L) {
      var d = L.hoverRect, B = L.style, W = L.hoverCheck, q = B.graphCenter, G = B.rotate, m = B.scale, y = B.translate;
      return q && (G && (T = (0, z.getRotatePointPos)(-G, T, q)), m && (T = (0, z.getScalePointPos)(m.map(function(f) {
        return 1 / f;
      }), T, q)), y && (T = (0, z.getTranslatePointPos)(y.map(function(f) {
        return f * -1;
      }), T))), d ? z.checkPointIsInRect.apply(void 0, [T].concat((0, l.default)(d))) : W(T, this);
    }, E.prototype.moveProcessor = function(T) {
      this.move(T, this), typeof this.beforeMove == "function" && this.beforeMove(T, this), typeof this.setGraphCenter == "function" && this.setGraphCenter(T, this), typeof this.moved == "function" && this.moved(T, this);
    }, E.prototype.attr = function(T) {
      var L = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : void 0;
      if (!T || L === void 0) return !1;
      var d = (0, n.default)(this[T]) === "object";
      d && (L = (0, z.deepClone)(L, !0));
      var B = this.render;
      T === "style" ? this.style.update(L) : d ? Object.assign(this[T], L) : this[T] = L, T === "index" && B.sortGraphsByIndex(), B.drawAllGraph();
    }, E.prototype.animation = /* @__PURE__ */ function() {
      var T = (0, t.default)(
        /* @__PURE__ */ a.default.mark(function L(d, B) {
          var W, q, G, m, y, f, D, k, C, $ = arguments;
          return a.default.wrap(function(M) {
            for (; ; )
              switch (M.prev = M.next) {
                case 0:
                  if (W = $.length > 2 && $[2] !== void 0 ? $[2] : !1, !(d !== "shape" && d !== "style")) {
                    M.next = 4;
                    break;
                  }
                  return console.error("Only supported shape and style animation!"), M.abrupt("return");
                case 4:
                  if (B = (0, z.deepClone)(B, !0), d === "style" && this.style.colorProcessor(B), q = this[d], G = Object.keys(B), m = {}, G.forEach(function(A) {
                    return m[A] = q[A];
                  }), y = this.animationFrame, f = this.animationCurve, D = this.animationDelay, k = (0, x.default)(f, m, B, y, !0), this.animationRoot.push(q), this.animationKeys.push(G), this.animationFrameState.push(k), !W) {
                    M.next = 17;
                    break;
                  }
                  return M.abrupt("return");
                case 17:
                  if (!(D > 0)) {
                    M.next = 20;
                    break;
                  }
                  return M.next = 20, U(D);
                case 20:
                  return C = this.render, M.abrupt("return", new Promise(
                    /* @__PURE__ */ function() {
                      var A = (0, t.default)(
                        /* @__PURE__ */ a.default.mark(function p(V) {
                          return a.default.wrap(function(ee) {
                            for (; ; )
                              switch (ee.prev = ee.next) {
                                case 0:
                                  return ee.next = 2, C.launchAnimation();
                                case 2:
                                  V();
                                case 3:
                                case "end":
                                  return ee.stop();
                              }
                          }, p);
                        })
                      );
                      return function(p) {
                        return A.apply(this, arguments);
                      };
                    }()
                  ));
                case 22:
                case "end":
                  return M.stop();
              }
          }, L, this);
        })
      );
      return function(L, d) {
        return T.apply(this, arguments);
      };
    }(), E.prototype.turnNextAnimationFrame = function(T) {
      var L = this.animationDelay, d = this.animationRoot, B = this.animationKeys, W = this.animationFrameState, q = this.animationPause;
      q || Date.now() - T < L || (d.forEach(function(G, m) {
        B[m].forEach(function(y) {
          G[y] = W[m][0][y];
        });
      }), W.forEach(function(G, m) {
        G.shift();
        var y = G.length === 0;
        y && (d[m] = null), y && (B[m] = null);
      }), this.animationFrameState = W.filter(function(G) {
        return G.length;
      }), this.animationRoot = d.filter(function(G) {
        return G;
      }), this.animationKeys = B.filter(function(G) {
        return G;
      }));
    }, E.prototype.animationEnd = function() {
      var T = this.animationFrameState, L = this.animationKeys, d = this.animationRoot, B = this.render;
      return d.forEach(function(W, q) {
        var G = L[q], m = T[q].pop();
        G.forEach(function(y) {
          return W[y] = m[y];
        });
      }), this.animationFrameState = [], this.animationKeys = [], this.animationRoot = [], B.drawAllGraph();
    }, E.prototype.pauseAnimation = function() {
      this.attr("animationPause", !0);
    }, E.prototype.playAnimation = function() {
      var T = this.render;
      return this.attr("animationPause", !1), new Promise(
        /* @__PURE__ */ function() {
          var L = (0, t.default)(
            /* @__PURE__ */ a.default.mark(function d(B) {
              return a.default.wrap(function(q) {
                for (; ; )
                  switch (q.prev = q.next) {
                    case 0:
                      return q.next = 2, T.launchAnimation();
                    case 2:
                      B();
                    case 3:
                    case "end":
                      return q.stop();
                  }
              }, d);
            })
          );
          return function(d) {
            return L.apply(this, arguments);
          };
        }()
      );
    }, E.prototype.delProcessor = function(T) {
      var L = this, d = T.graphs, B = d.findIndex(function(W) {
        return W === L;
      });
      B !== -1 && (typeof this.beforeDelete == "function" && this.beforeDelete(this), d.splice(B, 1, null), typeof this.deleted == "function" && this.deleted(this));
    };
    function U(T) {
      return new Promise(function(L) {
        setTimeout(L, T);
      });
    }
  }(hr)), hr;
}
var qn;
function Ao() {
  return qn || (qn = 1, function(e) {
    var r = we;
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.default = void 0;
    var a = r(Ve()), t = r(Te()), n = r(mt()), l = r(yt), o = r(cn()), _ = Fe(), x = r(fn()), z = r(ko());
    function E(G, m) {
      var y = Object.keys(G);
      if (Object.getOwnPropertySymbols) {
        var f = Object.getOwnPropertySymbols(G);
        m && (f = f.filter(function(D) {
          return Object.getOwnPropertyDescriptor(G, D).enumerable;
        })), y.push.apply(y, f);
      }
      return y;
    }
    function U(G) {
      for (var m = 1; m < arguments.length; m++) {
        var y = arguments[m] != null ? arguments[m] : {};
        m % 2 ? E(y, !0).forEach(function(f) {
          (0, a.default)(G, f, y[f]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(G, Object.getOwnPropertyDescriptors(y)) : E(y).forEach(function(f) {
          Object.defineProperty(G, f, Object.getOwnPropertyDescriptor(y, f));
        });
      }
      return G;
    }
    var T = function G(m) {
      if ((0, n.default)(this, G), !m) {
        console.error("CRender Missing parameters!");
        return;
      }
      var y = m.getContext("2d"), f = m.clientWidth, D = m.clientHeight, k = [f, D];
      m.setAttribute("width", f), m.setAttribute("height", D), this.ctx = y, this.area = k, this.animationStatus = !1, this.graphs = [], this.color = l.default, this.bezierCurve = o.default, m.addEventListener("mousedown", B.bind(this)), m.addEventListener("mousemove", W.bind(this)), m.addEventListener("mouseup", q.bind(this));
    };
    e.default = T, T.prototype.clearArea = function() {
      var G, m = this.area;
      (G = this.ctx).clearRect.apply(G, [0, 0].concat((0, t.default)(m)));
    }, T.prototype.add = function() {
      var G = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, m = G.name;
      if (!m) {
        console.error("add Missing parameters!");
        return;
      }
      var y = x.default.get(m);
      if (!y) {
        console.warn("No corresponding graph configuration found!");
        return;
      }
      var f = new z.default(y, G);
      if (f.validator(f))
        return f.render = this, this.graphs.push(f), this.sortGraphsByIndex(), this.drawAllGraph(), f;
    }, T.prototype.sortGraphsByIndex = function() {
      var G = this.graphs;
      G.sort(function(m, y) {
        if (m.index > y.index) return 1;
        if (m.index === y.index) return 0;
        if (m.index < y.index) return -1;
      });
    }, T.prototype.delGraph = function(G) {
      typeof G.delProcessor == "function" && (G.delProcessor(this), this.graphs = this.graphs.filter(function(m) {
        return m;
      }), this.drawAllGraph());
    }, T.prototype.delAllGraph = function() {
      var G = this;
      this.graphs.forEach(function(m) {
        return m.delProcessor(G);
      }), this.graphs = this.graphs.filter(function(m) {
        return m;
      }), this.drawAllGraph();
    }, T.prototype.drawAllGraph = function() {
      var G = this;
      this.clearArea(), this.graphs.filter(function(m) {
        return m && m.visible;
      }).forEach(function(m) {
        return m.drawProcessor(G, m);
      });
    }, T.prototype.launchAnimation = function() {
      var G = this, m = this.animationStatus;
      if (!m)
        return this.animationStatus = !0, new Promise(function(y) {
          L.call(G, function() {
            G.animationStatus = !1, y();
          }, Date.now());
        });
    };
    function L(G, m) {
      var y = this.graphs;
      if (!d(y)) {
        G();
        return;
      }
      y.forEach(function(f) {
        return f.turnNextAnimationFrame(m);
      }), this.drawAllGraph(), requestAnimationFrame(L.bind(this, G, m));
    }
    function d(G) {
      return G.find(function(m) {
        return !m.animationPause && m.animationFrameState.length;
      });
    }
    function B(G) {
      var m = this.graphs, y = m.find(function(f) {
        return f.status === "hover";
      });
      y && (y.status = "active");
    }
    function W(G) {
      var m = G.offsetX, y = G.offsetY, f = [m, y], D = this.graphs, k = D.find(function(p) {
        return p.status === "active" || p.status === "drag";
      });
      if (k) {
        if (!k.drag) return;
        if (typeof k.move != "function") {
          console.error("No move method is provided, cannot be dragged!");
          return;
        }
        k.moveProcessor(G), k.status = "drag";
        return;
      }
      var C = D.find(function(p) {
        return p.status === "hover";
      }), $ = D.filter(function(p) {
        return p.hover && (typeof p.hoverCheck == "function" || p.hoverRect);
      }), c = $.find(function(p) {
        return p.hoverCheckProcessor(f, p);
      });
      c ? document.body.style.cursor = c.style.hoverCursor : document.body.style.cursor = "default";
      var M = !1, A = !1;
      if (C && (M = typeof C.mouseOuter == "function"), c && (A = typeof c.mouseEnter == "function"), !(!c && !C)) {
        if (!c && C) {
          M && C.mouseOuter(G, C), C.status = "static";
          return;
        }
        if (!(c && c === C)) {
          if (c && !C) {
            A && c.mouseEnter(G, c), c.status = "hover";
            return;
          }
          c && C && c !== C && (M && C.mouseOuter(G, C), C.status = "static", A && c.mouseEnter(G, c), c.status = "hover");
        }
      }
    }
    function q(G) {
      var m = this.graphs, y = m.find(function(D) {
        return D.status === "active";
      }), f = m.find(function(D) {
        return D.status === "drag";
      });
      y && typeof y.click == "function" && y.click(G, y), m.forEach(function(D) {
        return D && (D.status = "static");
      }), y && (y.status = "hover"), f && (f.status = "hover");
    }
    T.prototype.clone = function(G) {
      var m = G.style.getStyle(), y = U({}, G, {
        style: m
      });
      return delete y.render, y = (0, _.deepClone)(y, !0), this.add(y);
    };
  }(Ht)), Ht;
}
(function(e) {
  var r = we;
  Object.defineProperty(e, "__esModule", {
    value: !0
  }), Object.defineProperty(e, "CRender", {
    enumerable: !0,
    get: function() {
      return a.default;
    }
  }), Object.defineProperty(e, "extendNewGraph", {
    enumerable: !0,
    get: function() {
      return t.extendNewGraph;
    }
  }), e.default = void 0;
  var a = r(Ao()), t = fn(), n = a.default;
  e.default = n;
})(jt);
const Ga = /* @__PURE__ */ Aa(jt), Lo = { class: "dv-water-pond-level" }, So = { key: 0 }, Oo = ["id"], Go = ["offset", "stop-color"], Mo = ["stroke", "fill", "x", "y"], Ro = ["cx", "cy", "rx", "ry", "stroke"], Do = ["rx", "ry", "width", "height", "stroke"], To = {
  __name: "index",
  props: {
    config: Object,
    default: () => ({})
  },
  setup(e) {
    const r = e, a = He(), t = me(null), n = Pe({
      gradientId: `water-level-pond-${a}`,
      defaultConfig: {
        /**
         * @description Data
         * @type {Array<number>}
         * @default data = []
         * @example data = [60, 40]
         */
        data: [],
        /**
         * @description Shape of wanter level pond
         * @type {string}
         * @default shape = 'rect'
         * @example shape = 'rect' | 'roundRect' | 'round'
         */
        shape: "rect",
        /**
         * @description Water wave number
         * @type {number}
         * @default waveNum = 3
         */
        waveNum: 3,
        /**
         * @description Water wave height (px)
         * @type {number}
         * @default waveHeight = 40
         */
        waveHeight: 40,
        /**
         * @description Wave opacity
         * @type {number}
         * @default waveOpacity = 0.4
         */
        waveOpacity: 0.4,
        /**
         * @description Colors (hex|rgb|rgba|color keywords)
         * @type {Array<string>}
         * @default colors = ['#00BAFF', '#3DE7C9']
         * @example colors = ['#000', 'rgb(0, 0, 0)', 'rgba(0, 0, 0, 1)', 'red']
         */
        colors: ["#3DE7C9", "#00BAFF"],
        /**
         * @description Formatter
         * @type {string}
         * @default formatter = '{value}%'
         */
        formatter: "{value}%"
      },
      mergedConfig: {},
      renderer: null,
      svgBorderGradient: [],
      details: "",
      waves: [],
      animation: !1
    }), l = be(() => {
      const { shape: m } = n.mergedConfig;
      return m === "round" ? "50%" : m === "rect" ? "0" : m === "roundRect" ? "10px" : "0";
    }), o = be(() => {
      const { shape: m } = n.mergedConfig;
      return m || "rect";
    });
    ke(() => r.config, () => {
      n.renderer.delAllGraph(), n.waves = [], setTimeout(z, 0);
    }, {
      deep: !0
    }), Re(() => {
      _();
    }), Va(() => {
      n.renderer.delAllGraph(), n.waves = [];
    });
    function _() {
      x(), r.config && z();
    }
    function x() {
      n.renderer = new Ga(t.value);
    }
    function z() {
      E(), U(), T(), L(), G();
    }
    function E() {
      n.mergedConfig = Ce(_e(n.defaultConfig), r.config);
    }
    function U() {
      const { colors: m } = n.mergedConfig, f = 100 / (m.length - 1);
      n.svgBorderGradient = m.map((D, k) => [f * k, D]);
    }
    function T() {
      const { data: m, formatter: y } = n.mergedConfig;
      if (!m.length) {
        n.details = "";
        return;
      }
      const f = Math.max(...m);
      n.details = y.replace("{value}", f);
    }
    function L() {
      const m = d(), y = W();
      n.waves = m.map((f) => n.renderer.add({
        name: "smoothline",
        animationFrame: 300,
        shape: f,
        style: y,
        drawed: q
      }));
    }
    function d() {
      const { waveNum: m, waveHeight: y, data: f } = n.mergedConfig, [D, k] = n.renderer.area, C = m * 4 + 4, $ = D / m / 2;
      return f.map((c) => {
        let M = Array.from({ length: C }).fill(0).map((A, p) => {
          const V = D - $ * p, X = (1 - c / 100) * k, ee = p % 2 === 0 ? X : X - y;
          return [V, ee];
        });
        return M = M.map((A) => B(A, [$ * 2, 0])), { points: M };
      });
    }
    function B([m, y], [f, D]) {
      return [m + f, y + D];
    }
    function W() {
      const m = n.renderer.area[1];
      return {
        gradientColor: n.mergedConfig.colors,
        gradientType: "linear",
        gradientParams: [0, 0, 0, m],
        gradientWith: "fill",
        opacity: n.mergedConfig.waveOpacity,
        translate: [0, 0]
      };
    }
    function q({ shape: { points: m } }, { ctx: y, area: f }) {
      const D = m[0], k = m.slice(-1)[0], C = f[1];
      y.lineTo(k[0], C), y.lineTo(D[0], C), y.closePath(), y.fill();
    }
    async function G(m = 1) {
      if (n.animation)
        return;
      n.animation = !0;
      const y = n.renderer.area[0];
      n.waves.forEach((f) => {
        f.attr("style", { translate: [0, 0] }), f.animation("style", {
          translate: [y, 0]
        }, !0);
      }), await n.renderer.launchAnimation(), n.animation = !1, n.renderer.graphs.length && G(m + 1);
    }
    return (m, y) => (le(), se("div", Lo, [
      i(n).renderer ? (le(), se("svg", So, [
        ae("defs", null, [
          ae("linearGradient", {
            id: i(n).gradientId,
            x1: "0%",
            y1: "0%",
            x2: "0%",
            y2: "100%"
          }, [
            (le(!0), se(Ae, null, Se(i(n).svgBorderGradient, (f) => (le(), se("stop", {
              key: f[0],
              offset: f[0],
              "stop-color": f[1]
            }, null, 8, Go))), 128))
          ], 8, Oo)
        ]),
        i(n).renderer ? (le(), se("text", {
          key: 0,
          stroke: `url(#${i(n).gradientId})`,
          fill: `url(#${i(n).gradientId})`,
          x: i(n).renderer.area[0] / 2 + 8,
          y: i(n).renderer.area[1] / 2 + 8
        }, We(i(n).details), 9, Mo)) : $e("", !0),
        !i(o) || i(o) === "round" ? (le(), se("ellipse", {
          key: 1,
          cx: i(n).renderer.area[0] / 2 + 8,
          cy: i(n).renderer.area[1] / 2 + 8,
          rx: i(n).renderer.area[0] / 2 + 5,
          ry: i(n).renderer.area[1] / 2 + 5,
          stroke: `url(#${i(n).gradientId})`
        }, null, 8, Ro)) : (le(), se("rect", {
          key: 2,
          x: "2",
          y: "2",
          rx: i(o) === "roundRect" ? 10 : 0,
          ry: i(o) === "roundRect" ? 10 : 0,
          width: i(n).renderer.area[0] + 12,
          height: i(n).renderer.area[1] + 12,
          stroke: `url(#${i(n).gradientId})`
        }, null, 8, Do))
      ])) : $e("", !0),
      ae("canvas", {
        ref_key: "waterPondLevel",
        ref: t,
        style: Ge(`border-radius: ${i(l)};`)
      }, null, 4)
    ]));
  }
}, xr = {
  install(e) {
    e.component("DvWaterLevelPond", To);
  }
}, Fo = {}, Bo = { class: "dv-loading" }, No = { class: "loading-tip" };
function Wo(e, r) {
  return le(), se("div", Bo, [
    r[0] || (r[0] = Tt('<svg width="50px" height="50px"><circle cx="25" cy="25" r="20" fill="transparent" stroke-width="3" stroke-dasharray="31.415, 31.415" stroke="#02bcfe" stroke-linecap="round"><animateTransform attributeName="transform" type="rotate" values="0, 25 25;360, 25 25" dur="1.5s" repeatCount="indefinite"></animateTransform><animate attributeName="stroke" values="#02bcfe;#3be6cb;#02bcfe" dur="3s" repeatCount="indefinite"></animate></circle><circle cx="25" cy="25" r="10" fill="transparent" stroke-width="3" stroke-dasharray="15.7, 15.7" stroke="#3be6cb" stroke-linecap="round"><animateTransform attributeName="transform" type="rotate" values="360, 25 25;0, 25 25" dur="1.5s" repeatCount="indefinite"></animateTransform><animate attributeName="stroke" values="#3be6cb;#02bcfe;#3be6cb" dur="3s" repeatCount="indefinite"></animate></circle></svg>', 1)),
    ae("div", No, [
      Me(e.$slots, "default")
    ])
  ]);
}
const jo = /* @__PURE__ */ Ke(Fo, [["render", Wo]]), Cr = {
  install(e) {
    e.component("DvLoading", jo);
  }
}, Eo = ["width", "height"], zo = ["id"], qo = ["id"], Io = ["id", "cx", "cy"], Ho = ["values", "dur"], Vo = ["dur"], Uo = ["id"], Xo = ["xlink:href", "fill"], Qo = ["xlink:href", "fill", "mask"], Yo = ["xlink:href", "width", "height", "x", "y"], Ko = ["fill", "x", "y"], Jo = ["id", "d"], Zo = ["xlink:href", "stroke-width", "stroke"], el = ["id"], tl = ["r", "fill"], rl = ["dur", "path"], nl = ["xlink:href", "stroke-width", "stroke", "mask"], al = ["from", "to", "dur"], il = {
  __name: "index",
  props: {
    config: {
      type: Object,
      default: () => ({})
    },
    dev: {
      type: Boolean,
      default: !1
    }
  },
  setup(e) {
    const r = e, a = He(), t = me(null), { width: n, height: l } = xe(t, z, x), o = Pe({
      unique: Math.random(),
      flylineGradientId: `flyline-gradient-id-${a}`,
      haloGradientId: `halo-gradient-id-${a}`,
      /**
       * @description Type Declaration
       *
       * interface Halo {
       *    show?: boolean
       *    duration?: [number, number]
       *    color?: string
       *    radius?: number
       * }
       *
       * interface Text {
       *    show?: boolean
       *    offset?: [number, number]
       *    color?: string
       *    fontSize?: number
       * }
       *
       * interface Icon {
       *    show?: boolean
       *    src?: string
       *    width?: number
       *    height?: number
       * }
       *
       * interface Point {
       *    name: string
       *    coordinate: [number, number]
       *    halo?: Halo
       *    text?: Text
       *    icon?: Icon
       * }
       *
       * interface Line {
       *    width?: number
       *    color?: string
       *    orbitColor?: string
       *    duration?: [number, number]
       *    radius?: string
       * }
       *
       * interface Flyline extends Line {
       *    source: string
       *    target: string
       * }
       *
       * interface FlylineWithPath extends Flyline {
       *    d: string
       *    path: [[number, number], [number, number], [number, number]]
       *    key: string
       * }
       */
      defaultConfig: {
        /**
         * @description Flyline chart points
         * @type {FlylineChartPoint[]}
         * @default points = []
         */
        points: [],
        /**
         * @description Lines
         * @type {Flyline[]}
         * @default lines = []
         */
        lines: [],
        /**
         * @description Global halo configuration
         * @type {Halo}
         */
        halo: {
          /**
           * @description Whether to show halo
           * @type {boolean}
           * @default show = false
           */
          show: !1,
          /**
           * @description Halo animation duration (1s = 10)
           * @type {[number, number]}
           */
          duration: [20, 30],
          /**
           * @description Halo color
           * @type {string}
           * @default color = '#fb7293'
           */
          color: "#fb7293",
          /**
           * @description Halo radius
           * @type {number}
           * @default radius = 120
           */
          radius: 120
        },
        /**
         * @description Global text configuration
         * @type {Text}
         */
        text: {
          /**
           * @description Whether to show text
           * @type {boolean}
           * @default show = false
           */
          show: !1,
          /**
           * @description Text offset
           * @type {[number, number]}
           * @default offset = [0, 15]
           */
          offset: [0, 15],
          /**
           * @description Text color
           * @type {string}
           * @default color = '#ffdb5c'
           */
          color: "#ffdb5c",
          /**
           * @description Text font size
           * @type {number}
           * @default fontSize = 12
           */
          fontSize: 12
        },
        /**
         * @description Global icon configuration
         * @type {Icon}
         */
        icon: {
          /**
           * @description Whether to show icon
           * @type {boolean}
           * @default show = false
           */
          show: !1,
          /**
           * @description Icon src
           * @type {string}
           * @default src = ''
           */
          src: "",
          /**
           * @description Icon width
           * @type {number}
           * @default width = 15
           */
          width: 15,
          /**
           * @description Icon height
           * @type {number}
           * @default width = 15
           */
          height: 15
        },
        /**
         * @description Global line configuration
         * @type {Line}
         */
        line: {
          /**
           * @description Line width
           * @type {number}
           * @default width = 1
           */
          width: 1,
          /**
           * @description Flyline color
           * @type {string}
           * @default color = '#ffde93'
           */
          color: "#ffde93",
          /**
           * @description Orbit color
           * @type {string}
           * @default orbitColor = 'rgba(103, 224, 227, .2)'
           */
          orbitColor: "rgba(103, 224, 227, .2)",
          /**
           * @description Flyline animation duration
           * @type {[number, number]}
           * @default duration = [20, 30]
           */
          duration: [20, 30],
          /**
           * @description Flyline radius
           * @type {number}
           * @default radius = 100
           */
          radius: 100
        },
        /**
         * @description Back ground image url
         * @type {string}
         * @default bgImgSrc = ''
         */
        bgImgSrc: "",
        /**
         * @description K value
         * @type {number}
         * @default k = -0.5
         * @example k = -1 ~ 1
         */
        k: -0.5,
        /**
         * @description Flyline curvature
         * @type {number}
         * @default curvature = 5
         */
        curvature: 5,
        /**
         * @description Relative points position
         * @type {boolean}
         * @default relative = true
         */
        relative: !0
      },
      /**
       * @description Fly line data
       * @type {FlylineWithPath[]}
       * @default flylines = []
       */
      flylines: [],
      /**
       * @description Fly line lengths
       * @type {number[]}
       * @default flylineLengths = []
       */
      flylineLengths: [],
      /**
       * @description Fly line points
       * @default flylinePoints = []
       */
      flylinePoints: [],
      mergedConfig: null
    });
    let _;
    Re(() => {
      _ = Ca();
    }), ke(() => r.config, () => {
      E();
    }, {
      deep: !0
    });
    function x() {
      E();
    }
    function z() {
      E();
    }
    async function E() {
      U(), T(), L(), await q();
    }
    function U() {
      const m = Ce(_e(o.defaultConfig), r.config || {}), { points: y, lines: f, halo: D, text: k, icon: C, line: $ } = m;
      m.points = y.map((c) => (c.halo = Ce(_e(D), c.halo || {}), c.text = Ce(_e(k), c.text || {}), c.icon = Ce(_e(C), c.icon || {}), c)), m.lines = f.map((c) => Ce(_e($), c)), o.mergedConfig = m;
    }
    function T() {
      const { relative: m, points: y } = o.mergedConfig;
      o.flylinePoints = y.map((f, D) => {
        const { coordinate: [k, C], halo: $, icon: c, text: M } = f;
        m && (f.coordinate = [k * n.value, C * l.value]), f.halo.time = ht(...$.duration) / 10;
        const { width: A, height: p } = c;
        f.icon.x = f.coordinate[0] - A / 2, f.icon.y = f.coordinate[1] - p / 2;
        const [V, X] = M.offset;
        return f.text.x = f.coordinate[0] + V, f.text.y = f.coordinate[1] + X, f.key = `${f.coordinate.toString()}${D}`, f;
      });
    }
    function L() {
      const { points: m, lines: y } = o.mergedConfig;
      o.flylines = y.map((f) => {
        const { source: D, target: k, duration: C } = f, $ = m.find(({ name: X }) => X === D).coordinate, c = m.find(({ name: X }) => X === k).coordinate, M = d($, c).map((X) => X.map((ee) => Number.parseFloat(ee.toFixed(10)))), A = `M${M[0].toString()} Q${M[1].toString()} ${M[2].toString()}`, p = `path${M.toString()}`, V = ht(...C) / 10;
        return { ...f, path: M, key: p, d: A, time: V };
      });
    }
    function d(m, y) {
      const f = B(m, y);
      return [m, f, y];
    }
    function B([m, y], [f, D]) {
      const { curvature: k, k: C } = o.mergedConfig, [$, c] = [(m + f) / 2, (y + D) / 2], A = Dt([m, y], [f, D]) / k, p = A / 2;
      let [V, X] = [$, c];
      do
        V += p, X = W(C, [$, c], V)[1];
      while (Dt([$, c], [V, X]) < A);
      return [V, X];
    }
    function W(m, [y, f], D) {
      const k = f - m * y + m * D;
      return [D, k];
    }
    async function q() {
      await Bt(), o.flylineLengths = o.flylines.map(({ key: m }) => _.proxy.$refs[m][0].getTotalLength());
    }
    function G({ offsetX: m, offsetY: y }) {
      if (!r.dev)
        return;
      const f = (m / n.value).toFixed(2), D = (y / l.value).toFixed(2);
      console.warn(`dv-flyline-chart-enhanced DEV: 
 Click Position is [${m}, ${y}] 
 Relative Position is [${f}, ${D}]`);
    }
    return (m, y) => (le(), se("div", {
      ref_key: "flylineChartEnhanced",
      ref: t,
      class: "dv-flyline-chart-enhanced",
      style: Ge(`background-image: url(${i(o).mergedConfig ? i(o).mergedConfig.bgImgSrc : ""})`),
      onClick: G
    }, [
      i(o).flylines.length ? (le(), se("svg", {
        key: 0,
        width: i(n),
        height: i(l)
      }, [
        ae("defs", null, [
          ae("radialGradient", {
            id: i(o).flylineGradientId,
            cx: "50%",
            cy: "50%",
            r: "50%"
          }, y[0] || (y[0] = [
            ae("stop", {
              offset: "0%",
              "stop-color": "#fff",
              "stop-opacity": "1"
            }, null, -1),
            ae("stop", {
              offset: "100%",
              "stop-color": "#fff",
              "stop-opacity": "0"
            }, null, -1)
          ]), 8, zo),
          ae("radialGradient", {
            id: i(o).haloGradientId,
            cx: "50%",
            cy: "50%",
            r: "50%"
          }, y[1] || (y[1] = [
            ae("stop", {
              offset: "0%",
              "stop-color": "#fff",
              "stop-opacity": "0"
            }, null, -1),
            ae("stop", {
              offset: "100%",
              "stop-color": "#fff",
              "stop-opacity": "1"
            }, null, -1)
          ]), 8, qo)
        ]),
        (le(!0), se(Ae, null, Se(i(o).flylinePoints, (f) => (le(), se("g", {
          key: f.key + Math.random()
        }, [
          ae("defs", null, [
            f.halo.show ? (le(), se("circle", {
              key: 0,
              id: `halo${i(o).unique}${f.key}`,
              cx: f.coordinate[0],
              cy: f.coordinate[1]
            }, [
              ae("animate", {
                attributeName: "r",
                values: `1;${f.halo.radius}`,
                dur: `${f.halo.time}s`,
                repeatCount: "indefinite"
              }, null, 8, Ho),
              ae("animate", {
                attributeName: "opacity",
                values: "1;0",
                dur: `${f.halo.time}s`,
                repeatCount: "indefinite"
              }, null, 8, Vo)
            ], 8, Io)) : $e("", !0)
          ]),
          ae("mask", {
            id: `mask${i(o).unique}${f.key}`
          }, [
            f.halo.show ? (le(), se("use", {
              key: 0,
              "xlink:href": `#halo${i(o).unique}${f.key}`,
              fill: `url(#${i(o).haloGradientId})`
            }, null, 8, Xo)) : $e("", !0)
          ], 8, Uo),
          f.halo.show ? (le(), se("use", {
            key: 0,
            "xlink:href": `#halo${i(o).unique}${f.key}`,
            fill: f.halo.color,
            mask: `url(#mask${i(o).unique}${f.key})`
          }, null, 8, Qo)) : $e("", !0),
          f.icon.show ? (le(), se("image", {
            key: 1,
            "xlink:href": f.icon.src,
            width: f.icon.width,
            height: f.icon.height,
            x: f.icon.x,
            y: f.icon.y
          }, null, 8, Yo)) : $e("", !0),
          f.text.show ? (le(), se("text", {
            key: 2,
            style: Ge(`fontSize:${f.text.fontSize}px;color:${f.text.color}`),
            fill: f.text.color,
            x: f.text.x,
            y: f.text.y
          }, We(f.name), 13, Ko)) : $e("", !0)
        ]))), 128)),
        (le(!0), se(Ae, null, Se(i(o).flylines, (f, D) => (le(), se("g", {
          key: f.key + Math.random()
        }, [
          ae("defs", null, [
            ae("path", {
              id: f.key,
              ref_for: !0,
              ref: f.key,
              d: f.d,
              fill: "transparent"
            }, null, 8, Jo)
          ]),
          ae("use", {
            "xlink:href": `#${f.key}`,
            "stroke-width": f.width,
            stroke: f.orbitColor
          }, null, 8, Zo),
          ae("mask", {
            id: `mask${i(o).unique}${f.key}`
          }, [
            ae("circle", {
              cx: "0",
              cy: "0",
              r: f.radius,
              fill: `url(#${i(o).flylineGradientId})`
            }, [
              ae("animateMotion", {
                dur: f.time,
                path: f.d,
                rotate: "auto",
                repeatCount: "indefinite"
              }, null, 8, rl)
            ], 8, tl)
          ], 8, el),
          i(o).flylineLengths[D] ? (le(), se("use", {
            key: 0,
            "xlink:href": `#${f.key}`,
            "stroke-width": f.width,
            stroke: f.color,
            mask: `url(#mask${i(o).unique}${f.key})`
          }, [
            ae("animate", {
              attributeName: "stroke-dasharray",
              from: `0, ${i(o).flylineLengths[D]}`,
              to: `${i(o).flylineLengths[D]}, 0`,
              dur: f.time,
              repeatCount: "indefinite"
            }, null, 8, al)
          ], 8, nl)) : $e("", !0)
        ]))), 128))
      ], 8, Eo)) : $e("", !0)
    ], 4));
  }
}, $r = {
  install(e) {
    e.component("DvFlylineChartEnhanced", il);
  }
}, ol = ["width", "height"], ll = ["id"], sl = ["id"], ul = ["id", "cx", "cy"], cl = ["values", "dur"], fl = ["dur"], dl = ["xlink:href", "width", "height", "x", "y"], hl = ["id"], vl = ["xlink:href", "fill"], pl = ["xlink:href", "fill", "mask"], gl = ["id", "d"], ml = ["xlink:href", "stroke-width", "stroke"], yl = ["xlink:href", "stroke-width", "stroke", "mask"], bl = ["from", "to", "dur"], xl = ["id"], Cl = ["r", "fill"], $l = ["dur", "path"], _l = ["xlink:href", "width", "height", "x", "y"], Pl = ["fill", "x", "y"], wl = {
  __name: "index",
  props: {
    config: {
      type: Object,
      default: () => ({})
    },
    dev: {
      type: Boolean,
      default: !1
    }
  },
  setup(e) {
    const r = e, a = He(), t = me(null), { width: n, height: l } = xe(t, z, x), o = Pe({
      unique: Math.random(),
      maskId: `flyline-mask-id-${a}`,
      maskCircleId: `mask-circle-id-${a}`,
      gradientId: `gradient-id-${a}`,
      gradient2Id: `gradient2-id-${a}`,
      defaultConfig: {
        /**
         * @description Flyline chart center point
         * @type {Array<number>}
         * @default centerPoint = [0, 0]
         */
        centerPoint: [0, 0],
        /**
         * @description Flyline start points
         * @type {Array<Array<number>>}
         * @default points = []
         * @example points = [[10, 10], [100, 100]]
         */
        points: [],
        /**
         * @description Flyline width
         * @type {number}
         * @default lineWidth = 1
         */
        lineWidth: 1,
        /**
         * @description Orbit color
         * @type {string}
         * @default orbitColor = 'rgba(103, 224, 227, .2)'
         */
        orbitColor: "rgba(103, 224, 227, .2)",
        /**
         * @description Flyline color
         * @type {string}
         * @default orbitColor = '#ffde93'
         */
        flylineColor: "#ffde93",
        /**
         * @description K value
         * @type {number}
         * @default k = -0.5
         * @example k = -1 ~ 1
         */
        k: -0.5,
        /**
         * @description Flyline curvature
         * @type {number}
         * @default curvature = 5
         */
        curvature: 5,
        /**
         * @description Flyline radius
         * @type {number}
         * @default flylineRadius = 100
         */
        flylineRadius: 100,
        /**
         * @description Flyline animation duration
         * @type {Array<number>}
         * @default duration = [20, 30]
         */
        duration: [20, 30],
        /**
         * @description Relative points position
         * @type {boolean}
         * @default relative = true
         */
        relative: !0,
        /**
         * @description Back ground image url
         * @type {string}
         * @default bgImgUrl = ''
         * @example bgImgUrl = './img/bg.jpg'
         */
        bgImgUrl: "",
        /**
         * @description Text configuration
         * @type {object}
         */
        text: {
          /**
           * @description Text offset
           * @type {Array<number>}
           * @default offset = [0, 15]
           */
          offset: [0, 15],
          /**
           * @description Text color
           * @type {string}
           * @default color = '#ffdb5c'
           */
          color: "#ffdb5c",
          /**
           * @description Text font size
           * @type {number}
           * @default fontSize = 12
           */
          fontSize: 12
        },
        /**
         * @description Halo configuration
         * @type {object}
         */
        halo: {
          /**
           * @description Weather to show halo
           * @type {boolean}
           * @default show = true
           * @example show = true | false
           */
          show: !0,
          /**
           * @description Halo animation duration (10 = 1s)
           * @type {number}
           * @default duration = 30
           */
          duration: 30,
          /**
           * @description Halo color
           * @type {string}
           * @default color = '#fb7293'
           */
          color: "#fb7293",
          /**
           * @description Halo max radius
           * @type {number}
           * @default radius = 120
           */
          radius: 120
        },
        /**
         * @description Center point img configuration
         * @type {object}
         */
        centerPointImg: {
          /**
           * @description Center point img width
           * @type {number}
           * @default width = 40
           */
          width: 40,
          /**
           * @description Center point img height
           * @type {number}
           * @default height = 40
           */
          height: 40,
          /**
           * @description Center point img url
           * @type {string}
           * @default url = ''
           */
          url: ""
        },
        /**
         * @description Points img configuration
         * @type {object}
         * @default radius = 120
         */
        pointsImg: {
          /**
           * @description Points img width
           * @type {number}
           * @default width = 15
           */
          width: 15,
          /**
           * @description Points img height
           * @type {number}
           * @default height = 15
           */
          height: 15,
          /**
           * @description Points img url
           * @type {string}
           * @default url = ''
           */
          url: ""
        }
      },
      mergedConfig: null,
      paths: [],
      lengths: [],
      times: [],
      texts: []
    });
    let _;
    Re(() => {
      _ = Ca();
    }), ke(() => r.config, () => {
      E();
    }, {
      deep: !0
    });
    function x() {
      E();
    }
    function z() {
      E();
    }
    async function E() {
      U(), T(), await W(), q(), G();
    }
    function U() {
      const y = Ce(_e(o.defaultConfig), r.config || {}), { points: f } = y;
      y.points = f.map((D) => Array.isArray(D) ? { position: D, text: "" } : D), o.mergedConfig = y;
    }
    function T() {
      let { centerPoint: y, points: f } = o.mergedConfig;
      const { relative: D } = o.mergedConfig;
      f = f.map(({ position: k }) => k), D && (y = [n.value * y[0], l.value * y[1]], f = f.map(([k, C]) => [n.value * k, l.value * C])), o.paths = f.map((k) => L(y, k));
    }
    function L(y, f) {
      const D = d(y, f);
      return [f, D, y];
    }
    function d([y, f], [D, k]) {
      const { curvature: C, k: $ } = o.mergedConfig, [c, M] = [(y + D) / 2, (f + k) / 2], p = Dt([y, f], [D, k]) / C, V = p / 2;
      let [X, ee] = [c, M];
      do
        X += V, ee = B($, [c, M], X)[1];
      while (Dt([c, M], [X, ee]) < p);
      return [X, ee];
    }
    function B(y, [f, D], k) {
      const C = D - y * f + y * k;
      return [k, C];
    }
    async function W() {
      await Bt(), o.lengths = o.paths.map((y, f) => _.proxy.$refs[`path${f}`][0].getTotalLength());
    }
    function q() {
      const { duration: y, points: f } = o.mergedConfig;
      o.times = f.map(() => ht(...y) / 10);
    }
    function G() {
      const { points: y } = o.mergedConfig;
      o.texts = y.map(({ text: f }) => f);
    }
    function m({ offsetX: y, offsetY: f }) {
      if (!r.dev)
        return;
      const D = (y / n.value).toFixed(2), k = (f / l.value).toFixed(2);
      console.warn(`dv-flyline-chart DEV: 
 Click Position is [${y}, ${f}] 
 Relative Position is [${D}, ${k}]`);
    }
    return (y, f) => (le(), se("div", {
      ref_key: "flylineChart",
      ref: t,
      class: "dv-flyline-chart",
      style: Ge(`background-image: url(${i(o).mergedConfig ? i(o).mergedConfig.bgImgUrl : ""})`),
      onClick: m
    }, [
      i(o).mergedConfig ? (le(), se("svg", {
        key: 0,
        width: i(n),
        height: i(l)
      }, [
        ae("defs", null, [
          ae("radialGradient", {
            id: i(o).gradientId,
            cx: "50%",
            cy: "50%",
            r: "50%"
          }, f[0] || (f[0] = [
            ae("stop", {
              offset: "0%",
              "stop-color": "#fff",
              "stop-opacity": "1"
            }, null, -1),
            ae("stop", {
              offset: "100%",
              "stop-color": "#fff",
              "stop-opacity": "0"
            }, null, -1)
          ]), 8, ll),
          ae("radialGradient", {
            id: i(o).gradient2Id,
            cx: "50%",
            cy: "50%",
            r: "50%"
          }, f[1] || (f[1] = [
            ae("stop", {
              offset: "0%",
              "stop-color": "#fff",
              "stop-opacity": "0"
            }, null, -1),
            ae("stop", {
              offset: "100%",
              "stop-color": "#fff",
              "stop-opacity": "1"
            }, null, -1)
          ]), 8, sl),
          i(o).paths[0] ? (le(), se("circle", {
            key: 0,
            id: `circle${i(o).paths[0].toString()}`,
            cx: i(o).paths[0][2][0],
            cy: i(o).paths[0][2][1]
          }, [
            ae("animate", {
              attributeName: "r",
              values: `1;${i(o).mergedConfig.halo.radius}`,
              dur: `${i(o).mergedConfig.halo.duration / 10}s`,
              repeatCount: "indefinite"
            }, null, 8, cl),
            ae("animate", {
              attributeName: "opacity",
              values: "1;0",
              dur: `${i(o).mergedConfig.halo.duration / 10}s`,
              repeatCount: "indefinite"
            }, null, 8, fl)
          ], 8, ul)) : $e("", !0)
        ]),
        i(o).paths[0] ? (le(), se("image", {
          key: 0,
          "xlink:href": i(o).mergedConfig.centerPointImg.url,
          width: i(o).mergedConfig.centerPointImg.width,
          height: i(o).mergedConfig.centerPointImg.height,
          x: i(o).paths[0][2][0] - i(o).mergedConfig.centerPointImg.width / 2,
          y: i(o).paths[0][2][1] - i(o).mergedConfig.centerPointImg.height / 2
        }, null, 8, dl)) : $e("", !0),
        ae("mask", {
          id: `maskhalo${i(o).paths[0].toString()}`
        }, [
          i(o).paths[0] ? (le(), se("use", {
            key: 0,
            "xlink:href": `#circle${i(o).paths[0].toString()}`,
            fill: `url(#${i(o).gradient2Id})`
          }, null, 8, vl)) : $e("", !0)
        ], 8, hl),
        i(o).paths[0] && i(o).mergedConfig.halo.show ? (le(), se("use", {
          key: 1,
          "xlink:href": `#circle${i(o).paths[0].toString()}`,
          fill: i(o).mergedConfig.halo.color,
          mask: `url(#maskhalo${i(o).paths[0].toString()})`
        }, null, 8, pl)) : $e("", !0),
        (le(!0), se(Ae, null, Se(i(o).paths, (D, k) => (le(), se("g", { key: k }, [
          ae("defs", null, [
            ae("path", {
              id: `path${D.toString()}`,
              ref_for: !0,
              ref: `path${k}`,
              d: `M${D[0].toString()} Q${D[1].toString()} ${D[2].toString()}`,
              fill: "transparent"
            }, null, 8, gl)
          ]),
          ae("use", {
            "xlink:href": `#path${D.toString()}`,
            "stroke-width": i(o).mergedConfig.lineWidth,
            stroke: i(o).mergedConfig.orbitColor
          }, null, 8, ml),
          i(o).lengths[k] ? (le(), se("use", {
            key: 0,
            "xlink:href": `#path${D.toString()}`,
            "stroke-width": i(o).mergedConfig.lineWidth,
            stroke: i(o).mergedConfig.flylineColor,
            mask: `url(#mask${i(o).unique}${D.toString()})`
          }, [
            ae("animate", {
              attributeName: "stroke-dasharray",
              from: `0, ${i(o).lengths[k]}`,
              to: `${i(o).lengths[k]}, 0`,
              dur: i(o).times[k] || 0,
              repeatCount: "indefinite"
            }, null, 8, bl)
          ], 8, yl)) : $e("", !0),
          ae("mask", {
            id: `mask${i(o).unique}${D.toString()}`
          }, [
            ae("circle", {
              cx: "0",
              cy: "0",
              r: i(o).mergedConfig.flylineRadius,
              fill: `url(#${i(o).gradientId})`
            }, [
              ae("animateMotion", {
                dur: i(o).times[k] || 0,
                path: `M${D[0].toString()} Q${D[1].toString()} ${D[2].toString()}`,
                rotate: "auto",
                repeatCount: "indefinite"
              }, null, 8, $l)
            ], 8, Cl)
          ], 8, xl),
          ae("image", {
            "xlink:href": i(o).mergedConfig.pointsImg.url,
            width: i(o).mergedConfig.pointsImg.width,
            height: i(o).mergedConfig.pointsImg.height,
            x: D[0][0] - i(o).mergedConfig.pointsImg.width / 2,
            y: D[0][1] - i(o).mergedConfig.pointsImg.height / 2
          }, null, 8, _l),
          ae("text", {
            style: Ge(`fontSize:${i(o).mergedConfig.text.fontSize}px;`),
            fill: i(o).mergedConfig.text.color,
            x: D[0][0] + i(o).mergedConfig.text.offset[0],
            y: D[0][1] + i(o).mergedConfig.text.offset[1]
          }, We(i(o).texts[k]), 13, Pl)
        ]))), 128))
      ], 8, ol)) : $e("", !0)
    ], 4));
  }
}, _r = {
  install(e) {
    e.component("DvFlylineChart", wl);
  }
}, kl = { class: "ranking-info" }, Al = { class: "rank" }, Ll = ["innerHTML"], Sl = { class: "ranking-value" }, Ol = { class: "ranking-column" }, Gl = {
  __name: "index",
  props: {
    config: {
      type: Object,
      default: () => ({})
    }
  },
  setup(e) {
    pt((G) => ({
      fdc8fe50: i(o),
      "442085aa": i(l),
      ca44414a: i(x),
      "31d0b588": i(_)
    }));
    const r = e, a = me(null), { height: t } = xe(a, E, z), n = Pe({
      defaultConfig: {
        /**
         * @description Board data
         * @type {Array<object>}
         * @default data = []
         */
        data: [],
        /**
         * @description Row num
         * @type {number}
         * @default rowNum = 5
         */
        rowNum: 5,
        /**
         * @description Scroll wait time
         * @type {number}
         * @default waitTime = 2000
         */
        waitTime: 2e3,
        /**
         * @description Carousel type
         * @type {string}
         * @default carousel = 'single'
         * @example carousel = 'single' | 'page'
         */
        carousel: "single",
        /**
         * @description Value unit
         * @type {string}
         * @default unit = ''
         * @example unit = 'ton'
         */
        unit: "",
        /**
         * @description Auto sort by value
         * @type {boolean}
         * @default sort = true
         */
        sort: !0,
        /**
         * @description Value formatter
         * @type {Function}
         * @default valueFormatter = null
         */
        valueFormatter: null,
        /**
         * @description Text color
         * @type {string}
         * @default textColor = '#fff'
         */
        textColor: "#fff",
        /**
         * @description Main theme color
         * @type {string}
         * @default color = '#1370fb'
         */
        color: "#1370fb",
        /**
         * @description Font size
         * @type {number}
         * @default fontSize = 13
         */
        fontSize: 13
      },
      mergedConfig: null,
      rowsData: [],
      rows: [],
      heights: [],
      avgHeight: 0,
      animationIndex: 0,
      animationHandler: "",
      updater: 0
    });
    ke(() => r.config, () => {
      q(), U();
    }, {
      deep: !0
    });
    const l = be(() => r.config.textColor ? r.config.textColor : n.defaultConfig.textColor), o = be(() => r.config.color ? r.config.color : n.defaultConfig.color), _ = be(() => De(o.value, 50)), x = be(() => `${r.config.fontSize ? r.config.fontSize : n.defaultConfig.fontSize}px`);
    Ft(() => {
      q();
    });
    function z() {
      U();
    }
    function E() {
      n.mergedConfig && d(!0);
    }
    function U() {
      T(), L(), d(), W(!0);
    }
    function T() {
      n.mergedConfig = Ce(_e(n.defaultConfig), r.config || {});
    }
    function L() {
      let { data: G } = n.mergedConfig;
      const { rowNum: m, sort: y } = n.mergedConfig;
      y && G.sort(({ value: M }, { value: A }) => M > A ? -1 : M < A ? 1 : 0);
      const f = G.map(({ value: M }) => M), D = Math.min(...f) || 0, k = Math.abs(D), $ = (Math.max(...f) || 0) + k;
      G = G.map((M, A) => ({ ...M, ranking: A + 1, percent: (M.value + k) / $ * 100 }));
      const c = G.length;
      c > m && c < 2 * m && (G = [...G, ...G]), G = G.map((M, A) => ({ ...M, scroll: A })), n.rowsData = G, n.rows = G;
    }
    function d(G = !1) {
      const { rowNum: m, data: y } = n.mergedConfig, f = t.value / m;
      n.avgHeight = f, G || (n.heights = Array.from({ length: y.length }).fill(f));
    }
    const B = be(() => n.mergedConfig.carousel === "single");
    async function W(G = !1) {
      const { waitTime: m, rowNum: y } = n.mergedConfig, f = n.rowsData.length;
      if (y >= f)
        return;
      const { updater: D } = n;
      if (G && (await new Promise((c) => setTimeout(c, m)), D !== n.updater))
        return;
      const k = B.value ? 1 : y, C = n.rowsData.slice(n.animationIndex);
      if (C.push(...n.rowsData.slice(0, n.animationIndex)), n.rows = C.slice(0, B.value ? y + 1 : y * 2), n.heights = Array.from({ length: f }).fill(n.avgHeight), await new Promise((c) => setTimeout(c, 300)), D !== n.updater)
        return;
      n.heights.fill(0, 0, k), n.animationIndex += k;
      const $ = n.animationIndex - f;
      $ >= 0 && (n.animationIndex = $), n.animationHandler = setTimeout(W, m - 300);
    }
    function q() {
      n.updater = (n.updater + 1) % 999999, n.animationHandler && clearTimeout(n.animationHandler);
    }
    return (G, m) => (le(), se("div", {
      ref_key: "scrollRankingBoard",
      ref: a,
      class: "dv-scroll-ranking-board"
    }, [
      (le(!0), se(Ae, null, Se(i(n).rows, (y, f) => (le(), se("div", {
        key: y.toString() + y.scroll,
        class: "row-item",
        style: Ge(`height: ${i(n).heights[f]}px;`)
      }, [
        ae("div", kl, [
          ae("div", Al, " No." + We(y.ranking), 1),
          ae("div", {
            class: "info-name",
            innerHTML: y.name
          }, null, 8, Ll),
          ae("div", Sl, We(i(n).mergedConfig.valueFormatter ? i(n).mergedConfig.valueFormatter(y) : y.value + i(n).mergedConfig.unit), 1)
        ]),
        ae("div", Ol, [
          ae("div", {
            class: "inside-column",
            style: Ge(`width: ${y.percent}%;`)
          }, m[0] || (m[0] = [
            ae("div", { class: "shine" }, null, -1)
          ]), 4)
        ])
      ], 4))), 128))
    ], 512));
  }
}, Ml = /* @__PURE__ */ Ke(Gl, [["__scopeId", "data-v-26f5f75f"]]), Pr = {
  install(e) {
    e.component("DvScrollRankingBoard", Ml);
  }
}, Rl = ["align", "innerHTML"], Dl = ["align", "onClick", "onMouseenter", "innerHTML"], Tl = {
  __name: "index",
  props: {
    config: {
      type: Object,
      default: () => ({})
    }
  },
  emits: ["mouseover", "click", "getFirstRow"],
  setup(e, { expose: r, emit: a }) {
    const t = e, n = a, l = me(null), { width: o, height: _ } = xe(l, T, U), x = Pe({
      defaultConfig: {
        /**
         * @description Board header
         * @type {Array<string>}
         * @default header = []
         * @example header = ['column1', 'column2', 'column3']
         */
        header: [],
        /**
         * @description Board data
         * @type {Array<Array>}
         * @default data = []
         */
        data: [],
        /**
         * @description Row num
         * @type {number}
         * @default rowNum = 5
         */
        rowNum: 5,
        /**
         * @description Header background color
         * @type {string}
         * @default headerBGC = '#00BAFF'
         */
        headerBGC: "#00BAFF",
        /**
         * @description Odd row background color
         * @type {string}
         * @default oddRowBGC = '#003B51'
         */
        oddRowBGC: "#003B51",
        /**
         * @description Even row background color
         * @type {string}
         * @default evenRowBGC = '#003B51'
         */
        evenRowBGC: "#0A2732",
        /**
         * @description Scroll wait time
         * @type {number}
         * @default waitTime = 2000
         */
        waitTime: 2e3,
        /**
         * @description Header height
         * @type {number}
         * @default headerHeight = 35
         */
        headerHeight: 35,
        /**
         * @description Column width
         * @type {Array<number>}
         * @default columnWidth = []
         */
        columnWidth: [],
        /**
         * @description Column align
         * @type {Array<string>}
         * @default align = []
         * @example align = ['left', 'center', 'right']
         */
        align: [],
        /**
         * @description Show index
         * @type {boolean}
         * @default index = false
         */
        index: !1,
        /**
         * @description index Header
         * @type {string}
         * @default indexHeader = '#'
         */
        indexHeader: "#",
        /**
         * @description Carousel type
         * @type {string}
         * @default carousel = 'single'
         * @example carousel = 'single' | 'page'
         */
        carousel: "single",
        /**
         * @description Pause scroll when mouse hovered
         * @type {boolean}
         * @default hoverPause = true
         * @example hoverPause = true | false
         */
        hoverPause: !0
      },
      mergedConfig: null,
      header: [],
      rowsData: [],
      rows: [],
      widths: [],
      heights: [],
      avgHeight: 0,
      aligns: [],
      animationIndex: 0,
      animationHandler: "",
      updater: 0,
      needCalc: !1
    });
    ke(() => t.config, () => {
      f(), L();
    }, { deep: !0 }), Ft(() => {
      f();
    }), r({
      updateRows: D
    });
    function z(k, C, $, c) {
      const { ceils: M, rowIndex: A } = $;
      n("click", {
        row: M,
        ceil: c,
        rowIndex: A,
        columnIndex: C
      });
    }
    function E(k, C, $, c, M) {
      if (k) {
        const { ceils: A, rowIndex: p } = c;
        n("mouseover", {
          row: A,
          ceil: M,
          rowIndex: p,
          columnIndex: $
        });
      }
      x.mergedConfig.hoverPause && (k ? f() : y(!0));
    }
    function U() {
      L();
    }
    function T() {
      x.mergedConfig && (q(), G());
    }
    function L() {
      d(), B(), W(), q(), G(), m(), y(!0);
    }
    function d() {
      x.mergedConfig = Ce(_e(x.defaultConfig), t.config || {});
    }
    function B() {
      let { header: k } = x.mergedConfig;
      const { index: C, indexHeader: $ } = x.mergedConfig;
      if (!k.length) {
        k = [];
        return;
      }
      k = [...k], C && k.unshift($), x.header = k;
    }
    function W() {
      let { data: k } = x.mergedConfig;
      const { index: C, headerBGC: $, rowNum: c } = x.mergedConfig;
      C && (k = k.map((A, p) => {
        A = [...A];
        const V = `<span class="index" style="background-color: ${$};">${p + 1}</span>`;
        return A.unshift(V), A;
      })), k = k.map((A, p) => ({ ceils: A, rowIndex: p }));
      const M = k.length;
      M > c && M < 2 * c && (k = [...k, ...k]), k = k.map((A, p) => ({ ...A, scroll: p })), x.rowsData = k, x.rows = k;
    }
    function q() {
      const { columnWidth: k, header: C } = x.mergedConfig, $ = k.reduce((p, V) => p + V, 0);
      let c = 0;
      x.rowsData[0] ? c = x.rowsData[0].ceils.length : C.length && (c = C.length);
      const M = (o.value - $) / (c - k.length), A = Array.from({ length: c }).fill(M);
      x.widths = Ce(A, k);
    }
    function G(k = !1) {
      const { headerHeight: C, rowNum: $, data: c } = x.mergedConfig;
      let M = _.value;
      x.header.length && (M -= C);
      const A = M / $;
      x.avgHeight = A, k || (x.heights = Array.from({ length: c.length }).fill(A));
    }
    function m() {
      const k = x.header.length, C = Array.from({ length: k }).fill("left"), { align: $ } = x.mergedConfig;
      x.aligns = Ce(C, $);
    }
    async function y(k = !1) {
      x.needCalc && (W(), G(), x.needCalc = !1);
      const { waitTime: C, carousel: $, rowNum: c } = x.mergedConfig, { updater: M } = x, A = x.rowsData.length;
      if (c >= A || (k && await new Promise((ee) => setTimeout(ee, C)), M !== x.updater))
        return;
      const p = $ === "single" ? 1 : c, V = x.rowsData.slice(x.animationIndex);
      if (V.push(...x.rowsData.slice(0, x.animationIndex)), x.rows = V.slice(0, $ === "page" ? c * 2 : c + 1), x.heights = Array.from({ length: A }).fill(x.avgHeight), await new Promise((ee) => setTimeout(ee, 300)), M !== x.updater)
        return;
      x.heights.splice(0, p, ...Array.from({ length: p }).fill(0)), x.animationIndex += p;
      const X = x.animationIndex - A;
      X >= 0 && (x.animationIndex = X), x.animationHandler = setTimeout(y, C - 300), n("getFirstRow", V[1]);
    }
    function f() {
      x.updater = (x.updater + 1) % 999999, x.animationHandler && clearTimeout(x.animationHandler);
    }
    function D(k, C) {
      x.mergedConfig = {
        ...x.mergedConfig,
        data: [...k]
      }, x.needCalc = !0, typeof C == "number" && (x.animationIndex = C), x.animationHandler || y(!0);
    }
    return (k, C) => (le(), se("div", {
      ref_key: "scrollBoard",
      ref: l,
      class: "dv-scroll-board"
    }, [
      i(x).header.length && i(x).mergedConfig ? (le(), se("div", {
        key: 0,
        class: "header",
        style: Ge(`background-color: ${i(x).mergedConfig.headerBGC};`)
      }, [
        (le(!0), se(Ae, null, Se(i(x).header, ($, c) => (le(), se("div", {
          key: `${$}${c}`,
          class: "header-item",
          style: Ge(`
          height: ${i(x).mergedConfig.headerHeight}px;
          line-height: ${i(x).mergedConfig.headerHeight}px;
          width: ${i(x).widths[c]}px;
        `),
          align: i(x).aligns[c],
          innerHTML: $
        }, null, 12, Rl))), 128))
      ], 4)) : $e("", !0),
      i(x).mergedConfig ? (le(), se("div", {
        key: 1,
        class: "rows",
        style: Ge(`height: ${i(_) - (i(x).header.length ? i(x).mergedConfig.headerHeight : 0)}px;`)
      }, [
        (le(!0), se(Ae, null, Se(i(x).rows, ($, c) => (le(), se("div", {
          key: `${$.toString()}${$.scroll}`,
          class: "row-item",
          style: Ge(`
          height: ${i(x).heights[c]}px;
          line-height: ${i(x).heights[c]}px;
          background-color: ${i(x).mergedConfig[$.rowIndex % 2 === 0 ? "evenRowBGC" : "oddRowBGC"]};
        `)
        }, [
          (le(!0), se(Ae, null, Se($.ceils, (M, A) => (le(), se("div", {
            key: `${M}${c}${A}`,
            class: "ceil",
            style: Ge(`width: ${i(x).widths[A]}px;`),
            align: i(x).aligns[A],
            onClick: (p) => z(c, A, $, M),
            onMouseenter: (p) => E(!0, c, A, $, M),
            onMouseleave: C[0] || (C[0] = (p) => E(!1)),
            innerHTML: M
          }, null, 44, Dl))), 128))
        ], 4))), 128))
      ], 4)) : $e("", !0)
    ], 512));
  }
}, wr = {
  install(e) {
    e.component("DvScrollBoard", Tl);
  }
};
var Ma = {}, kr = {}, je = {}, In;
function ze() {
  if (In) return je;
  In = 1;
  var e = we;
  Object.defineProperty(je, "__esModule", {
    value: !0
  }), je.filterNonNumber = n, je.deepMerge = l, je.mulAdd = o, je.mergeSameStackData = _, je.getTwoPointDistance = x, je.getLinearGradientColor = z, je.getPolylineLength = E, je.getPointToLineDistance = U, je.initNeedSeries = T, je.radianToAngle = L;
  var r = e(Te()), a = e(Be()), t = Fe();
  function n(d) {
    return d.filter(function(B) {
      return typeof B == "number";
    });
  }
  function l(d, B) {
    for (var W in B) {
      if (d[W] && (0, a.default)(d[W]) === "object") {
        l(d[W], B[W]);
        continue;
      }
      if ((0, a.default)(B[W]) === "object") {
        d[W] = (0, t.deepClone)(B[W], !0);
        continue;
      }
      d[W] = B[W];
    }
    return d;
  }
  function o(d) {
    return d = n(d), d.reduce(function(B, W) {
      return B + W;
    }, 0);
  }
  function _(d, B) {
    var W = d.stack;
    if (!W) return (0, r.default)(d.data);
    var q = B.filter(function(f) {
      var D = f.stack;
      return D === W;
    }), G = q.findIndex(function(f) {
      var D = f.data;
      return D === d.data;
    }), m = q.splice(0, G + 1).map(function(f) {
      var D = f.data;
      return D;
    }), y = m[0].length;
    return new Array(y).fill(0).map(function(f, D) {
      return o(m.map(function(k) {
        return k[D];
      }));
    });
  }
  function x(d, B) {
    var W = Math.abs(d[0] - B[0]), q = Math.abs(d[1] - B[1]);
    return Math.sqrt(W * W + q * q);
  }
  function z(d, B, W, q) {
    if (!(!d || !B || !W || !q.length)) {
      var G = q;
      typeof G == "string" && (G = [q, q]);
      var m = d.createLinearGradient.apply(d, (0, r.default)(B).concat((0, r.default)(W))), y = 1 / (G.length - 1);
      return G.forEach(function(f, D) {
        return m.addColorStop(y * D, f);
      }), m;
    }
  }
  function E(d) {
    var B = new Array(d.length - 1).fill(0).map(function(q, G) {
      return [d[G], d[G + 1]];
    }), W = B.map(function(q) {
      return x.apply(void 0, (0, r.default)(q));
    });
    return o(W);
  }
  function U(d, B, W) {
    var q = x(d, B), G = x(d, W), m = x(B, W);
    return 0.5 * Math.sqrt((q + G + m) * (q + G - m) * (q + m - G) * (G + m - q)) / m;
  }
  function T(d, B, W) {
    return d = d.filter(function(q) {
      var G = q.type;
      return G === W;
    }), d = d.map(function(q) {
      return l((0, t.deepClone)(B, !0), q);
    }), d.filter(function(q) {
      var G = q.show;
      return G;
    });
  }
  function L(d) {
    return d / Math.PI * 180;
  }
  return je;
}
var Ra = we, Fl = Ra(Ve()), Hn = Ra(Te()), Et = jt, Bl = fn(), vt = Fe(), Nl = yt, Wl = ze();
function Vn(e, r) {
  var a = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var t = Object.getOwnPropertySymbols(e);
    r && (t = t.filter(function(n) {
      return Object.getOwnPropertyDescriptor(e, n).enumerable;
    })), a.push.apply(a, t);
  }
  return a;
}
function Un(e) {
  for (var r = 1; r < arguments.length; r++) {
    var a = arguments[r] != null ? arguments[r] : {};
    r % 2 ? Vn(Object(a), !0).forEach(function(t) {
      (0, Fl.default)(e, t, a[t]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(a)) : Vn(Object(a)).forEach(function(t) {
      Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(a, t));
    });
  }
  return e;
}
var jl = {
  shape: {
    rx: 0,
    ry: 0,
    ir: 0,
    or: 0,
    startAngle: 0,
    endAngle: 0,
    clockWise: !0
  },
  validator: function(r) {
    var a = r.shape, t = ["rx", "ry", "ir", "or", "startAngle", "endAngle"];
    return t.find(function(n) {
      return typeof a[n] != "number";
    }) ? (console.error("Pie shape configuration is abnormal!"), !1) : !0;
  },
  draw: function(r, a) {
    var t = r.ctx, n = a.shape;
    t.beginPath();
    var l = n.rx, o = n.ry, _ = n.ir, x = n.or, z = n.startAngle, E = n.endAngle, U = n.clockWise;
    l = parseInt(l) + 0.5, o = parseInt(o) + 0.5, t.arc(l, o, _ > 0 ? _ : 0, z, E, !U);
    var T = (0, vt.getCircleRadianPoint)(l, o, x, E).map(function(d) {
      return parseInt(d) + 0.5;
    }), L = (0, vt.getCircleRadianPoint)(l, o, _, z).map(function(d) {
      return parseInt(d) + 0.5;
    });
    t.lineTo.apply(t, (0, Hn.default)(T)), t.arc(l, o, x > 0 ? x : 0, E, z, U), t.lineTo.apply(t, (0, Hn.default)(L)), t.closePath(), t.stroke(), t.fill();
  }
}, El = {
  shape: {
    rx: 0,
    ry: 0,
    r: 0,
    startAngle: 0,
    endAngle: 0,
    gradientStartAngle: null,
    gradientEndAngle: null
  },
  validator: function(r) {
    var a = r.shape, t = ["rx", "ry", "r", "startAngle", "endAngle"];
    return t.find(function(n) {
      return typeof a[n] != "number";
    }) ? (console.error("AgArc shape configuration is abnormal!"), !1) : !0;
  },
  draw: function(r, a) {
    var t = r.ctx, n = a.shape, l = a.style, o = l.gradient;
    o = o.map(function(k) {
      return (0, Nl.getColorFromRgbValue)(k);
    }), o.length === 1 && (o = [o[0], o[0]]);
    var _ = o.length - 1, x = n.gradientStartAngle, z = n.gradientEndAngle, E = n.startAngle, U = n.endAngle, T = n.r, L = n.rx, d = n.ry;
    x === null && (x = E), z === null && (z = U);
    var B = (z - x) / _;
    B === Math.PI * 2 && (B = Math.PI * 2 - 1e-3);
    for (var W = 0; W < _; W++) {
      t.beginPath();
      var q = (0, vt.getCircleRadianPoint)(L, d, T, E + B * W), G = (0, vt.getCircleRadianPoint)(L, d, T, E + B * (W + 1)), m = (0, Wl.getLinearGradientColor)(t, q, G, [o[W], o[W + 1]]), y = E + B * W, f = E + B * (W + 1), D = !1;
      if (f > U && (f = U, D = !0), t.arc(L, d, T, y, f), t.strokeStyle = m, t.stroke(), D) break;
    }
  }
}, zl = {
  shape: {
    number: [],
    content: "",
    position: [0, 0],
    toFixed: 0,
    rowGap: 0,
    formatter: null
  },
  validator: function(r) {
    var a = r.shape, t = a.number, n = a.content, l = a.position;
    return !(t instanceof Array) || typeof n != "string" || !(l instanceof Array) ? (console.error("NumberText shape configuration is abnormal!"), !1) : !0;
  },
  draw: function(r, a) {
    var t = r.ctx, n = a.shape, l = n.number, o = n.content, _ = n.toFixed, x = n.rowGap, z = n.formatter, E = o.split("{nt}"), U = "";
    E.forEach(function(T, L) {
      var d = l[L];
      typeof d != "number" && (d = ""), typeof d == "number" && (d = d.toFixed(_), typeof z == "function" && (d = z(d))), U += T + (d || "");
    }), Bl.text.draw({
      ctx: t
    }, {
      shape: Un(Un({}, n), {}, {
        content: U,
        rowGap: x
      })
    });
  }
}, ql = {
  shape: {
    x: 0,
    y: 0,
    w: 0,
    h: 0
  },
  validator: function(r) {
    var a = r.shape, t = a.x, n = a.y, l = a.w, o = a.h;
    return typeof t != "number" || typeof n != "number" || typeof l != "number" || typeof o != "number" ? (console.error("lineIcon shape configuration is abnormal!"), !1) : !0;
  },
  draw: function(r, a) {
    var t = r.ctx, n = a.shape;
    t.beginPath();
    var l = n.x, o = n.y, _ = n.w, x = n.h, z = x / 2;
    t.strokeStyle = t.fillStyle, t.moveTo(l, o + z), t.lineTo(l + _, o + z), t.lineWidth = 1, t.stroke(), t.beginPath();
    var E = z - 5 * 2;
    E <= 0 && (E = 3), t.arc(l + _ / 2, o + z, E, 0, Math.PI * 2), t.lineWidth = 5, t.stroke(), t.fillStyle = "#fff", t.fill();
  },
  hoverCheck: function(r, a) {
    var t = a.shape, n = t.x, l = t.y, o = t.w, _ = t.h;
    return (0, vt.checkPointIsInRect)(r, n, l, o, _);
  },
  setGraphCenter: function(r, a) {
    var t = a.shape, n = a.style, l = t.x, o = t.y, _ = t.w, x = t.h;
    n.graphCenter = [l + _ / 2, o + x / 2];
  }
};
(0, Et.extendNewGraph)("pie", jl);
(0, Et.extendNewGraph)("agArc", El);
(0, Et.extendNewGraph)("numberText", zl);
(0, Et.extendNewGraph)("lineIcon", ql);
var Ar = {}, Ct = {}, Lr = {}, rt = {}, Xn;
function Il() {
  if (Xn) return rt;
  Xn = 1, Object.defineProperty(rt, "__esModule", {
    value: !0
  }), rt.colorConfig = void 0;
  var e = ["#37a2da", "#32c5e9", "#67e0e3", "#9fe6b8", "#ffdb5c", "#ff9f7f", "#fb7293", "#e062ae", "#e690d1", "#e7bcf3", "#9d96f5", "#8378ea", "#96bfff"];
  return rt.colorConfig = e, rt;
}
var nt = {}, Qn;
function Hl() {
  if (Qn) return nt;
  Qn = 1, Object.defineProperty(nt, "__esModule", {
    value: !0
  }), nt.gridConfig = void 0;
  var e = {
    /**
     * @description Grid left margin
     * @type {String|Number}
     * @default left = '10%'
     * @example left = '10%' | 10
     */
    left: "10%",
    /**
     * @description Grid right margin
     * @type {String|Number}
     * @default right = '10%'
     * @example right = '10%' | 10
     */
    right: "10%",
    /**
     * @description Grid top margin
     * @type {String|Number}
     * @default top = 60
     * @example top = '10%' | 60
     */
    top: 60,
    /**
     * @description Grid bottom margin
     * @type {String|Number}
     * @default bottom = 60
     * @example bottom = '10%' | 60
     */
    bottom: 60,
    /**
     * @description Grid default style configuration
     * @type {Object}
     * @default style = {Configuration Of Class Style}
     */
    style: {
      fill: "rgba(0, 0, 0, 0)"
    },
    /**
     * @description Grid render level
     * Priority rendering high level
     * @type {Number}
     * @default rLevel = -30
     */
    rLevel: -30,
    /**
     * @description Grid animation curve
     * @type {String}
     * @default animationCurve = 'easeOutCubic'
     */
    animationCurve: "easeOutCubic",
    /**
     * @description Grid animation frame
     * @type {Number}
     * @default animationFrame = 50
     */
    animationFrame: 30
  };
  return nt.gridConfig = e, nt;
}
var Ze = {}, Yn;
function Vl() {
  if (Yn) return Ze;
  Yn = 1, Object.defineProperty(Ze, "__esModule", {
    value: !0
  }), Ze.yAxisConfig = Ze.xAxisConfig = void 0;
  var e = {
    /**
     * @description Axis name
     * @type {String}
     * @default name = ''
     */
    name: "",
    /**
     * @description Whether to display this axis
     * @type {Boolean}
     * @default show = true
     */
    show: !0,
    /**
     * @description Axis position
     * @type {String}
     * @default position = 'bottom'
     * @example position = 'bottom' | 'top'
     */
    position: "bottom",
    /**
     * @description Name gap
     * @type {Number}
     * @default nameGap = 15
     */
    nameGap: 15,
    /**
     * @description Name location
     * @type {String}
     * @default nameLocation = 'end'
     * @example nameLocation = 'end' | 'center' | 'start'
     */
    nameLocation: "end",
    /**
     * @description Name default style configuration
     * @type {Object}
     * @default style = {Configuration Of Class Style}
     */
    nameTextStyle: {
      fill: "#333",
      fontSize: 10
    },
    /**
     * @description Axis min value
     * @type {String|Number}
     * @default min = '20%'
     * @example min = '20%' | 0
     */
    min: "20%",
    /**
     * @description Axis max value
     * @type {String|Number}
     * @default max = '20%'
     * @example max = '20%' | 0
     */
    max: "20%",
    /**
     * @description Axis value interval
     * @type {Number}
     * @default interval = null
     * @example interval = 100
     */
    interval: null,
    /**
     * @description Min interval
     * @type {Number}
     * @default minInterval = null
     * @example minInterval = 1
     */
    minInterval: null,
    /**
     * @description Max interval
     * @type {Number}
     * @default maxInterval = null
     * @example maxInterval = 100
     */
    maxInterval: null,
    /**
     * @description Boundary gap
     * @type {Boolean}
     * @default boundaryGap = null
     * @example boundaryGap = true
     */
    boundaryGap: null,
    /**
     * @description Axis split number
     * @type {Number}
     * @default splitNumber = 5
     */
    splitNumber: 5,
    /**
     * @description Axis line configuration
     * @type {Object}
     */
    axisLine: {
      /**
       * @description Whether to display axis line
       * @type {Boolean}
       * @default show = true
       */
      show: !0,
      /**
       * @description Axis line default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {
        stroke: "#333",
        lineWidth: 1
      }
    },
    /**
     * @description Axis tick configuration
     * @type {Object}
     */
    axisTick: {
      /**
       * @description Whether to display axis tick
       * @type {Boolean}
       * @default show = true
       */
      show: !0,
      /**
       * @description Axis tick default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {
        stroke: "#333",
        lineWidth: 1
      }
    },
    /**
     * @description Axis label configuration
     * @type {Object}
     */
    axisLabel: {
      /**
       * @description Whether to display axis label
       * @type {Boolean}
       * @default show = true
       */
      show: !0,
      /**
       * @description Axis label formatter
       * @type {String|Function}
       * @default formatter = null
       * @example formatter = '{value}件'
       * @example formatter = (dataItem) => (dataItem.value)
       */
      formatter: null,
      /**
       * @description Axis label default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {
        fill: "#333",
        fontSize: 10,
        rotate: 0
      }
    },
    /**
     * @description Axis split line configuration
     * @type {Object}
     */
    splitLine: {
      /**
       * @description Whether to display axis split line
       * @type {Boolean}
       * @default show = false
       */
      show: !1,
      /**
       * @description Axis split line default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {
        stroke: "#d4d4d4",
        lineWidth: 1
      }
    },
    /**
     * @description X axis render level
     * Priority rendering high level
     * @type {Number}
     * @default rLevel = -20
     */
    rLevel: -20,
    /**
     * @description X axis animation curve
     * @type {String}
     * @default animationCurve = 'easeOutCubic'
     */
    animationCurve: "easeOutCubic",
    /**
     * @description X axis animation frame
     * @type {Number}
     * @default animationFrame = 50
     */
    animationFrame: 50
  };
  Ze.xAxisConfig = e;
  var r = {
    /**
     * @description Axis name
     * @type {String}
     * @default name = ''
     */
    name: "",
    /**
     * @description Whether to display this axis
     * @type {Boolean}
     * @default show = true
     */
    show: !0,
    /**
     * @description Axis position
     * @type {String}
     * @default position = 'left'
     * @example position = 'left' | 'right'
     */
    position: "left",
    /**
     * @description Name gap
     * @type {Number}
     * @default nameGap = 15
     */
    nameGap: 15,
    /**
     * @description Name location
     * @type {String}
     * @default nameLocation = 'end'
     * @example nameLocation = 'end' | 'center' | 'start'
     */
    nameLocation: "end",
    /**
     * @description name default style configuration
     * @type {Object}
     * @default style = {Configuration Of Class Style}
     */
    nameTextStyle: {
      fill: "#333",
      fontSize: 10
    },
    /**
     * @description Axis min value
     * @type {String|Number}
     * @default min = '20%'
     * @example min = '20%' | 0
     */
    min: "20%",
    /**
     * @description Axis max value
     * @type {String|Number}
     * @default max = '20%'
     * @example max = '20%' | 0
     */
    max: "20%",
    /**
     * @description Axis value interval
     * @type {Number}
     * @default interval = null
     * @example interval = 100
     */
    interval: null,
    /**
     * @description Min interval
     * @type {Number}
     * @default minInterval = null
     * @example minInterval = 1
     */
    minInterval: null,
    /**
     * @description Max interval
     * @type {Number}
     * @default maxInterval = null
     * @example maxInterval = 100
     */
    maxInterval: null,
    /**
     * @description Boundary gap
     * @type {Boolean}
     * @default boundaryGap = null
     * @example boundaryGap = true
     */
    boundaryGap: null,
    /**
     * @description Axis split number
     * @type {Number}
     * @default splitNumber = 5
     */
    splitNumber: 5,
    /**
     * @description Axis line configuration
     * @type {Object}
     */
    axisLine: {
      /**
       * @description Whether to display axis line
       * @type {Boolean}
       * @default show = true
       */
      show: !0,
      /**
       * @description Axis line default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {
        stroke: "#333",
        lineWidth: 1
      }
    },
    /**
     * @description Axis tick configuration
     * @type {Object}
     */
    axisTick: {
      /**
       * @description Whether to display axis tick
       * @type {Boolean}
       * @default show = true
       */
      show: !0,
      /**
       * @description Axis tick default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {
        stroke: "#333",
        lineWidth: 1
      }
    },
    /**
     * @description Axis label configuration
     * @type {Object}
     */
    axisLabel: {
      /**
       * @description Whether to display axis label
       * @type {Boolean}
       * @default show = true
       */
      show: !0,
      /**
       * @description Axis label formatter
       * @type {String|Function}
       * @default formatter = null
       * @example formatter = '{value}件'
       * @example formatter = (dataItem) => (dataItem.value)
       */
      formatter: null,
      /**
       * @description Axis label default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {
        fill: "#333",
        fontSize: 10,
        rotate: 0
      }
    },
    /**
     * @description Axis split line configuration
     * @type {Object}
     */
    splitLine: {
      /**
       * @description Whether to display axis split line
       * @type {Boolean}
       * @default show = true
       */
      show: !0,
      /**
       * @description Axis split line default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {
        stroke: "#d4d4d4",
        lineWidth: 1
      }
    },
    /**
     * @description Y axis render level
     * Priority rendering high level
     * @type {Number}
     * @default rLevel = -20
     */
    rLevel: -20,
    /**
     * @description Y axis animation curve
     * @type {String}
     * @default animationCurve = 'easeOutCubic'
     */
    animationCurve: "easeOutCubic",
    /**
     * @description Y axis animation frame
     * @type {Number}
     * @default animationFrame = 50
     */
    animationFrame: 50
  };
  return Ze.yAxisConfig = r, Ze;
}
var at = {}, Kn;
function Ul() {
  if (Kn) return at;
  Kn = 1, Object.defineProperty(at, "__esModule", {
    value: !0
  }), at.titleConfig = void 0;
  var e = {
    /**
     * @description Whether to display title
     * @type {Boolean}
     * @default show = true
     */
    show: !0,
    /**
     * @description Title text
     * @type {String}
     * @default text = ''
     */
    text: "",
    /**
     * @description Title offset
     * @type {Array}
     * @default offset = [0, -20]
     */
    offset: [0, -20],
    /**
     * @description Title default style configuration
     * @type {Object}
     * @default style = {Configuration Of Class Style}
     */
    style: {
      fill: "#333",
      fontSize: 17,
      fontWeight: "bold",
      textAlign: "center",
      textBaseline: "bottom"
    },
    /**
     * @description Title render level
     * Priority rendering high level
     * @type {Number}
     * @default rLevel = 20
     */
    rLevel: 20,
    /**
     * @description Title animation curve
     * @type {String}
     * @default animationCurve = 'easeOutCubic'
     */
    animationCurve: "easeOutCubic",
    /**
     * @description Title animation frame
     * @type {Number}
     * @default animationFrame = 50
     */
    animationFrame: 50
  };
  return at.titleConfig = e, at;
}
var it = {}, Jn;
function Xl() {
  if (Jn) return it;
  Jn = 1, Object.defineProperty(it, "__esModule", {
    value: !0
  }), it.lineConfig = void 0;
  var e = {
    /**
     * @description Whether to display this line chart
     * @type {Boolean}
     * @default show = true
     */
    show: !0,
    /**
     * @description Legend name
     * @type {String}
     * @default name = ''
     */
    name: "",
    /**
     * @description Data stacking
     * The data value of the series element of the same stack
     * will be superimposed (the latter value will be superimposed on the previous value)
     * @type {String}
     * @default stack = ''
     */
    stack: "",
    /**
     * @description Smooth line
     * @type {Boolean}
     * @default smooth = false
     */
    smooth: !1,
    /**
     * @description Line x axis index
     * @type {Number}
     * @default xAxisIndex = 0
     * @example xAxisIndex = 0 | 1
     */
    xAxisIndex: 0,
    /**
     * @description Line y axis index
     * @type {Number}
     * @default yAxisIndex = 0
     * @example yAxisIndex = 0 | 1
     */
    yAxisIndex: 0,
    /**
     * @description Line chart data
     * @type {Array}
     * @default data = []
     * @example data = [100, 200, 300]
     */
    data: [],
    /**
     * @description Line default style configuration
     * @type {Object}
     * @default style = {Configuration Of Class Style}
     */
    lineStyle: {
      lineWidth: 1
    },
    /**
     * @description Line point configuration
     * @type {Object}
     */
    linePoint: {
      /**
       * @description Whether to display line point
       * @type {Boolean}
       * @default show = true
       */
      show: !0,
      /**
       * @description Line point radius
       * @type {Number}
       * @default radius = 2
       */
      radius: 2,
      /**
       * @description Line point default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {
        fill: "#fff",
        lineWidth: 1
      }
    },
    /**
     * @description Line area configuration
     * @type {Object}
     */
    lineArea: {
      /**
       * @description Whether to display line area
       * @type {Boolean}
       * @default show = false
       */
      show: !1,
      /**
       * @description Line area gradient color (Hex|rgb|rgba)
       * @type {Array}
       * @default gradient = []
       */
      gradient: [],
      /**
       * @description Line area style default configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {
        opacity: 0.5
      }
    },
    /**
     * @description Line label configuration
     * @type {Object}
     */
    label: {
      /**
       * @description Whether to display line label
       * @type {Boolean}
       * @default show = false
       */
      show: !1,
      /**
       * @description Line label position
       * @type {String}
       * @default position = 'top'
       * @example position = 'top' | 'center' | 'bottom'
       */
      position: "top",
      /**
       * @description Line label offset
       * @type {Array}
       * @default offset = [0, -10]
       */
      offset: [0, -10],
      /**
       * @description Line label formatter
       * @type {String|Function}
       * @default formatter = null
       * @example formatter = '{value}件'
       * @example formatter = (dataItem) => (dataItem.value)
       */
      formatter: null,
      /**
       * @description Line label default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {
        fontSize: 10
      }
    },
    /**
     * @description Line chart render level
     * Priority rendering high level
     * @type {Number}
     * @default rLevel = 10
     */
    rLevel: 10,
    /**
     * @description Line animation curve
     * @type {String}
     * @default animationCurve = 'easeOutCubic'
     */
    animationCurve: "easeOutCubic",
    /**
     * @description Line animation frame
     * @type {Number}
     * @default animationFrame = 50
     */
    animationFrame: 50
  };
  return it.lineConfig = e, it;
}
var ot = {}, Zn;
function Ql() {
  if (Zn) return ot;
  Zn = 1, Object.defineProperty(ot, "__esModule", {
    value: !0
  }), ot.barConfig = void 0;
  var e = {
    /**
     * @description Whether to display this bar chart
     * @type {Boolean}
     * @default show = true
     */
    show: !0,
    /**
     * @description Legend name
     * @type {String}
     * @default name = ''
     */
    name: "",
    /**
     * @description Data stacking
     * The data value of the series element of the same stack
     * will be superimposed (the latter value will be superimposed on the previous value)
     * @type {String}
     * @default stack = ''
     */
    stack: "",
    /**
     * @description Bar shape type
     * @type {String}
     * @default shapeType = 'normal'
     * @example shapeType = 'normal' | 'leftEchelon' | 'rightEchelon'
     */
    shapeType: "normal",
    /**
     * @description Echelon bar sharpness offset
     * @type {Number}
     * @default echelonOffset = 10
     */
    echelonOffset: 10,
    /**
     * @description Bar width
     * This property should be set on the last 'bar' series
     * in this coordinate system to take effect and will be in effect
     * for all 'bar' series in this coordinate system
     * @type {String|Number}
     * @default barWidth = 'auto'
     * @example barWidth = 'auto' | '10%' | 20
     */
    barWidth: "auto",
    /**
     * @description Bar gap
     * This property should be set on the last 'bar' series
     * in this coordinate system to take effect and will be in effect
     * for all 'bar' series in this coordinate system
     * @type {String|Number}
     * @default barGap = '30%'
     * @example barGap = '30%' | 30
     */
    barGap: "30%",
    /**
     * @description Bar category gap
     * This property should be set on the last 'bar' series
     * in this coordinate system to take effect and will be in effect
     * for all 'bar' series in this coordinate system
     * @type {String|Number}
     * @default barCategoryGap = '20%'
     * @example barCategoryGap = '20%' | 20
     */
    barCategoryGap: "20%",
    /**
     * @description Bar x axis index
     * @type {Number}
     * @default xAxisIndex = 0
     * @example xAxisIndex = 0 | 1
     */
    xAxisIndex: 0,
    /**
     * @description Bar y axis index
     * @type {Number}
     * @default yAxisIndex = 0
     * @example yAxisIndex = 0 | 1
     */
    yAxisIndex: 0,
    /**
     * @description Bar chart data
     * @type {Array}
     * @default data = []
     * @example data = [100, 200, 300]
     */
    data: [],
    /**
     * @description Background bar configuration
     * @type {Object}
     */
    backgroundBar: {
      /**
       * @description Whether to display background bar
       * @type {Boolean}
       * @default show = false
       */
      show: !1,
      /**
       * @description Background bar width
       * @type {String|Number}
       * @default width = 'auto'
       * @example width = 'auto' | '30%' | 30
       */
      width: "auto",
      /**
       * @description Background bar default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {
        fill: "rgba(200, 200, 200, .4)"
      }
    },
    /**
     * @description Bar label configuration
     * @type {Object}
     */
    label: {
      /**
       * @description Whether to display bar label
       * @type {Boolean}
       * @default show = false
       */
      show: !1,
      /**
       * @description Bar label position
       * @type {String}
       * @default position = 'top'
       * @example position = 'top' | 'center' | 'bottom'
       */
      position: "top",
      /**
       * @description Bar label offset
       * @type {Array}
       * @default offset = [0, -10]
       */
      offset: [0, -10],
      /**
       * @description Bar label formatter
       * @type {String|Function}
       * @default formatter = null
       * @example formatter = '{value}件'
       * @example formatter = (dataItem) => (dataItem.value)
       */
      formatter: null,
      /**
       * @description Bar label default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {
        fontSize: 10
      }
    },
    /**
     * @description Bar gradient configuration
     * @type {Object}
     */
    gradient: {
      /**
       * @description Gradient color (Hex|rgb|rgba)
       * @type {Array}
       * @default color = []
       */
      color: [],
      /**
       * @description Local gradient
       * @type {Boolean}
       * @default local = true
       */
      local: !0
    },
    /**
     * @description Bar style default configuration
     * @type {Object}
     * @default style = {Configuration Of Class Style}
     */
    barStyle: {},
    /**
     * @description Independent color mode
     * When set to true, independent color mode is enabled
     * @type {Boolean}
     * @default independentColor = false
     */
    independentColor: !1,
    /**
     * @description Independent colors
     * Only effective when independent color mode is enabled
     * Default value is the same as the color in the root configuration
     * Two-dimensional color array can produce gradient colors
     * @type {Array}
     * @example independentColor = ['#fff', '#000']
     * @example independentColor = [['#fff', '#000'], '#000']
     */
    independentColors: [],
    /**
     * @description Bar chart render level
     * Priority rendering high level
     * @type {Number}
     * @default rLevel = 0
     */
    rLevel: 0,
    /**
     * @description Bar animation curve
     * @type {String}
     * @default animationCurve = 'easeOutCubic'
     */
    animationCurve: "easeOutCubic",
    /**
     * @description Bar animation frame
     * @type {Number}
     * @default animationFrame = 50
     */
    animationFrame: 50
  };
  return ot.barConfig = e, ot;
}
var lt = {}, ea;
function Da() {
  if (ea) return lt;
  ea = 1, Object.defineProperty(lt, "__esModule", {
    value: !0
  }), lt.pieConfig = void 0;
  var e = {
    /**
     * @description Whether to display this pie chart
     * @type {Boolean}
     * @default show = true
     */
    show: !0,
    /**
     * @description Legend name
     * @type {String}
     * @default name = ''
     */
    name: "",
    /**
     * @description Radius of pie
     * @type {String|Number}
     * @default radius = '50%'
     * @example radius = '50%' | 100
     */
    radius: "50%",
    /**
     * @description Center point of pie
     * @type {Array}
     * @default center = ['50%','50%']
     * @example center = ['50%','50%'] | [100, 100]
     */
    center: ["50%", "50%"],
    /**
     * @description Pie chart start angle
     * @type {Number}
     * @default startAngle = -Math.PI / 2
     * @example startAngle = -Math.PI
     */
    startAngle: -Math.PI / 2,
    /**
     * @description Whether to enable rose type
     * @type {Boolean}
     * @default roseType = false
     */
    roseType: !1,
    /**
     * @description Automatic sorting in rose type
     * @type {Boolean}
     * @default roseSort = true
     */
    roseSort: !0,
    /**
     * @description Rose radius increasing
     * @type {String|Number}
     * @default roseIncrement = 'auto'
     * @example roseIncrement = 'auto' | '10%' | 10
     */
    roseIncrement: "auto",
    /**
     * @description Pie chart data
     * @type {Array}
     * @default data = []
     */
    data: [],
    /**
     * @description Pie inside label configuration
     * @type {Object}
     */
    insideLabel: {
      /**
       * @description Whether to display inside label
       * @type {Boolean}
       * @default show = false
       */
      show: !1,
      /**
       * @description Label formatter
       * @type {String|Function}
       * @default formatter = '{percent}%'
       * @example formatter = '${name}-{value}-{percent}%'
       * @example formatter = (dataItem) => (dataItem.name)
       */
      formatter: "{percent}%",
      /**
       * @description Label default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {
        fontSize: 10,
        fill: "#fff",
        textAlign: "center",
        textBaseline: "middle"
      }
    },
    /**
     * @description Pie Outside label configuration
     * @type {Object}
     */
    outsideLabel: {
      /**
       * @description Whether to display outside label
       * @type {Boolean}
       * @default show = false
       */
      show: !0,
      /**
       * @description Label formatter
       * @type {String|Function}
       * @default formatter = '{name}'
       * @example formatter = '${name}-{value}-{percent}%'
       * @example formatter = (dataItem) => (dataItem.name)
       */
      formatter: "{name}",
      /**
       * @description Label default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {
        fontSize: 11
      },
      /**
       * @description Gap beteen label line bended place and pie
       * @type {String|Number}
       * @default labelLineBendGap = '20%'
       * @example labelLineBendGap = '20%' | 20
       */
      labelLineBendGap: "20%",
      /**
       * @description Label line end length
       * @type {Number}
       * @default labelLineEndLength = 50
       */
      labelLineEndLength: 50,
      /**
       * @description Label line default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      labelLineStyle: {
        lineWidth: 1
      }
    },
    /**
     * @description Pie default style configuration
     * @type {Object}
     * @default style = {Configuration Of Class Style}
     */
    pieStyle: {},
    /**
     * @description Percentage fractional precision
     * @type {Number}
     * @default percentToFixed = 0
     */
    percentToFixed: 0,
    /**
     * @description Pie chart render level
     * Priority rendering high level
     * @type {Number}
     * @default rLevel = 10
     */
    rLevel: 10,
    /**
     * @description Animation delay gap
     * @type {Number}
     * @default animationDelayGap = 60
     */
    animationDelayGap: 60,
    /**
     * @description Pie animation curve
     * @type {String}
     * @default animationCurve = 'easeOutCubic'
     */
    animationCurve: "easeOutCubic",
    /**
     * @description Pie start animation curve
     * @type {String}
     * @default startAnimationCurve = 'easeOutBack'
     */
    startAnimationCurve: "easeOutBack",
    /**
     * @description Pie animation frame
     * @type {Number}
     * @default animationFrame = 50
     */
    animationFrame: 50
  };
  return lt.pieConfig = e, lt;
}
var st = {}, ta;
function Yl() {
  if (ta) return st;
  ta = 1, Object.defineProperty(st, "__esModule", {
    value: !0
  }), st.radarAxisConfig = void 0;
  var e = {
    /**
     * @description Whether to display this radar axis
     * @type {Boolean}
     * @default show = true
     */
    show: !0,
    /**
     * @description Center point of radar axis
     * @type {Array}
     * @default center = ['50%','50%']
     * @example center = ['50%','50%'] | [100, 100]
     */
    center: ["50%", "50%"],
    /**
     * @description Radius of radar axis
     * @type {String|Number}
     * @default radius = '65%'
     * @example radius = '65%' | 100
     */
    radius: "65%",
    /**
     * @description Radar axis start angle
     * @type {Number}
     * @default startAngle = -Math.PI / 2
     * @example startAngle = -Math.PI
     */
    startAngle: -Math.PI / 2,
    /**
     * @description Radar axis split number
     * @type {Number}
     * @default splitNum = 5
     */
    splitNum: 5,
    /**
     * @description Whether to enable polygon radar axis
     * @type {Boolean}
     * @default polygon = false
     */
    polygon: !1,
    /**
     * @description Axis label configuration
     * @type {Object}
     */
    axisLabel: {
      /**
       * @description Whether to display axis label
       * @type {Boolean}
       * @default show = true
       */
      show: !0,
      /**
       * @description Label gap between label and radar axis
       * @type {Number}
       * @default labelGap = 15
       */
      labelGap: 15,
      /**
       * @description Label color (Hex|rgb|rgba), will cover style.fill
       * @type {Array}
       * @default color = []
       */
      color: [],
      /**
       * @description Axis label default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {
        fill: "#333"
      }
    },
    /**
     * @description Axis line configuration
     * @type {Object}
     */
    axisLine: {
      /**
       * @description Whether to display axis line
       * @type {Boolean}
       * @default show = true
       */
      show: !0,
      /**
       * @description Line color (Hex|rgb|rgba), will cover style.stroke
       * @type {Array}
       * @default color = []
       */
      color: [],
      /**
       * @description Axis label default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {
        stroke: "#999",
        lineWidth: 1
      }
    },
    /**
     * @description Split line configuration
     * @type {Object}
     */
    splitLine: {
      /**
       * @description Whether to display split line
       * @type {Boolean}
       * @default show = true
       */
      show: !0,
      /**
       * @description Line color (Hex|rgb|rgba), will cover style.stroke
       * @type {Array}
       * @default color = []
       */
      color: [],
      /**
       * @description Split line default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {
        stroke: "#d4d4d4",
        lineWidth: 1
      }
    },
    /**
     * @description Split area configuration
     * @type {Object}
     */
    splitArea: {
      /**
       * @description Whether to display split area
       * @type {Boolean}
       * @default show = false
       */
      show: !1,
      /**
       * @description Area color (Hex|rgb|rgba), will cover style.stroke
       * @type {Array}
       * @default color = []
       */
      color: ["#f5f5f5", "#e6e6e6"],
      /**
       * @description Split area default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {}
    },
    /**
     * @description Bar chart render level
     * Priority rendering high level
     * @type {Number}
     * @default rLevel = -10
     */
    rLevel: -10,
    /**
     * @description Radar axis animation curve
     * @type {String}
     * @default animationCurve = 'easeOutCubic'
     */
    animationCurve: "easeOutCubic",
    /**
     * @description Radar axis animation frame
     * @type {Number}
     * @default animationFrame = 50
     */
    animationFrane: 50
  };
  return st.radarAxisConfig = e, st;
}
var ut = {}, ra;
function Kl() {
  if (ra) return ut;
  ra = 1, Object.defineProperty(ut, "__esModule", {
    value: !0
  }), ut.radarConfig = void 0;
  var e = {
    /**
     * @description Whether to display this radar
     * @type {Boolean}
     * @default show = true
     */
    show: !0,
    /**
     * @description Legend name
     * @type {String}
     * @default name = ''
     */
    name: "",
    /**
     * @description Radar chart data
     * @type {Array}
     * @default data = []
     * @example data = [100, 200, 300]
     */
    data: [],
    /**
     * @description Radar default style configuration
     * @type {Object}
     * @default style = {Configuration Of Class Style}
     */
    radarStyle: {
      lineWidth: 1
    },
    /**
     * @description Radar point configuration
     * @type {Object}
     */
    point: {
      /**
       * @description Whether to display radar point
       * @type {Boolean}
       * @default show = true
       */
      show: !0,
      /**
       * @description Point radius
       * @type {Number}
       * @default radius = 2
       */
      radius: 2,
      /**
       * @description Radar point default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {
        fill: "#fff"
      }
    },
    /**
     * @description Radar label configuration
     * @type {Object}
     */
    label: {
      /**
       * @description Whether to display radar label
       * @type {Boolean}
       * @default show = true
       */
      show: !0,
      /**
       * @description Label position offset
       * @type {Array}
       * @default offset = [0, 0]
       */
      offset: [0, 0],
      /**
       * @description Label gap between label and radar
       * @type {Number}
       * @default labelGap = 5
       */
      labelGap: 5,
      /**
       * @description Label formatter
       * @type {String|Function}
       * @default formatter = null
       * @example formatter = 'Score-{value}'
       * @example formatter = (label) => (label)
       */
      formatter: null,
      /**
       * @description Radar label default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {
        fontSize: 10
      }
    },
    /**
     * @description Radar chart render level
     * Priority rendering high level
     * @type {Number}
     * @default rLevel = 10
     */
    rLevel: 10,
    /**
     * @description Radar animation curve
     * @type {String}
     * @default animationCurve = 'easeOutCubic'
     */
    animationCurve: "easeOutCubic",
    /**
     * @description Radar animation frame
     * @type {Number}
     * @default animationFrame = 50
     */
    animationFrane: 50
  };
  return ut.radarConfig = e, ut;
}
var ct = {}, na;
function Ta() {
  if (na) return ct;
  na = 1, Object.defineProperty(ct, "__esModule", {
    value: !0
  }), ct.gaugeConfig = void 0;
  var e = {
    /**
     * @description Whether to display this gauge
     * @type {Boolean}
     * @default show = true
     */
    show: !0,
    /**
     * @description Legend name
     * @type {String}
     * @default name = ''
     */
    name: "",
    /**
     * @description Radius of gauge
     * @type {String|Number}
     * @default radius = '60%'
     * @example radius = '60%' | 100
     */
    radius: "60%",
    /**
     * @description Center point of gauge
     * @type {Array}
     * @default center = ['50%','50%']
     * @example center = ['50%','50%'] | [100, 100]
     */
    center: ["50%", "50%"],
    /**
     * @description Gauge start angle
     * @type {Number}
     * @default startAngle = -(Math.PI / 4) * 5
     * @example startAngle = -Math.PI
     */
    startAngle: -(Math.PI / 4) * 5,
    /**
     * @description Gauge end angle
     * @type {Number}
     * @default endAngle = Math.PI / 4
     * @example endAngle = 0
     */
    endAngle: Math.PI / 4,
    /**
     * @description Gauge min value
     * @type {Number}
     * @default min = 0
     */
    min: 0,
    /**
     * @description Gauge max value
     * @type {Number}
     * @default max = 100
     */
    max: 100,
    /**
     * @description Gauge split number
     * @type {Number}
     * @default splitNum = 5
     */
    splitNum: 5,
    /**
     * @description Gauge arc line width
     * @type {Number}
     * @default arcLineWidth = 15
     */
    arcLineWidth: 15,
    /**
     * @description Gauge chart data
     * @type {Array}
     * @default data = []
     */
    data: [],
    /**
     * @description Data item arc default style configuration
     * @type {Object}
     * @default dataItemStyle = {Configuration Of Class Style}
     */
    dataItemStyle: {},
    /**
     * @description Axis tick configuration
     * @type {Object}
     */
    axisTick: {
      /**
       * @description Whether to display axis tick
       * @type {Boolean}
       * @default show = true
       */
      show: !0,
      /**
       * @description Axis tick length
       * @type {Number}
       * @default tickLength = 6
       */
      tickLength: 6,
      /**
       * @description Axis tick default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {
        stroke: "#999",
        lineWidth: 1
      }
    },
    /**
     * @description Axis label configuration
     * @type {Object}
     */
    axisLabel: {
      /**
       * @description Whether to display axis label
       * @type {Boolean}
       * @default show = true
       */
      show: !0,
      /**
       * @description Axis label data (Can be calculated automatically)
       * @type {Array}
       * @default data = [Number...]
       */
      data: [],
      /**
       * @description Axis label formatter
       * @type {String|Function}
       * @default formatter = null
       * @example formatter = '{value}%'
       * @example formatter = (labelItem) => (labelItem.value)
       */
      formatter: null,
      /**
       * @description Axis label gap between label and axis tick
       * @type {String|Function}
       * @default labelGap = 5
       */
      labelGap: 5,
      /**
       * @description Axis label default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {}
    },
    /**
     * @description Gauge pointer configuration
     * @type {Object}
     */
    pointer: {
      /**
       * @description Whether to display pointer
       * @type {Boolean}
       * @default show = true
       */
      show: !0,
      /**
       * @description Pointer value index of data
       * @type {Number}
       * @default valueIndex = 0 (pointer.value = data[0].value)
       */
      valueIndex: 0,
      /**
       * @description Pointer default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {
        scale: [1, 1],
        fill: "#fb7293"
      }
    },
    /**
     * @description Data item arc detail configuration
     * @type {Object}
     */
    details: {
      /**
       * @description Whether to display details
       * @type {Boolean}
       * @default show = false
       */
      show: !1,
      /**
       * @description Details formatter
       * @type {String|Function}
       * @default formatter = null
       * @example formatter = '{value}%'
       * @example formatter = '{name}%'
       * @example formatter = (dataItem) => (dataItem.value)
       */
      formatter: null,
      /**
       * @description Details position offset
       * @type {Array}
       * @default offset = [0, 0]
       * @example offset = [10, 10]
       */
      offset: [0, 0],
      /**
       * @description Value fractional precision
       * @type {Number}
       * @default valueToFixed = 0
       */
      valueToFixed: 0,
      /**
       * @description Details position
       * @type {String}
       * @default position = 'center'
       * @example position = 'start' | 'center' | 'end'
       */
      position: "center",
      /**
       * @description Details default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {
        fontSize: 20,
        fontWeight: "bold",
        textAlign: "center",
        textBaseline: "middle"
      }
    },
    /**
     * @description Gauge background arc configuration
     * @type {Object}
     */
    backgroundArc: {
      /**
       * @description Whether to display background arc
       * @type {Boolean}
       * @default show = true
       */
      show: !0,
      /**
       * @description Background arc default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {
        stroke: "#e0e0e0"
      }
    },
    /**
     * @description Gauge chart render level
     * Priority rendering high level
     * @type {Number}
     * @default rLevel = 10
     */
    rLevel: 10,
    /**
     * @description Gauge animation curve
     * @type {String}
     * @default animationCurve = 'easeOutCubic'
     */
    animationCurve: "easeOutCubic",
    /**
     * @description Gauge animation frame
     * @type {Number}
     * @default animationFrame = 50
     */
    animationFrame: 50
  };
  return ct.gaugeConfig = e, ct;
}
var ft = {}, aa;
function Jl() {
  if (aa) return ft;
  aa = 1, Object.defineProperty(ft, "__esModule", {
    value: !0
  }), ft.legendConfig = void 0;
  var e = {
    /**
     * @description Whether to display legend
     * @type {Boolean}
     * @default show = true
     */
    show: !0,
    /**
     * @description Legend orient
     * @type {String}
     * @default orient = 'horizontal'
     * @example orient = 'horizontal' | 'vertical'
     */
    orient: "horizontal",
    /**
     * @description Legend left
     * @type {String|Number}
     * @default left = 'auto'
     * @example left = 'auto' | '10%' | 10
     */
    left: "auto",
    /**
     * @description Legend right
     * @type {String|Number}
     * @default right = 'auto'
     * @example right = 'auto' | '10%' | 10
     */
    right: "auto",
    /**
     * @description Legend top
     * @type {String|Number}
     * @default top = 'auto'
     * @example top = 'auto' | '10%' | 10
     */
    top: "auto",
    /**
     * @description Legend bottom
     * @type {String|Number}
     * @default bottom = 'auto'
     * @example bottom = 'auto' | '10%' | 10
     */
    bottom: "auto",
    /**
     * @description Legend item gap
     * @type {Number}
     * @default itemGap = 10
     */
    itemGap: 10,
    /**
     * @description Icon width
     * @type {Number}
     * @default iconWidth = 25
     */
    iconWidth: 25,
    /**
     * @description Icon height
     * @type {Number}
     * @default iconHeight = 10
     */
    iconHeight: 10,
    /**
     * @description Whether legend is optional
     * @type {Boolean}
     * @default selectAble = true
     */
    selectAble: !0,
    /**
     * @description Legend data
     * @type {Array}
     * @default data = []
     */
    data: [],
    /**
     * @description Legend text default style configuration
     * @type {Object}
     * @default style = {Configuration Of Class Style}
     */
    textStyle: {
      fontFamily: "Arial",
      fontSize: 13,
      fill: "#000"
    },
    /**
     * @description Legend icon default style configuration
     * @type {Object}
     * @default style = {Configuration Of Class Style}
     */
    iconStyle: {},
    /**
     * @description Legend text unselected default style configuration
     * @type {Object}
     * @default style = {Configuration Of Class Style}
     */
    textUnselectedStyle: {
      fontFamily: "Arial",
      fontSize: 13,
      fill: "#999"
    },
    /**
     * @description Legend icon unselected default style configuration
     * @type {Object}
     * @default style = {Configuration Of Class Style}
     */
    iconUnselectedStyle: {
      fill: "#999"
    },
    /**
     * @description Legend render level
     * Priority rendering high level
     * @type {Number}
     * @default rLevel = 20
     */
    rLevel: 20,
    /**
     * @description Legend animation curve
     * @type {String}
     * @default animationCurve = 'easeOutCubic'
     */
    animationCurve: "easeOutCubic",
    /**
     * @description Legend animation frame
     * @type {Number}
     * @default animationFrame = 50
     */
    animationFrame: 50
  };
  return ft.legendConfig = e, ft;
}
var ia;
function Ue() {
  return ia || (ia = 1, function(e) {
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.changeDefaultConfig = d, Object.defineProperty(e, "colorConfig", {
      enumerable: !0,
      get: function() {
        return r.colorConfig;
      }
    }), Object.defineProperty(e, "gridConfig", {
      enumerable: !0,
      get: function() {
        return a.gridConfig;
      }
    }), Object.defineProperty(e, "xAxisConfig", {
      enumerable: !0,
      get: function() {
        return t.xAxisConfig;
      }
    }), Object.defineProperty(e, "yAxisConfig", {
      enumerable: !0,
      get: function() {
        return t.yAxisConfig;
      }
    }), Object.defineProperty(e, "titleConfig", {
      enumerable: !0,
      get: function() {
        return n.titleConfig;
      }
    }), Object.defineProperty(e, "lineConfig", {
      enumerable: !0,
      get: function() {
        return l.lineConfig;
      }
    }), Object.defineProperty(e, "barConfig", {
      enumerable: !0,
      get: function() {
        return o.barConfig;
      }
    }), Object.defineProperty(e, "pieConfig", {
      enumerable: !0,
      get: function() {
        return _.pieConfig;
      }
    }), Object.defineProperty(e, "radarAxisConfig", {
      enumerable: !0,
      get: function() {
        return x.radarAxisConfig;
      }
    }), Object.defineProperty(e, "radarConfig", {
      enumerable: !0,
      get: function() {
        return z.radarConfig;
      }
    }), Object.defineProperty(e, "gaugeConfig", {
      enumerable: !0,
      get: function() {
        return E.gaugeConfig;
      }
    }), Object.defineProperty(e, "legendConfig", {
      enumerable: !0,
      get: function() {
        return U.legendConfig;
      }
    }), e.keys = void 0;
    var r = Il(), a = Hl(), t = Vl(), n = Ul(), l = Xl(), o = Ql(), _ = Da(), x = Yl(), z = Kl(), E = Ta(), U = Jl(), T = ze(), L = {
      colorConfig: r.colorConfig,
      gridConfig: a.gridConfig,
      xAxisConfig: t.xAxisConfig,
      yAxisConfig: t.yAxisConfig,
      titleConfig: n.titleConfig,
      lineConfig: l.lineConfig,
      barConfig: o.barConfig,
      pieConfig: _.pieConfig,
      radarAxisConfig: x.radarAxisConfig,
      radarConfig: z.radarConfig,
      gaugeConfig: E.gaugeConfig,
      legendConfig: U.legendConfig
    };
    function d(W, q) {
      if (!L["".concat(W, "Config")]) {
        console.warn("Change default config Error - Invalid key!");
        return;
      }
      (0, T.deepMerge)(L["".concat(W, "Config")], q);
    }
    var B = ["color", "title", "legend", "xAxis", "yAxis", "grid", "radarAxis", "line", "bar", "pie", "radar", "gauge"];
    e.keys = B;
  }(Lr)), Lr;
}
var oa;
function Zl() {
  if (oa) return Ct;
  oa = 1, Object.defineProperty(Ct, "__esModule", {
    value: !0
  }), Ct.mergeColor = t;
  var e = Ue(), r = Fe(), a = ze();
  function t(n) {
    var l = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, o = (0, r.deepClone)(e.colorConfig, !0), _ = l.color, x = l.series;
    if (x || (x = []), _ || (_ = []), l.color = _ = (0, a.deepMerge)(o, _), !!x.length) {
      var z = _.length;
      x.forEach(function(L, d) {
        L.color || (L.color = _[d % z]);
      });
      var E = x.filter(function(L) {
        var d = L.type;
        return d === "pie";
      });
      E.forEach(function(L) {
        return L.data.forEach(function(d, B) {
          return d.color = _[B % z];
        });
      });
      var U = x.filter(function(L) {
        var d = L.type;
        return d === "gauge";
      });
      U.forEach(function(L) {
        return L.data.forEach(function(d, B) {
          return d.color = _[B % z];
        });
      });
      var T = x.filter(function(L) {
        var d = L.type, B = L.independentColor;
        return d === "bar" && B;
      });
      T.forEach(function(L) {
        L.independentColors || (L.independentColors = _);
      });
    }
  }
  return Ct;
}
var $t = {}, tt = {}, la;
function Xe() {
  if (la) return tt;
  la = 1;
  var e = we;
  Object.defineProperty(tt, "__esModule", {
    value: !0
  }), tt.doUpdate = E, tt.Updater = void 0;
  var r = e(Te()), a = e(Be()), t = e(mt()), n = function U(T, L) {
    (0, t.default)(this, U);
    var d = T.chart, B = T.key, W = T.getGraphConfig;
    if (typeof W != "function") {
      console.warn("Updater need function getGraphConfig!");
      return;
    }
    d[B] || (this.graphs = d[B] = []), Object.assign(this, T), this.update(L);
  };
  tt.Updater = n, n.prototype.update = function(U) {
    var T = this, L = this.graphs, d = this.beforeUpdate;
    if (l(this, U), !!U.length) {
      var B = (0, a.default)(d);
      U.forEach(function(W, q) {
        B === "function" && d(L, W, q, T);
        var G = L[q];
        G ? o(G, W, q, T) : x(L, W, q, T);
      });
    }
  };
  function l(U, T) {
    var L = U.graphs, d = U.chart.render, B = L.length, W = T.length;
    if (B > W) {
      var q = L.splice(W);
      q.forEach(function(G) {
        return G.forEach(function(m) {
          return d.delGraph(m);
        });
      });
    }
  }
  function o(U, T, L, d) {
    var B = d.getGraphConfig, W = d.chart.render, q = d.beforeChange, G = B(T, d);
    _(U, G, W), U.forEach(function(m, y) {
      var f = G[y];
      typeof q == "function" && q(m, f), z(m, f);
    });
  }
  function _(U, T, L) {
    var d = U.length, B = T.length;
    if (B > d) {
      var W = U.slice(-1)[0], q = B - d, G = new Array(q).fill(0).map(function(y) {
        return L.clone(W);
      });
      U.push.apply(U, (0, r.default)(G));
    } else if (B < d) {
      var m = U.splice(B);
      m.forEach(function(y) {
        return L.delGraph(y);
      });
    }
  }
  function x(U, T, L, d) {
    var B = d.getGraphConfig, W = d.getStartGraphConfig, q = d.chart, G = q.render, m = null;
    typeof W == "function" && (m = W(T, d));
    var y = B(T, d);
    if (y.length) {
      m ? (U[L] = m.map(function(D) {
        return G.add(D);
      }), U[L].forEach(function(D, k) {
        var C = y[k];
        z(D, C);
      })) : U[L] = y.map(function(D) {
        return G.add(D);
      });
      var f = d.afterAddGraph;
      typeof f == "function" && f(U[L]);
    }
  }
  function z(U, T) {
    var L = Object.keys(T);
    L.forEach(function(d) {
      d === "shape" || d === "style" ? U.animation(d, T[d], !0) : U[d] = T[d];
    });
  }
  function E() {
    var U = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, T = U.chart, L = U.series, d = U.key, B = U.getGraphConfig, W = U.getStartGraphConfig, q = U.beforeChange, G = U.beforeUpdate, m = U.afterAddGraph;
    T[d] ? T[d].update(L) : T[d] = new n({
      chart: T,
      key: d,
      getGraphConfig: B,
      getStartGraphConfig: W,
      beforeChange: q,
      beforeUpdate: G,
      afterAddGraph: m
    }, L);
  }
  return tt;
}
var sa;
function es() {
  if (sa) return $t;
  sa = 1;
  var e = we;
  Object.defineProperty($t, "__esModule", {
    value: !0
  }), $t.title = o;
  var r = e(Ne()), a = Xe(), t = Fe(), n = Ue(), l = ze();
  function o(E) {
    var U = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, T = [];
    U.title && (T[0] = (0, l.deepMerge)((0, t.deepClone)(n.titleConfig, !0), U.title)), (0, a.doUpdate)({
      chart: E,
      series: T,
      key: "title",
      getGraphConfig: _
    });
  }
  function _(E, U) {
    var T = n.titleConfig.animationCurve, L = n.titleConfig.animationFrame, d = n.titleConfig.rLevel, B = x(E, U), W = z(E);
    return [{
      name: "text",
      index: d,
      visible: E.show,
      animationCurve: T,
      animationFrame: L,
      shape: B,
      style: W
    }];
  }
  function x(E, U) {
    var T = E.offset, L = E.text, d = U.chart.gridArea, B = d.x, W = d.y, q = d.w, G = (0, r.default)(T, 2), m = G[0], y = G[1];
    return {
      content: L,
      position: [B + q / 2 + m, W + y]
    };
  }
  function z(E) {
    var U = E.style;
    return U;
  }
  return $t;
}
var _t = {}, ua;
function ts() {
  if (ua) return _t;
  ua = 1;
  var e = we;
  Object.defineProperty(_t, "__esModule", {
    value: !0
  }), _t.grid = z;
  var r = e(Ne()), a = e(Ve()), t = Xe(), n = Fe(), l = Ue(), o = ze();
  function _(d, B) {
    var W = Object.keys(d);
    if (Object.getOwnPropertySymbols) {
      var q = Object.getOwnPropertySymbols(d);
      B && (q = q.filter(function(G) {
        return Object.getOwnPropertyDescriptor(d, G).enumerable;
      })), W.push.apply(W, q);
    }
    return W;
  }
  function x(d) {
    for (var B = 1; B < arguments.length; B++) {
      var W = arguments[B] != null ? arguments[B] : {};
      B % 2 ? _(Object(W), !0).forEach(function(q) {
        (0, a.default)(d, q, W[q]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(d, Object.getOwnPropertyDescriptors(W)) : _(Object(W)).forEach(function(q) {
        Object.defineProperty(d, q, Object.getOwnPropertyDescriptor(W, q));
      });
    }
    return d;
  }
  function z(d) {
    var B = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, W = B.grid;
    W = (0, o.deepMerge)((0, n.deepClone)(l.gridConfig, !0), W || {}), (0, t.doUpdate)({
      chart: d,
      series: [W],
      key: "grid",
      getGraphConfig: E
    });
  }
  function E(d, B) {
    var W = d.animationCurve, q = d.animationFrame, G = d.rLevel, m = U(d, B), y = L(d);
    return B.chart.gridArea = x({}, m), [{
      name: "rect",
      index: G,
      animationCurve: W,
      animationFrame: q,
      shape: m,
      style: y
    }];
  }
  function U(d, B) {
    var W = (0, r.default)(B.chart.render.area, 2), q = W[0], G = W[1], m = T(d.left, q), y = T(d.right, q), f = T(d.top, G), D = T(d.bottom, G), k = q - m - y, C = G - f - D;
    return {
      x: m,
      y: f,
      w: k,
      h: C
    };
  }
  function T(d, B) {
    return typeof d == "number" ? d : typeof d != "string" ? 0 : B * parseInt(d) / 100;
  }
  function L(d) {
    var B = d.style;
    return B;
  }
  return _t;
}
var Pt = {}, ca;
function rs() {
  if (ca) return Pt;
  ca = 1;
  var e = we;
  Object.defineProperty(Pt, "__esModule", {
    value: !0
  }), Pt.axis = d;
  var r = e(Be()), a = e(Ne()), t = e(Ve()), n = e(Te()), l = Xe(), o = Ue(), _ = ze(), x = Fe();
  function z(s, b) {
    var P = Object.keys(s);
    if (Object.getOwnPropertySymbols) {
      var R = Object.getOwnPropertySymbols(s);
      b && (R = R.filter(function(K) {
        return Object.getOwnPropertyDescriptor(s, K).enumerable;
      })), P.push.apply(P, R);
    }
    return P;
  }
  function E(s) {
    for (var b = 1; b < arguments.length; b++) {
      var P = arguments[b] != null ? arguments[b] : {};
      b % 2 ? z(Object(P), !0).forEach(function(R) {
        (0, t.default)(s, R, P[R]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(s, Object.getOwnPropertyDescriptors(P)) : z(Object(P)).forEach(function(R) {
        Object.defineProperty(s, R, Object.getOwnPropertyDescriptor(P, R));
      });
    }
    return s;
  }
  var U = {
    xAxisConfig: o.xAxisConfig,
    yAxisConfig: o.yAxisConfig
  }, T = Math.abs, L = Math.pow;
  function d(s) {
    var b = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, P = b.xAxis, R = b.yAxis, K = b.series, ne = [];
    P && R && K && (ne = B(P, R), ne = W(ne), ne = ne.filter(function(ue) {
      var de = ue.show;
      return de;
    }), ne = q(ne), ne = G(ne, K), ne = X(ne), ne = ee(ne, s), ne = u(ne), ne = g(ne), ne = v(ne, s)), (0, l.doUpdate)({
      chart: s,
      series: ne,
      key: "axisLine",
      getGraphConfig: S
    }), (0, l.doUpdate)({
      chart: s,
      series: ne,
      key: "axisTick",
      getGraphConfig: te
    }), (0, l.doUpdate)({
      chart: s,
      series: ne,
      key: "axisLabel",
      getGraphConfig: Y
    }), (0, l.doUpdate)({
      chart: s,
      series: ne,
      key: "axisName",
      getGraphConfig: w
    }), (0, l.doUpdate)({
      chart: s,
      series: ne,
      key: "splitLine",
      getGraphConfig: re
    }), s.axisData = ne;
  }
  function B(s, b) {
    var P = [], R = [];
    if (s instanceof Array) {
      var K;
      (K = P).push.apply(K, (0, n.default)(s));
    } else
      P.push(s);
    if (b instanceof Array) {
      var ne;
      (ne = R).push.apply(ne, (0, n.default)(b));
    } else
      R.push(b);
    return P.splice(2), R.splice(2), P = P.map(function(ue, de) {
      return E(E({}, ue), {}, {
        index: de,
        axis: "x"
      });
    }), R = R.map(function(ue, de) {
      return E(E({}, ue), {}, {
        index: de,
        axis: "y"
      });
    }), [].concat((0, n.default)(P), (0, n.default)(R));
  }
  function W(s) {
    var b = s.filter(function(R) {
      var K = R.axis;
      return K === "x";
    }), P = s.filter(function(R) {
      var K = R.axis;
      return K === "y";
    });
    return b = b.map(function(R) {
      return (0, _.deepMerge)((0, x.deepClone)(o.xAxisConfig), R);
    }), P = P.map(function(R) {
      return (0, _.deepMerge)((0, x.deepClone)(o.yAxisConfig), R);
    }), [].concat((0, n.default)(b), (0, n.default)(P));
  }
  function q(s) {
    var b = s.filter(function(R) {
      var K = R.data;
      return K === "value";
    }), P = s.filter(function(R) {
      var K = R.data;
      return K !== "value";
    });
    return b.forEach(function(R) {
      typeof R.boundaryGap != "boolean" && (R.boundaryGap = !1);
    }), P.forEach(function(R) {
      typeof R.boundaryGap != "boolean" && (R.boundaryGap = !0);
    }), [].concat((0, n.default)(b), (0, n.default)(P));
  }
  function G(s, b) {
    var P = s.filter(function(K) {
      var ne = K.data;
      return ne === "value";
    }), R = s.filter(function(K) {
      var ne = K.data;
      return ne instanceof Array;
    });
    return P = m(P, b), R = p(R), [].concat((0, n.default)(P), (0, n.default)(R));
  }
  function m(s, b) {
    return s.map(function(P) {
      var R = y(P, b), K = k(P, R), ne = (0, a.default)(K, 2), ue = ne[0], de = ne[1], he = V(ue, de, P), pe = P.axisLabel.formatter, ge = [];
      return ue < 0 && de > 0 ? ge = c(ue, de, he) : ge = M(ue, de, he), ge = ge.map(function(ye) {
        return parseFloat(ye.toFixed(2));
      }), E(E({}, P), {}, {
        maxValue: ge.slice(-1)[0],
        minValue: ge[0],
        label: A(ge, pe)
      });
    });
  }
  function y(s, b) {
    if (b = b.filter(function(ue) {
      var de = ue.show, he = ue.type;
      return !(de === !1 || he === "pie");
    }), b.length === 0) return [0, 0];
    var P = s.index, R = s.axis;
    b = D(b);
    var K = R + "Axis", ne = b.filter(function(ue) {
      return ue[K] === P;
    });
    return ne.length || (ne = b), f(ne);
  }
  function f(s) {
    if (s) {
      var b = Math.min.apply(Math, (0, n.default)(s.map(function(R) {
        var K = R.data;
        return Math.min.apply(Math, (0, n.default)((0, _.filterNonNumber)(K)));
      }))), P = Math.max.apply(Math, (0, n.default)(s.map(function(R) {
        var K = R.data;
        return Math.max.apply(Math, (0, n.default)((0, _.filterNonNumber)(K)));
      })));
      return [b, P];
    }
  }
  function D(s) {
    var b = (0, x.deepClone)(s, !0);
    return s.forEach(function(P, R) {
      var K = (0, _.mergeSameStackData)(P, s);
      b[R].data = K;
    }), b;
  }
  function k(s, b) {
    var P = s.min, R = s.max, K = s.axis, ne = (0, a.default)(b, 2), ue = ne[0], de = ne[1], he = (0, r.default)(P), pe = (0, r.default)(R);
    if ($(P) || (P = U[K + "AxisConfig"].min, he = "string"), $(R) || (R = U[K + "AxisConfig"].max, pe = "string"), he === "string") {
      P = parseInt(ue - T(ue * parseFloat(P) / 100));
      var ge = C(P);
      P = parseFloat((P / ge - 0.1).toFixed(1)) * ge;
    }
    if (pe === "string") {
      R = parseInt(de + T(de * parseFloat(R) / 100));
      var ye = C(R);
      R = parseFloat((R / ye + 0.1).toFixed(1)) * ye;
    }
    return [P, R];
  }
  function C(s) {
    var b = T(s).toString(), P = b.length, R = b.replace(/0*$/g, "").indexOf("0"), K = P - 1;
    return R !== -1 && (K -= R), L(10, K);
  }
  function $(s) {
    var b = (0, r.default)(s), P = b === "string" && /^\d+%$/.test(s), R = b === "number";
    return P || R;
  }
  function c(s, b, P) {
    var R = [], K = [], ne = 0, ue = 0;
    do
      R.push(ne -= P);
    while (ne > s);
    do
      K.push(ue += P);
    while (ue < b);
    return [].concat((0, n.default)(R.reverse()), [0], (0, n.default)(K));
  }
  function M(s, b, P) {
    var R = [s], K = s;
    do
      R.push(K += P);
    while (K < b);
    return R;
  }
  function A(s, b) {
    return b && (typeof b == "string" && (s = s.map(function(P) {
      return b.replace("{value}", P);
    })), typeof b == "function" && (s = s.map(function(P, R) {
      return b({
        value: P,
        index: R
      });
    }))), s;
  }
  function p(s) {
    return s.map(function(b) {
      var P = b.data, R = b.axisLabel.formatter;
      return E(E({}, b), {}, {
        label: A(P, R)
      });
    });
  }
  function V(s, b, P) {
    var R = P.interval, K = P.minInterval, ne = P.maxInterval, ue = P.splitNumber, de = P.axis, he = U[de + "AxisConfig"];
    if (typeof R != "number" && (R = he.interval), typeof K != "number" && (K = he.minInterval), typeof ne != "number" && (ne = he.maxInterval), typeof ue != "number" && (ue = he.splitNumber), typeof R == "number") return R;
    var pe = parseInt((b - s) / (ue - 1));
    return pe.toString().length > 1 && (pe = parseInt(pe.toString().replace(/\d$/, "0"))), pe === 0 && (pe = 1), typeof K == "number" && pe < K ? K : typeof ne == "number" && pe > ne ? ne : pe;
  }
  function X(s) {
    var b = s.filter(function(R) {
      var K = R.axis;
      return K === "x";
    }), P = s.filter(function(R) {
      var K = R.axis;
      return K === "y";
    });
    return b[0] && !b[0].position && (b[0].position = o.xAxisConfig.position), b[1] && !b[1].position && (b[1].position = b[0].position === "bottom" ? "top" : "bottom"), P[0] && !P[0].position && (P[0].position = o.yAxisConfig.position), P[1] && !P[1].position && (P[1].position = P[0].position === "left" ? "right" : "left"), [].concat((0, n.default)(b), (0, n.default)(P));
  }
  function ee(s, b) {
    var P = b.gridArea, R = P.x, K = P.y, ne = P.w, ue = P.h;
    return s = s.map(function(de) {
      var he = de.position, pe = [];
      return he === "left" ? pe = [[R, K], [R, K + ue]].reverse() : he === "right" ? pe = [[R + ne, K], [R + ne, K + ue]].reverse() : he === "top" ? pe = [[R, K], [R + ne, K]] : he === "bottom" && (pe = [[R, K + ue], [R + ne, K + ue]]), E(E({}, de), {}, {
        linePosition: pe
      });
    }), s;
  }
  function u(s, b) {
    return s.map(function(P) {
      var R = P.axis, K = P.linePosition, ne = P.position, ue = P.label, de = P.boundaryGap;
      typeof de != "boolean" && (de = U[R + "AxisConfig"].boundaryGap);
      var he = ue.length, pe = (0, a.default)(K, 2), ge = (0, a.default)(pe[0], 2), ye = ge[0], Oe = ge[1], Qe = (0, a.default)(pe[1], 2), Je = Qe[0], Ye = Qe[1], Na = R === "x" ? Je - ye : Ye - Oe, bt = Na / (de ? he : he - 1), dn = new Array(he).fill(0).map(function(af, xt) {
        return R === "x" ? [ye + bt * (de ? xt + 0.5 : xt), Oe] : [ye, Oe + bt * (de ? xt + 0.5 : xt)];
      }), Wa = I(R, de, ne, dn, bt);
      return E(E({}, P), {}, {
        tickPosition: dn,
        tickLinePosition: Wa,
        tickGap: bt
      });
    });
  }
  function I(s, b, P, R, K) {
    var ne = s === "x" ? 1 : 0, ue = 5;
    s === "x" && P === "top" && (ue = -5), s === "y" && P === "left" && (ue = -5);
    var de = R.map(function(he) {
      var pe = (0, x.deepClone)(he);
      return pe[ne] += ue, [(0, x.deepClone)(he), pe];
    });
    return b && (ne = s === "x" ? 0 : 1, ue = K / 2, de.forEach(function(he) {
      var pe = (0, a.default)(he, 2), ge = pe[0], ye = pe[1];
      ge[ne] += ue, ye[ne] += ue;
    })), de;
  }
  function g(s, b) {
    return s.map(function(P) {
      var R = P.nameGap, K = P.nameLocation, ne = P.position, ue = P.linePosition, de = (0, a.default)(ue, 2), he = de[0], pe = de[1], ge = (0, n.default)(he);
      K === "end" && (ge = (0, n.default)(pe)), K === "center" && (ge[0] = (he[0] + pe[0]) / 2, ge[1] = (he[1] + pe[1]) / 2);
      var ye = 0;
      ne === "top" && K === "center" && (ye = 1), ne === "bottom" && K === "center" && (ye = 1), ne === "left" && K !== "center" && (ye = 1), ne === "right" && K !== "center" && (ye = 1);
      var Oe = R;
      return ne === "top" && K !== "end" && (Oe *= -1), ne === "left" && K !== "start" && (Oe *= -1), ne === "bottom" && K === "start" && (Oe *= -1), ne === "right" && K === "end" && (Oe *= -1), ge[ye] += Oe, E(E({}, P), {}, {
        namePosition: ge
      });
    });
  }
  function v(s, b) {
    var P = b.gridArea, R = P.w, K = P.h;
    return s.map(function(ne) {
      var ue = ne.tickLinePosition, de = ne.position, he = ne.boundaryGap, pe = 0, ge = R;
      (de === "top" || de === "bottom") && (pe = 1), (de === "top" || de === "bottom") && (ge = K), (de === "right" || de === "bottom") && (ge *= -1);
      var ye = ue.map(function(Oe) {
        var Qe = (0, a.default)(Oe, 1), Je = Qe[0], Ye = (0, n.default)(Je);
        return Ye[pe] += ge, [(0, n.default)(Je), Ye];
      });
      return he || ye.shift(), E(E({}, ne), {}, {
        splitLinePosition: ye
      });
    });
  }
  function S(s) {
    var b = s.animationCurve, P = s.animationFrame, R = s.rLevel;
    return [{
      name: "polyline",
      index: R,
      visible: s.axisLine.show,
      animationCurve: b,
      animationFrame: P,
      shape: J(s),
      style: Q(s)
    }];
  }
  function J(s) {
    var b = s.linePosition;
    return {
      points: b
    };
  }
  function Q(s) {
    return s.axisLine.style;
  }
  function te(s) {
    var b = s.animationCurve, P = s.animationFrame, R = s.rLevel, K = oe(s), ne = ve(s);
    return K.map(function(ue) {
      return {
        name: "polyline",
        index: R,
        visible: s.axisTick.show,
        animationCurve: b,
        animationFrame: P,
        shape: ue,
        style: ne
      };
    });
  }
  function oe(s) {
    var b = s.tickLinePosition;
    return b.map(function(P) {
      return {
        points: P
      };
    });
  }
  function ve(s) {
    return s.axisTick.style;
  }
  function Y(s) {
    var b = s.animationCurve, P = s.animationFrame, R = s.rLevel, K = ie(s), ne = fe(s, K);
    return K.map(function(ue, de) {
      return {
        name: "text",
        index: R,
        visible: s.axisLabel.show,
        animationCurve: b,
        animationFrame: P,
        shape: ue,
        style: ne[de],
        setGraphCenter: function() {
        }
      };
    });
  }
  function ie(s) {
    var b = s.label, P = s.tickPosition, R = s.position;
    return P.map(function(K, ne) {
      return {
        position: ce(K, R),
        content: b[ne].toString()
      };
    });
  }
  function ce(s, b) {
    var P = 0, R = 10;
    return (b === "top" || b === "bottom") && (P = 1), (b === "top" || b === "left") && (R = -10), s = (0, x.deepClone)(s), s[P] += R, s;
  }
  function fe(s, b) {
    var P = s.position, R = s.axisLabel.style, K = N(P);
    R = (0, _.deepMerge)(K, R);
    var ne = b.map(function(ue) {
      var de = ue.position;
      return E(E({}, R), {}, {
        graphCenter: de
      });
    });
    return ne;
  }
  function N(s) {
    if (s === "left") return {
      textAlign: "right",
      textBaseline: "middle"
    };
    if (s === "right") return {
      textAlign: "left",
      textBaseline: "middle"
    };
    if (s === "top") return {
      textAlign: "center",
      textBaseline: "bottom"
    };
    if (s === "bottom") return {
      textAlign: "center",
      textBaseline: "top"
    };
  }
  function w(s) {
    var b = s.animationCurve, P = s.animationFrame, R = s.rLevel;
    return [{
      name: "text",
      index: R,
      animationCurve: b,
      animationFrame: P,
      shape: O(s),
      style: F(s)
    }];
  }
  function O(s) {
    var b = s.name, P = s.namePosition;
    return {
      content: b,
      position: P
    };
  }
  function F(s) {
    var b = s.nameLocation, P = s.position, R = s.nameTextStyle, K = H(P, b);
    return (0, _.deepMerge)(K, R);
  }
  function H(s, b) {
    if (s === "top" && b === "start" || s === "bottom" && b === "start" || s === "left" && b === "center") return {
      textAlign: "right",
      textBaseline: "middle"
    };
    if (s === "top" && b === "end" || s === "bottom" && b === "end" || s === "right" && b === "center") return {
      textAlign: "left",
      textBaseline: "middle"
    };
    if (s === "top" && b === "center" || s === "left" && b === "end" || s === "right" && b === "end") return {
      textAlign: "center",
      textBaseline: "bottom"
    };
    if (s === "bottom" && b === "center" || s === "left" && b === "start" || s === "right" && b === "start") return {
      textAlign: "center",
      textBaseline: "top"
    };
  }
  function re(s) {
    var b = s.animationCurve, P = s.animationFrame, R = s.rLevel, K = h(s), ne = j(s);
    return K.map(function(ue) {
      return {
        name: "polyline",
        index: R,
        visible: s.splitLine.show,
        animationCurve: b,
        animationFrame: P,
        shape: ue,
        style: ne
      };
    });
  }
  function h(s) {
    var b = s.splitLinePosition;
    return b.map(function(P) {
      return {
        points: P
      };
    });
  }
  function j(s) {
    return s.splitLine.style;
  }
  return Pt;
}
var wt = {}, fa;
function ns() {
  if (fa) return wt;
  fa = 1;
  var e = we;
  Object.defineProperty(wt, "__esModule", {
    value: !0
  }), wt.line = L;
  var r = e(Be()), a = e(Ne()), t = e(Te()), n = e(Ve()), l = Xe(), o = Ue(), _ = e(cn()), x = ze();
  function z(Y, ie) {
    var ce = Object.keys(Y);
    if (Object.getOwnPropertySymbols) {
      var fe = Object.getOwnPropertySymbols(Y);
      ie && (fe = fe.filter(function(N) {
        return Object.getOwnPropertyDescriptor(Y, N).enumerable;
      })), ce.push.apply(ce, fe);
    }
    return ce;
  }
  function E(Y) {
    for (var ie = 1; ie < arguments.length; ie++) {
      var ce = arguments[ie] != null ? arguments[ie] : {};
      ie % 2 ? z(Object(ce), !0).forEach(function(fe) {
        (0, n.default)(Y, fe, ce[fe]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(Y, Object.getOwnPropertyDescriptors(ce)) : z(Object(ce)).forEach(function(fe) {
        Object.defineProperty(Y, fe, Object.getOwnPropertyDescriptor(ce, fe));
      });
    }
    return Y;
  }
  var U = _.default.polylineToBezierCurve, T = _.default.getBezierCurveLength;
  function L(Y) {
    var ie = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, ce = ie.xAxis, fe = ie.yAxis, N = ie.series, w = [];
    ce && fe && N && (w = (0, x.initNeedSeries)(N, o.lineConfig, "line"), w = d(w, Y)), (0, l.doUpdate)({
      chart: Y,
      series: w,
      key: "lineArea",
      getGraphConfig: m,
      getStartGraphConfig: C,
      beforeUpdate: $,
      beforeChange: c
    }), (0, l.doUpdate)({
      chart: Y,
      series: w,
      key: "line",
      getGraphConfig: M,
      getStartGraphConfig: X,
      beforeUpdate: $,
      beforeChange: c
    }), (0, l.doUpdate)({
      chart: Y,
      series: w,
      key: "linePoint",
      getGraphConfig: ee,
      getStartGraphConfig: g
    }), (0, l.doUpdate)({
      chart: Y,
      series: w,
      key: "lineLabel",
      getGraphConfig: v
    });
  }
  function d(Y, ie) {
    var ce = ie.axisData;
    return Y.map(function(fe) {
      var N = (0, x.mergeSameStackData)(fe, Y);
      N = B(fe, N);
      var w = W(fe, ce), O = q(N, w), F = G(w);
      return E(E({}, fe), {}, {
        linePosition: O.filter(function(H) {
          return H;
        }),
        lineFillBottomPos: F
      });
    });
  }
  function B(Y, ie) {
    var ce = Y.data;
    return ie.map(function(fe, N) {
      return typeof ce[N] == "number" ? fe : null;
    });
  }
  function W(Y, ie) {
    var ce = Y.xAxisIndex, fe = Y.yAxisIndex, N = ie.find(function(O) {
      var F = O.axis, H = O.index;
      return F === "x" && H === ce;
    }), w = ie.find(function(O) {
      var F = O.axis, H = O.index;
      return F === "y" && H === fe;
    });
    return [N, w];
  }
  function q(Y, ie) {
    var ce = ie.findIndex(function(ne) {
      var ue = ne.data;
      return ue === "value";
    }), fe = ie[ce], N = ie[1 - ce], w = fe.linePosition, O = fe.axis, F = N.tickPosition, H = F.length, re = O === "x" ? 0 : 1, h = w[0][re], j = w[1][re], s = j - h, b = fe.maxValue, P = fe.minValue, R = b - P, K = new Array(H).fill(0).map(function(ne, ue) {
      var de = Y[ue];
      if (typeof de != "number") return null;
      var he = (de - P) / R;
      return R === 0 && (he = 0), he * s + h;
    });
    return K.map(function(ne, ue) {
      if (ue >= H || typeof ne != "number") return null;
      var de = [ne, F[ue][1 - re]];
      return re === 0 || de.reverse(), de;
    });
  }
  function G(Y) {
    var ie = Y.find(function(j) {
      var s = j.data;
      return s === "value";
    }), ce = ie.axis, fe = ie.linePosition, N = ie.minValue, w = ie.maxValue, O = ce === "x" ? 0 : 1, F = fe[0][O];
    if (N < 0 && w > 0) {
      var H = w - N, re = Math.abs(fe[0][O] - fe[1][O]), h = Math.abs(N) / H * re;
      ce === "y" && (h *= -1), F += h;
    }
    return {
      changeIndex: O,
      changeValue: F
    };
  }
  function m(Y) {
    var ie = Y.animationCurve, ce = Y.animationFrame, fe = Y.lineFillBottomPos, N = Y.rLevel;
    return [{
      name: A(Y),
      index: N,
      animationCurve: ie,
      animationFrame: ce,
      visible: Y.lineArea.show,
      lineFillBottomPos: fe,
      shape: y(Y),
      style: f(Y),
      drawed: k
    }];
  }
  function y(Y) {
    var ie = Y.linePosition;
    return {
      points: ie
    };
  }
  function f(Y) {
    var ie = Y.lineArea, ce = Y.color, fe = ie.gradient, N = ie.style, w = [N.fill || ce], O = (0, x.deepMerge)(w, fe);
    O.length === 1 && O.push(O[0]);
    var F = D(Y);
    return N = E(E({}, N), {}, {
      stroke: "rgba(0, 0, 0, 0)"
    }), (0, x.deepMerge)({
      gradientColor: O,
      gradientParams: F,
      gradientType: "linear",
      gradientWith: "fill"
    }, N);
  }
  function D(Y) {
    var ie = Y.lineFillBottomPos, ce = Y.linePosition, fe = ie.changeIndex, N = ie.changeValue, w = ce.map(function(re) {
      return re[fe];
    }), O = Math.max.apply(Math, (0, t.default)(w)), F = Math.min.apply(Math, (0, t.default)(w)), H = O;
    return fe === 1 && (H = F), fe === 1 ? [0, H, 0, N] : [H, 0, N, 0];
  }
  function k(Y, ie) {
    var ce = Y.lineFillBottomPos, fe = Y.shape, N = ie.ctx, w = fe.points, O = ce.changeIndex, F = ce.changeValue, H = (0, t.default)(w[w.length - 1]), re = (0, t.default)(w[0]);
    H[O] = F, re[O] = F, N.lineTo.apply(N, (0, t.default)(H)), N.lineTo.apply(N, (0, t.default)(re)), N.closePath(), N.fill();
  }
  function C(Y) {
    var ie = m(Y)[0], ce = E({}, ie.style);
    return ce.opacity = 0, ie.style = ce, [ie];
  }
  function $(Y, ie, ce, fe) {
    var N = Y[ce];
    if (N) {
      var w = A(ie), O = fe.chart.render, F = N[0].name, H = w !== F;
      H && (N.forEach(function(re) {
        return O.delGraph(re);
      }), Y[ce] = null);
    }
  }
  function c(Y, ie) {
    var ce = ie.shape.points, fe = Y.shape.points, N = fe.length, w = ce.length;
    if (w > N) {
      var O = fe.slice(-1)[0], F = new Array(w - N).fill(0).map(function(H) {
        return (0, t.default)(O);
      });
      fe.push.apply(fe, (0, t.default)(F));
    } else w < N && fe.splice(w);
  }
  function M(Y) {
    var ie = Y.animationCurve, ce = Y.animationFrame, fe = Y.rLevel;
    return [{
      name: A(Y),
      index: fe + 1,
      animationCurve: ie,
      animationFrame: ce,
      shape: y(Y),
      style: p(Y)
    }];
  }
  function A(Y) {
    var ie = Y.smooth;
    return ie ? "smoothline" : "polyline";
  }
  function p(Y) {
    var ie = Y.lineStyle, ce = Y.color, fe = Y.smooth, N = Y.linePosition, w = V(N, fe);
    return (0, x.deepMerge)({
      stroke: ce,
      lineDash: [w, 0]
    }, ie);
  }
  function V(Y) {
    var ie = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;
    if (!ie) return (0, x.getPolylineLength)(Y);
    var ce = U(Y);
    return T(ce);
  }
  function X(Y) {
    var ie = Y.lineStyle.lineDash, ce = M(Y)[0], fe = ce.style.lineDash;
    return ie ? fe = [0, 0] : fe = (0, t.default)(fe).reverse(), ce.style.lineDash = fe, [ce];
  }
  function ee(Y) {
    var ie = Y.animationCurve, ce = Y.animationFrame, fe = Y.rLevel, N = u(Y), w = I(Y);
    return N.map(function(O) {
      return {
        name: "circle",
        index: fe + 2,
        visible: Y.linePoint.show,
        animationCurve: ie,
        animationFrame: ce,
        shape: O,
        style: w
      };
    });
  }
  function u(Y) {
    var ie = Y.linePosition, ce = Y.linePoint.radius;
    return ie.map(function(fe) {
      var N = (0, a.default)(fe, 2), w = N[0], O = N[1];
      return {
        r: ce,
        rx: w,
        ry: O
      };
    });
  }
  function I(Y) {
    var ie = Y.color, ce = Y.linePoint.style;
    return (0, x.deepMerge)({
      stroke: ie
    }, ce);
  }
  function g(Y) {
    var ie = ee(Y);
    return ie.forEach(function(ce) {
      ce.shape.r = 0.1;
    }), ie;
  }
  function v(Y) {
    var ie = Y.animationCurve, ce = Y.animationFrame, fe = Y.rLevel, N = S(Y), w = ve(Y);
    return N.map(function(O, F) {
      return {
        name: "text",
        index: fe + 3,
        visible: Y.label.show,
        animationCurve: ie,
        animationFrame: ce,
        shape: O,
        style: w
      };
    });
  }
  function S(Y) {
    var ie = oe(Y), ce = J(Y);
    return ie.map(function(fe, N) {
      return {
        content: fe,
        position: ce[N]
      };
    });
  }
  function J(Y) {
    var ie = Y.linePosition, ce = Y.lineFillBottomPos, fe = Y.label, N = fe.position, w = fe.offset, O = ce.changeIndex, F = ce.changeValue;
    return ie.map(function(H) {
      if (N === "bottom" && (H = (0, t.default)(H), H[O] = F), N === "center") {
        var re = (0, t.default)(H);
        re[O] = F, H = te(H, re);
      }
      return Q(H, w);
    });
  }
  function Q(Y, ie) {
    var ce = (0, a.default)(Y, 2), fe = ce[0], N = ce[1], w = (0, a.default)(ie, 2), O = w[0], F = w[1];
    return [fe + O, N + F];
  }
  function te(Y, ie) {
    var ce = (0, a.default)(Y, 2), fe = ce[0], N = ce[1], w = (0, a.default)(ie, 2), O = w[0], F = w[1];
    return [(fe + O) / 2, (N + F) / 2];
  }
  function oe(Y) {
    var ie = Y.data, ce = Y.label.formatter;
    if (ie = ie.filter(function(N) {
      return typeof N == "number";
    }).map(function(N) {
      return N.toString();
    }), !ce) return ie;
    var fe = (0, r.default)(ce);
    return fe === "string" ? ie.map(function(N) {
      return ce.replace("{value}", N);
    }) : fe === "function" ? ie.map(function(N, w) {
      return ce({
        value: N,
        index: w
      });
    }) : ie;
  }
  function ve(Y) {
    var ie = Y.color, ce = Y.label.style;
    return (0, x.deepMerge)({
      fill: ie
    }, ce);
  }
  return wt;
}
var kt = {}, da;
function as() {
  if (da) return kt;
  da = 1;
  var e = we;
  Object.defineProperty(kt, "__esModule", {
    value: !0
  }), kt.bar = U;
  var r = e(Be()), a = e(Ve()), t = e(Ne()), n = e(Te()), l = Xe(), o = Ue(), _ = Fe(), x = ze();
  function z(h, j) {
    var s = Object.keys(h);
    if (Object.getOwnPropertySymbols) {
      var b = Object.getOwnPropertySymbols(h);
      j && (b = b.filter(function(P) {
        return Object.getOwnPropertyDescriptor(h, P).enumerable;
      })), s.push.apply(s, b);
    }
    return s;
  }
  function E(h) {
    for (var j = 1; j < arguments.length; j++) {
      var s = arguments[j] != null ? arguments[j] : {};
      j % 2 ? z(Object(s), !0).forEach(function(b) {
        (0, a.default)(h, b, s[b]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(h, Object.getOwnPropertyDescriptors(s)) : z(Object(s)).forEach(function(b) {
        Object.defineProperty(h, b, Object.getOwnPropertyDescriptor(s, b));
      });
    }
    return h;
  }
  function U(h) {
    var j = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, s = j.xAxis, b = j.yAxis, P = j.series, R = [];
    s && b && P && (R = (0, x.initNeedSeries)(P, o.barConfig, "bar"), R = T(R, h), R = L(R), R = k(R)), (0, l.doUpdate)({
      chart: h,
      series: R.slice(-1),
      key: "backgroundBar",
      getGraphConfig: V
    }), R.reverse(), (0, l.doUpdate)({
      chart: h,
      series: R,
      key: "bar",
      getGraphConfig: I,
      getStartGraphConfig: ve,
      beforeUpdate: fe
    }), (0, l.doUpdate)({
      chart: h,
      series: R,
      key: "barLabel",
      getGraphConfig: N
    });
  }
  function T(h, j) {
    var s = j.axisData;
    return h.forEach(function(b) {
      var P = b.xAxisIndex, R = b.yAxisIndex;
      typeof P != "number" && (P = 0), typeof R != "number" && (R = 0);
      var K = s.find(function(he) {
        var pe = he.axis, ge = he.index;
        return "".concat(pe).concat(ge) === "x".concat(P);
      }), ne = s.find(function(he) {
        var pe = he.axis, ge = he.index;
        return "".concat(pe).concat(ge) === "y".concat(R);
      }), ue = [K, ne], de = ue.findIndex(function(he) {
        var pe = he.data;
        return pe === "value";
      });
      b.valueAxis = ue[de], b.labelAxis = ue[1 - de];
    }), h;
  }
  function L(h, j) {
    var s = B(h);
    return s.forEach(function(b) {
      d(b), q(b), G(b), m(b), D(b);
    }), h;
  }
  function d(h) {
    var j = W(h);
    j = j.map(function(b) {
      return {
        stack: b,
        index: -1
      };
    });
    var s = 0;
    h.forEach(function(b) {
      var P = b.stack;
      if (!P)
        b.barIndex = s, s++;
      else {
        var R = j.find(function(K) {
          var ne = K.stack;
          return ne === P;
        });
        R.index === -1 && (R.index = s, s++), b.barIndex = R.index;
      }
    });
  }
  function B(h) {
    var j = h.map(function(s) {
      var b = s.labelAxis, P = b.axis, R = b.index;
      return P + R;
    });
    return j = (0, n.default)(new Set(j)), j.map(function(s) {
      return h.filter(function(b) {
        var P = b.labelAxis, R = P.axis, K = P.index;
        return R + K === s;
      });
    });
  }
  function W(h) {
    var j = [];
    return h.forEach(function(s) {
      var b = s.stack;
      b && j.push(b);
    }), (0, n.default)(new Set(j));
  }
  function q(h) {
    var j = (0, n.default)(new Set(h.map(function(s) {
      var b = s.barIndex;
      return b;
    }))).length;
    h.forEach(function(s) {
      return s.barNum = j;
    });
  }
  function G(h) {
    var j = h.slice(-1)[0], s = j.barCategoryGap, b = j.labelAxis.tickGap, P = 0;
    typeof s == "number" ? P = s : P = (1 - parseInt(s) / 100) * b, h.forEach(function(R) {
      return R.barCategoryWidth = P;
    });
  }
  function m(h) {
    var j = h.slice(-1)[0], s = j.barCategoryWidth, b = j.barWidth, P = j.barGap, R = j.barNum, K = [];
    typeof b == "number" || b !== "auto" ? K = y(s, b, P) : b === "auto" && (K = f(s, b, P, R));
    var ne = K, ue = (0, t.default)(ne, 2), de = ue[0], he = ue[1];
    h.forEach(function(pe) {
      pe.barWidth = de, pe.barGap = he;
    });
  }
  function y(h, j, s) {
    var b = 0, P = 0;
    return typeof j == "number" ? b = j : b = parseInt(j) / 100 * h, typeof s == "number" ? P = s : P = parseInt(s) / 100 * b, [b, P];
  }
  function f(h, j, s, b) {
    var P = 0, R = 0, K = h / b;
    if (typeof s == "number")
      R = s, P = K - R;
    else {
      var ne = 10 + parseInt(s) / 10;
      ne === 0 ? (P = K * 2, R = -P) : (P = K / ne * 10, R = K - P);
    }
    return [P, R];
  }
  function D(h) {
    var j = h.slice(-1)[0], s = j.barGap, b = j.barWidth, P = j.barNum, R = (s + b) * P - s;
    h.forEach(function(K) {
      return K.barAllWidthAndGap = R;
    });
  }
  function k(h, j) {
    return h = $(h), h = C(h), h = M(h), h = A(h), h;
  }
  function C(h) {
    return h.map(function(j) {
      var s = j.labelAxis, b = j.barAllWidthAndGap, P = j.barGap, R = j.barWidth, K = j.barIndex, ne = s.tickGap, ue = s.tickPosition, de = s.axis, he = de === "x" ? 0 : 1, pe = ue.map(function(ge, ye) {
        var Oe = ue[ye][he] - ne / 2, Qe = Oe + (ne - b) / 2;
        return Qe + (K + 0.5) * R + K * P;
      });
      return E(E({}, j), {}, {
        barLabelAxisPos: pe
      });
    });
  }
  function $(h) {
    return h.map(function(j) {
      var s = (0, x.mergeSameStackData)(j, h);
      s = c(j, s);
      var b = j.valueAxis, P = b.axis, R = b.minValue, K = b.maxValue, ne = b.linePosition, ue = p(R, K, R < 0 ? 0 : R, ne, P), de = s.map(function(pe) {
        return p(R, K, pe, ne, P);
      }), he = de.map(function(pe) {
        return [ue, pe];
      });
      return E(E({}, j), {}, {
        barValueAxisPos: he
      });
    });
  }
  function c(h, j) {
    var s = h.data;
    return j.map(function(b, P) {
      return typeof s[P] == "number" ? b : null;
    }).filter(function(b) {
      return b !== null;
    });
  }
  function M(h) {
    return h.map(function(j) {
      var s = j.barLabelAxisPos, b = j.data;
      return b.forEach(function(P, R) {
        typeof P != "number" && (s[R] = null);
      }), E(E({}, j), {}, {
        barLabelAxisPos: s.filter(function(P) {
          return P !== null;
        })
      });
    });
  }
  function A(h) {
    return h.forEach(function(j) {
      var s = j.data, b = j.barLabelAxisPos, P = j.barValueAxisPos, R = s.filter(function(ne) {
        return typeof ne == "number";
      }).length, K = b.length;
      K > R && (b.splice(R), P.splice(R));
    }), h;
  }
  function p(h, j, s, b, P) {
    if (typeof s != "number") return null;
    var R = j - h, K = P === "x" ? 0 : 1, ne = b[1][K] - b[0][K], ue = (s - h) / R;
    R === 0 && (ue = 0);
    var de = ue * ne;
    return de + b[0][K];
  }
  function V(h) {
    var j = h.animationCurve, s = h.animationFrame, b = h.rLevel, P = X(h), R = u(h);
    return P.map(function(K) {
      return {
        name: "rect",
        index: b,
        visible: h.backgroundBar.show,
        animationCurve: j,
        animationFrame: s,
        shape: K,
        style: R
      };
    });
  }
  function X(h) {
    var j = h.labelAxis, s = h.valueAxis, b = j.tickPosition, P = s.axis, R = s.linePosition, K = ee(h), ne = K / 2, ue = P === "x" ? 0 : 1, de = b.map(function(ye) {
      return ye[1 - ue];
    }), he = [R[0][ue], R[1][ue]], pe = he[0], ge = he[1];
    return de.map(function(ye) {
      return P === "x" ? {
        x: pe,
        y: ye - ne,
        w: ge - pe,
        h: K
      } : {
        x: ye - ne,
        y: ge,
        w: K,
        h: pe - ge
      };
    });
  }
  function ee(h) {
    var j = h.barAllWidthAndGap, s = h.barCategoryWidth, b = h.backgroundBar, P = b.width;
    return typeof P == "number" ? P : P === "auto" ? j : parseInt(P) / 100 * s;
  }
  function u(h) {
    return h.backgroundBar.style;
  }
  function I(h) {
    var j = h.barLabelAxisPos, s = h.animationCurve, b = h.animationFrame, P = h.rLevel, R = g(h);
    return j.map(function(K, ne) {
      return {
        name: R,
        index: P,
        animationCurve: s,
        animationFrame: b,
        shape: v(h, ne),
        style: te(h, ne)
      };
    });
  }
  function g(h) {
    var j = h.shapeType;
    return j === "leftEchelon" || j === "rightEchelon" ? "polyline" : "rect";
  }
  function v(h, j) {
    var s = h.shapeType;
    return s === "leftEchelon" ? S(h, j) : s === "rightEchelon" ? J(h, j) : Q(h, j);
  }
  function S(h, j) {
    var s = h.barValueAxisPos, b = h.barLabelAxisPos, P = h.barWidth, R = h.echelonOffset, K = (0, t.default)(s[j], 2), ne = K[0], ue = K[1], de = b[j], he = P / 2, pe = h.valueAxis.axis, ge = [];
    return pe === "x" ? (ge[0] = [ue, de - he], ge[1] = [ue, de + he], ge[2] = [ne, de + he], ge[3] = [ne + R, de - he], ue - ne < R && ge.splice(3, 1)) : (ge[0] = [de - he, ue], ge[1] = [de + he, ue], ge[2] = [de + he, ne], ge[3] = [de - he, ne - R], ne - ue < R && ge.splice(3, 1)), {
      points: ge,
      close: !0
    };
  }
  function J(h, j) {
    var s = h.barValueAxisPos, b = h.barLabelAxisPos, P = h.barWidth, R = h.echelonOffset, K = (0, t.default)(s[j], 2), ne = K[0], ue = K[1], de = b[j], he = P / 2, pe = h.valueAxis.axis, ge = [];
    return pe === "x" ? (ge[0] = [ue, de + he], ge[1] = [ue, de - he], ge[2] = [ne, de - he], ge[3] = [ne + R, de + he], ue - ne < R && ge.splice(2, 1)) : (ge[0] = [de + he, ue], ge[1] = [de - he, ue], ge[2] = [de - he, ne], ge[3] = [de + he, ne - R], ne - ue < R && ge.splice(2, 1)), {
      points: ge,
      close: !0
    };
  }
  function Q(h, j) {
    var s = h.barValueAxisPos, b = h.barLabelAxisPos, P = h.barWidth, R = (0, t.default)(s[j], 2), K = R[0], ne = R[1], ue = b[j], de = h.valueAxis.axis, he = {};
    return de === "x" ? (he.x = K, he.y = ue - P / 2, he.w = ne - K, he.h = P) : (he.x = ue - P / 2, he.y = ne, he.w = P, he.h = K - ne), he;
  }
  function te(h, j) {
    var s = h.barStyle, b = h.gradient, P = h.color, R = h.independentColor, K = h.independentColors, ne = [s.fill || P], ue = (0, x.deepMerge)(ne, b.color);
    if (R) {
      var de = K[j % K.length];
      ue = de instanceof Array ? de : [de];
    }
    ue.length === 1 && ue.push(ue[0]);
    var he = oe(h, j);
    return (0, x.deepMerge)({
      gradientColor: ue,
      gradientParams: he,
      gradientType: "linear",
      gradientWith: "fill"
    }, s);
  }
  function oe(h, j) {
    var s = h.barValueAxisPos, b = h.barLabelAxisPos, P = h.data, R = h.valueAxis, K = R.linePosition, ne = R.axis, ue = (0, t.default)(s[j], 2), de = ue[0], he = ue[1], pe = b[j], ge = P[j], ye = (0, t.default)(K, 2), Oe = ye[0], Qe = ye[1], Je = ne === "x" ? 0 : 1, Ye = he;
    return h.gradient.local || (Ye = ge < 0 ? Oe[Je] : Qe[Je]), ne === "y" ? [pe, Ye, pe, de] : [Ye, pe, de, pe];
  }
  function ve(h) {
    var j = I(h), s = h.shapeType;
    return j.forEach(function(b) {
      var P = b.shape;
      s === "leftEchelon" ? P = Y(P, h) : s === "rightEchelon" ? P = ie(P, h) : P = ce(P, h), b.shape = P;
    }), j;
  }
  function Y(h, j) {
    var s = j.valueAxis.axis;
    h = (0, _.deepClone)(h);
    var b = h, P = b.points, R = s === "x" ? 0 : 1, K = P[2][R];
    return P.forEach(function(ne) {
      return ne[R] = K;
    }), h;
  }
  function ie(h, j) {
    var s = j.valueAxis.axis;
    h = (0, _.deepClone)(h);
    var b = h, P = b.points, R = s === "x" ? 0 : 1, K = P[2][R];
    return P.forEach(function(ne) {
      return ne[R] = K;
    }), h;
  }
  function ce(h, j) {
    var s = j.valueAxis.axis, b = h.x, P = h.y, R = h.w, K = h.h;
    return s === "x" ? R = 0 : (P = P + K, K = 0), {
      x: b,
      y: P,
      w: R,
      h: K
    };
  }
  function fe(h, j, s, b) {
    var P = b.chart.render, R = g(j);
    h[s] && h[s][0].name !== R && (h[s].forEach(function(K) {
      return P.delGraph(K);
    }), h[s] = null);
  }
  function N(h) {
    var j = h.animationCurve, s = h.animationFrame, b = h.rLevel, P = w(h), R = re(h);
    return P.map(function(K) {
      return {
        name: "text",
        index: b,
        visible: h.label.show,
        animationCurve: j,
        animationFrame: s,
        shape: K,
        style: R
      };
    });
  }
  function w(h) {
    var j = O(h), s = F(h);
    return s.map(function(b, P) {
      return {
        position: b,
        content: j[P]
      };
    });
  }
  function O(h) {
    var j = h.data, s = h.label, b = s.formatter;
    if (j = j.filter(function(R) {
      return typeof R == "number";
    }).map(function(R) {
      return R.toString();
    }), !b) return j;
    var P = (0, r.default)(b);
    return P === "string" ? j.map(function(R) {
      return b.replace("{value}", R);
    }) : P === "function" ? j.map(function(R, K) {
      return b({
        value: R,
        index: K
      });
    }) : j;
  }
  function F(h) {
    var j = h.label, s = h.barValueAxisPos, b = h.barLabelAxisPos, P = j.position, R = j.offset, K = h.valueAxis.axis;
    return s.map(function(ne, ue) {
      var de = (0, t.default)(ne, 2), he = de[0], pe = de[1], ge = b[ue], ye = [pe, ge];
      return P === "bottom" && (ye = [he, ge]), P === "center" && (ye = [(he + pe) / 2, ge]), K === "y" && ye.reverse(), H(ye, R);
    });
  }
  function H(h, j) {
    var s = (0, t.default)(h, 2), b = s[0], P = s[1], R = (0, t.default)(j, 2), K = R[0], ne = R[1];
    return [b + K, P + ne];
  }
  function re(h) {
    var j = h.color, s = h.label.style, b = h.gradient.color;
    return b.length && (j = b[0]), s = (0, x.deepMerge)({
      fill: j
    }, s), s;
  }
  return kt;
}
var At = {}, ha;
function is() {
  if (ha) return At;
  ha = 1;
  var e = we;
  Object.defineProperty(At, "__esModule", {
    value: !0
  }), At.pie = U;
  var r = e(Ve()), a = e(Be()), t = e(Ne()), n = e(Te()), l = Xe(), o = Da(), _ = Fe(), x = ze();
  function z(w, O) {
    var F = Object.keys(w);
    if (Object.getOwnPropertySymbols) {
      var H = Object.getOwnPropertySymbols(w);
      O && (H = H.filter(function(re) {
        return Object.getOwnPropertyDescriptor(w, re).enumerable;
      })), F.push.apply(F, H);
    }
    return F;
  }
  function E(w) {
    for (var O = 1; O < arguments.length; O++) {
      var F = arguments[O] != null ? arguments[O] : {};
      O % 2 ? z(Object(F), !0).forEach(function(H) {
        (0, r.default)(w, H, F[H]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(w, Object.getOwnPropertyDescriptors(F)) : z(Object(F)).forEach(function(H) {
        Object.defineProperty(w, H, Object.getOwnPropertyDescriptor(F, H));
      });
    }
    return w;
  }
  function U(w) {
    var O = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, F = O.series;
    F || (F = []);
    var H = (0, x.initNeedSeries)(F, o.pieConfig, "pie");
    H = T(H, w), H = L(H, w), H = B(H), H = G(H), H = f(H), H = k(H), H = $(H), H = c(H), (0, l.doUpdate)({
      chart: w,
      series: H,
      key: "pie",
      getGraphConfig: ee,
      getStartGraphConfig: u,
      beforeChange: I
    }), (0, l.doUpdate)({
      chart: w,
      series: H,
      key: "pieInsideLabel",
      getGraphConfig: S
    }), (0, l.doUpdate)({
      chart: w,
      series: H,
      key: "pieOutsideLabelLine",
      getGraphConfig: te,
      getStartGraphConfig: oe
    }), (0, l.doUpdate)({
      chart: w,
      series: H,
      key: "pieOutsideLabel",
      getGraphConfig: ie,
      getStartGraphConfig: ce
    });
  }
  function T(w, O) {
    var F = O.render.area;
    return w.forEach(function(H) {
      var re = H.center;
      re = re.map(function(h, j) {
        return typeof h == "number" ? h : parseInt(h) / 100 * F[j];
      }), H.center = re;
    }), w;
  }
  function L(w, O) {
    var F = Math.min.apply(Math, (0, n.default)(O.render.area)) / 2;
    return w.forEach(function(H) {
      var re = H.radius, h = H.data;
      re = d(re, F), h.forEach(function(j) {
        var s = j.radius;
        s || (s = re), s = d(s, F), j.radius = s;
      }), H.radius = re;
    }), w;
  }
  function d(w, O) {
    return w instanceof Array || (w = [0, w]), w = w.map(function(F) {
      return typeof F == "number" ? F : parseInt(F) / 100 * O;
    }), w;
  }
  function B(w, O) {
    var F = w.filter(function(H) {
      var re = H.roseType;
      return re;
    });
    return F.forEach(function(H) {
      var re = H.radius, h = H.data, j = H.roseSort, s = q(H), b = (0, n.default)(h);
      h = W(h), h.forEach(function(P, R) {
        P.radius[1] = re[1] - s * R;
      }), j ? h.reverse() : H.data = b, H.roseIncrement = s;
    }), w;
  }
  function W(w) {
    return w.sort(function(O, F) {
      var H = O.value, re = F.value;
      if (H === re) return 0;
      if (H > re) return -1;
      if (H < re) return 1;
    });
  }
  function q(w) {
    var O = w.radius, F = w.roseIncrement;
    if (typeof F == "number") return F;
    if (F === "auto") {
      var H = w.data, re = H.reduce(function(s, b) {
        var P = b.radius;
        return [].concat((0, n.default)(s), (0, n.default)(P));
      }, []), h = Math.min.apply(Math, (0, n.default)(re)), j = Math.max.apply(Math, (0, n.default)(re));
      return (j - h) * 0.6 / (H.length - 1 || 1);
    }
    return parseInt(F) / 100 * O[1];
  }
  function G(w) {
    return w.forEach(function(O) {
      var F = O.data, H = O.percentToFixed, re = y(F);
      F.forEach(function(j) {
        var s = j.value;
        j.percent = s / re * 100, j.percentForLabel = m(s / re * 100, H);
      });
      var h = (0, x.mulAdd)(F.slice(0, -1).map(function(j) {
        var s = j.percent;
        return s;
      }));
      F.slice(-1)[0].percent = 100 - h, F.slice(-1)[0].percentForLabel = m(100 - h, H);
    }), w;
  }
  function m(w) {
    var O = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, F = w.toString(), H = F.split("."), re = H[1] || "0", h = re.slice(0, O);
    return H[1] = h, parseFloat(H.join("."));
  }
  function y(w) {
    return (0, x.mulAdd)(w.map(function(O) {
      var F = O.value;
      return F;
    }));
  }
  function f(w) {
    return w.forEach(function(O) {
      var F = O.startAngle, H = O.data;
      H.forEach(function(re, h) {
        var j = D(H, h), s = (0, t.default)(j, 2), b = s[0], P = s[1];
        re.startAngle = F + b, re.endAngle = F + P;
      });
    }), w;
  }
  function D(w, O) {
    var F = Math.PI * 2, H = w.slice(0, O + 1), re = (0, x.mulAdd)(H.map(function(s) {
      var b = s.percent;
      return b;
    })), h = w[O].percent, j = re - h;
    return [F * j / 100, F * re / 100];
  }
  function k(w) {
    return w.forEach(function(O) {
      var F = O.data;
      F.forEach(function(H) {
        H.insideLabelPos = C(O, H);
      });
    }), w;
  }
  function C(w, O) {
    var F = w.center, H = O.startAngle, re = O.endAngle, h = (0, t.default)(O.radius, 2), j = h[0], s = h[1], b = (j + s) / 2, P = (H + re) / 2;
    return _.getCircleRadianPoint.apply(void 0, (0, n.default)(F).concat([b, P]));
  }
  function $(w) {
    return w.forEach(function(O) {
      var F = O.data, H = O.center;
      F.forEach(function(re) {
        var h = re.startAngle, j = re.endAngle, s = re.radius, b = (h + j) / 2, P = _.getCircleRadianPoint.apply(void 0, (0, n.default)(H).concat([s[1], b]));
        re.edgeCenterPos = P;
      });
    }), w;
  }
  function c(w) {
    return w.forEach(function(O) {
      var F = p(O), H = p(O, !1);
      F = V(F), H = V(H), X(F, O), X(H, O, !1);
    }), w;
  }
  function M(w) {
    var O = w.outsideLabel.labelLineBendGap, F = A(w);
    return typeof O != "number" && (O = parseInt(O) / 100 * F), O + F;
  }
  function A(w) {
    var O = w.data, F = O.map(function(H) {
      var re = (0, t.default)(H.radius, 2);
      re[0];
      var h = re[1];
      return h;
    });
    return Math.max.apply(Math, (0, n.default)(F));
  }
  function p(w) {
    var O = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0, F = w.data, H = w.center, re = H[0];
    return F.filter(function(h) {
      var j = h.edgeCenterPos, s = j[0];
      return O ? s <= re : s > re;
    });
  }
  function V(w) {
    return w.sort(function(O, F) {
      var H = (0, t.default)(O.edgeCenterPos, 2);
      H[0];
      var re = H[1], h = (0, t.default)(F.edgeCenterPos, 2);
      h[0];
      var j = h[1];
      if (re > j) return 1;
      if (re < j) return -1;
      if (re === j) return 0;
    }), w;
  }
  function X(w, O) {
    var F = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !0, H = O.center, re = O.outsideLabel, h = M(O);
    w.forEach(function(j) {
      var s = j.edgeCenterPos, b = j.startAngle, P = j.endAngle, R = re.labelLineEndLength, K = (b + P) / 2, ne = _.getCircleRadianPoint.apply(void 0, (0, n.default)(H).concat([h, K])), ue = (0, n.default)(ne);
      ue[0] += R * (F ? -1 : 1), j.labelLine = [s, ne, ue], j.labelLineLength = (0, x.getPolylineLength)(j.labelLine), j.align = {
        textAlign: "left",
        textBaseline: "middle"
      }, F && (j.align.textAlign = "right");
    });
  }
  function ee(w) {
    var O = w.data, F = w.animationCurve, H = w.animationFrame, re = w.rLevel;
    return O.map(function(h, j) {
      return {
        name: "pie",
        index: re,
        animationCurve: F,
        animationFrame: H,
        shape: g(w, j),
        style: v(w, j)
      };
    });
  }
  function u(w) {
    var O = w.animationDelayGap, F = w.startAnimationCurve, H = ee(w);
    return H.forEach(function(re, h) {
      re.animationCurve = F, re.animationDelay = h * O, re.shape.or = re.shape.ir;
    }), H;
  }
  function I(w) {
    w.animationDelay = 0;
  }
  function g(w, O) {
    var F = w.center, H = w.data, re = H[O], h = re.radius, j = re.startAngle, s = re.endAngle;
    return {
      startAngle: j,
      endAngle: s,
      ir: h[0],
      or: h[1],
      rx: F[0],
      ry: F[1]
    };
  }
  function v(w, O) {
    var F = w.pieStyle, H = w.data, re = H[O], h = re.color;
    return (0, x.deepMerge)({
      fill: h
    }, F);
  }
  function S(w) {
    var O = w.animationCurve, F = w.animationFrame, H = w.data, re = w.rLevel;
    return H.map(function(h, j) {
      return {
        name: "text",
        index: re,
        visible: w.insideLabel.show,
        animationCurve: O,
        animationFrame: F,
        shape: J(w, j),
        style: Q(w)
      };
    });
  }
  function J(w, O) {
    var F = w.insideLabel, H = w.data, re = F.formatter, h = H[O], j = (0, a.default)(re), s = "";
    return j === "string" && (s = re.replace("{name}", h.name), s = s.replace("{percent}", h.percentForLabel), s = s.replace("{value}", h.value)), j === "function" && (s = re(h)), {
      content: s,
      position: h.insideLabelPos
    };
  }
  function Q(w, O) {
    var F = w.insideLabel.style;
    return F;
  }
  function te(w) {
    var O = w.animationCurve, F = w.animationFrame, H = w.data, re = w.rLevel;
    return H.map(function(h, j) {
      return {
        name: "polyline",
        index: re,
        visible: w.outsideLabel.show,
        animationCurve: O,
        animationFrame: F,
        shape: ve(w, j),
        style: Y(w, j)
      };
    });
  }
  function oe(w) {
    var O = w.data, F = te(w);
    return F.forEach(function(H, re) {
      H.style.lineDash = [0, O[re].labelLineLength];
    }), F;
  }
  function ve(w, O) {
    var F = w.data, H = F[O];
    return {
      points: H.labelLine
    };
  }
  function Y(w, O) {
    var F = w.outsideLabel, H = w.data, re = F.labelLineStyle, h = H[O].color;
    return (0, x.deepMerge)({
      stroke: h,
      lineDash: [H[O].labelLineLength, 0]
    }, re);
  }
  function ie(w) {
    var O = w.animationCurve, F = w.animationFrame, H = w.data, re = w.rLevel;
    return H.map(function(h, j) {
      return {
        name: "text",
        index: re,
        visible: w.outsideLabel.show,
        animationCurve: O,
        animationFrame: F,
        shape: fe(w, j),
        style: N(w, j)
      };
    });
  }
  function ce(w) {
    var O = w.data, F = ie(w);
    return F.forEach(function(H, re) {
      H.shape.position = O[re].labelLine[1];
    }), F;
  }
  function fe(w, O) {
    var F = w.outsideLabel, H = w.data, re = F.formatter, h = H[O], j = h.labelLine, s = h.name, b = h.percentForLabel, P = h.value, R = (0, a.default)(re), K = "";
    return R === "string" && (K = re.replace("{name}", s), K = K.replace("{percent}", b), K = K.replace("{value}", P)), R === "function" && (K = re(H[O])), {
      content: K,
      position: j[2]
    };
  }
  function N(w, O) {
    var F = w.outsideLabel, H = w.data, re = H[O], h = re.color, j = re.align, s = F.style;
    return (0, x.deepMerge)(E({
      fill: h
    }, j), s);
  }
  return At;
}
var Lt = {}, va;
function os() {
  if (va) return Lt;
  va = 1;
  var e = we;
  Object.defineProperty(Lt, "__esModule", {
    value: !0
  }), Lt.radarAxis = E;
  var r = e(Ne()), a = e(Ve()), t = e(Te()), n = Xe(), l = Ue(), o = Fe(), _ = ze();
  function x(u, I) {
    var g = Object.keys(u);
    if (Object.getOwnPropertySymbols) {
      var v = Object.getOwnPropertySymbols(u);
      I && (v = v.filter(function(S) {
        return Object.getOwnPropertyDescriptor(u, S).enumerable;
      })), g.push.apply(g, v);
    }
    return g;
  }
  function z(u) {
    for (var I = 1; I < arguments.length; I++) {
      var g = arguments[I] != null ? arguments[I] : {};
      I % 2 ? x(Object(g), !0).forEach(function(v) {
        (0, a.default)(u, v, g[v]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(u, Object.getOwnPropertyDescriptors(g)) : x(Object(g)).forEach(function(v) {
        Object.defineProperty(u, v, Object.getOwnPropertyDescriptor(g, v));
      });
    }
    return u;
  }
  function E(u) {
    var I = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, g = I.radar, v = [];
    g && (v = U(g), v = T(v, u), v = L(v, u), v = d(v), v = B(v), v = W(v), v = [v]);
    var S = v;
    v.length && !v[0].show && (S = []), (0, n.doUpdate)({
      chart: u,
      series: S,
      key: "radarAxisSplitArea",
      getGraphConfig: q,
      beforeUpdate: y,
      beforeChange: f
    }), (0, n.doUpdate)({
      chart: u,
      series: S,
      key: "radarAxisSplitLine",
      getGraphConfig: D,
      beforeUpdate: $,
      beforeChange: c
    }), (0, n.doUpdate)({
      chart: u,
      series: S,
      key: "radarAxisLine",
      getGraphConfig: M
    }), (0, n.doUpdate)({
      chart: u,
      series: S,
      key: "radarAxisLable",
      getGraphConfig: V
    }), u.radarAxis = v[0];
  }
  function U(u) {
    return (0, _.deepMerge)((0, o.deepClone)(l.radarAxisConfig), u);
  }
  function T(u, I) {
    var g = I.render.area, v = u.center;
    return u.centerPos = v.map(function(S, J) {
      return typeof S == "number" ? S : parseInt(S) / 100 * g[J];
    }), u;
  }
  function L(u, I) {
    var g = I.render.area, v = u.splitNum, S = u.radius, J = Math.min.apply(Math, (0, t.default)(g)) / 2;
    typeof S != "number" && (S = parseInt(S) / 100 * J);
    var Q = S / v;
    return u.ringRadius = new Array(v).fill(0).map(function(te, oe) {
      return Q * (oe + 1);
    }), u.radius = S, u;
  }
  function d(u) {
    var I = u.indicator, g = u.centerPos, v = u.radius, S = u.startAngle, J = Math.PI * 2, Q = I.length, te = J / Q, oe = new Array(Q).fill(0).map(function(ve, Y) {
      return te * Y + S;
    });
    return u.axisLineAngles = oe, u.axisLinePosition = oe.map(function(ve) {
      return o.getCircleRadianPoint.apply(void 0, (0, t.default)(g).concat([v, ve]));
    }), u;
  }
  function B(u) {
    var I = u.ringRadius, g = I[0] / 2;
    return u.areaRadius = I.map(function(v) {
      return v - g;
    }), u;
  }
  function W(u) {
    var I = u.axisLineAngles, g = u.centerPos, v = u.radius, S = u.axisLabel;
    return v += S.labelGap, u.axisLabelPosition = I.map(function(J) {
      return o.getCircleRadianPoint.apply(void 0, (0, t.default)(g).concat([v, J]));
    }), u;
  }
  function q(u) {
    var I = u.areaRadius, g = u.polygon, v = u.animationCurve, S = u.animationFrame, J = u.rLevel, Q = g ? "regPolygon" : "ring";
    return I.map(function(te, oe) {
      return {
        name: Q,
        index: J,
        visible: u.splitArea.show,
        animationCurve: v,
        animationFrame: S,
        shape: G(u, oe),
        style: m(u, oe)
      };
    });
  }
  function G(u, I) {
    var g = u.polygon, v = u.areaRadius, S = u.indicator, J = u.centerPos, Q = S.length, te = {
      rx: J[0],
      ry: J[1],
      r: v[I]
    };
    return g && (te.side = Q), te;
  }
  function m(u, I) {
    var g = u.splitArea, v = u.ringRadius, S = u.axisLineAngles, J = u.polygon, Q = u.centerPos, te = g.color, oe = g.style;
    oe = z({
      fill: "rgba(0, 0, 0, 0)"
    }, oe);
    var ve = v[0] - 0;
    if (J) {
      var Y = o.getCircleRadianPoint.apply(void 0, (0, t.default)(Q).concat([v[0], S[0]])), ie = o.getCircleRadianPoint.apply(void 0, (0, t.default)(Q).concat([v[0], S[1]]));
      ve = (0, _.getPointToLineDistance)(Q, Y, ie);
    }
    if (oe = (0, _.deepMerge)((0, o.deepClone)(oe, !0), {
      lineWidth: ve
    }), !te.length) return oe;
    var ce = te.length;
    return (0, _.deepMerge)(oe, {
      stroke: te[I % ce]
    });
  }
  function y(u, I, g, v) {
    var S = u[g];
    if (S) {
      var J = v.chart.render, Q = I.polygon, te = S[0].name, oe = Q ? "regPolygon" : "ring", ve = oe !== te;
      ve && (S.forEach(function(Y) {
        return J.delGraph(Y);
      }), u[g] = null);
    }
  }
  function f(u, I) {
    var g = I.shape.side;
    typeof g == "number" && (u.shape.side = g);
  }
  function D(u) {
    var I = u.ringRadius, g = u.polygon, v = u.animationCurve, S = u.animationFrame, J = u.rLevel, Q = g ? "regPolygon" : "ring";
    return I.map(function(te, oe) {
      return {
        name: Q,
        index: J,
        animationCurve: v,
        animationFrame: S,
        visible: u.splitLine.show,
        shape: k(u, oe),
        style: C(u, oe)
      };
    });
  }
  function k(u, I) {
    var g = u.ringRadius, v = u.centerPos, S = u.indicator, J = u.polygon, Q = {
      rx: v[0],
      ry: v[1],
      r: g[I]
    }, te = S.length;
    return J && (Q.side = te), Q;
  }
  function C(u, I) {
    var g = u.splitLine, v = g.color, S = g.style;
    if (S = z({
      fill: "rgba(0, 0, 0, 0)"
    }, S), !v.length) return S;
    var J = v.length;
    return (0, _.deepMerge)(S, {
      stroke: v[I % J]
    });
  }
  function $(u, I, g, v) {
    var S = u[g];
    if (S) {
      var J = v.chart.render, Q = I.polygon, te = S[0].name, oe = Q ? "regPolygon" : "ring", ve = oe !== te;
      ve && (S.forEach(function(Y) {
        return J.delGraph(Y);
      }), u[g] = null);
    }
  }
  function c(u, I) {
    var g = I.shape.side;
    typeof g == "number" && (u.shape.side = g);
  }
  function M(u) {
    var I = u.axisLinePosition, g = u.animationCurve, v = u.animationFrame, S = u.rLevel;
    return I.map(function(J, Q) {
      return {
        name: "polyline",
        index: S,
        visible: u.axisLine.show,
        animationCurve: g,
        animationFrame: v,
        shape: A(u, Q),
        style: p(u, Q)
      };
    });
  }
  function A(u, I) {
    var g = u.centerPos, v = u.axisLinePosition, S = [g, v[I]];
    return {
      points: S
    };
  }
  function p(u, I) {
    var g = u.axisLine, v = g.color, S = g.style;
    if (!v.length) return S;
    var J = v.length;
    return (0, _.deepMerge)(S, {
      stroke: v[I % J]
    });
  }
  function V(u) {
    var I = u.axisLabelPosition, g = u.animationCurve, v = u.animationFrame, S = u.rLevel;
    return I.map(function(J, Q) {
      return {
        name: "text",
        index: S,
        visible: u.axisLabel.show,
        animationCurve: g,
        animationFrame: v,
        shape: X(u, Q),
        style: ee(u, Q)
      };
    });
  }
  function X(u, I) {
    var g = u.axisLabelPosition, v = u.indicator;
    return {
      content: v[I].name,
      position: g[I]
    };
  }
  function ee(u, I) {
    var g = u.axisLabel, v = (0, r.default)(u.centerPos, 2), S = v[0], J = v[1], Q = u.axisLabelPosition, te = g.color, oe = g.style, ve = (0, r.default)(Q[I], 2), Y = ve[0], ie = ve[1], ce = Y > S ? "left" : "right", fe = ie > J ? "top" : "bottom";
    if (oe = (0, _.deepMerge)({
      textAlign: ce,
      textBaseline: fe
    }, oe), !te.length) return oe;
    var N = te.length;
    return (0, _.deepMerge)(oe, {
      fill: te[I % N]
    });
  }
  return Lt;
}
var St = {}, pa;
function ls() {
  if (pa) return St;
  pa = 1;
  var e = we;
  Object.defineProperty(St, "__esModule", {
    value: !0
  }), St.radar = T;
  var r = e(Ve()), a = e(Be()), t = e(Ne()), n = e(Te()), l = Xe(), o = Ue(), _ = Fe(), x = yt, z = ze();
  function E(p, V) {
    var X = Object.keys(p);
    if (Object.getOwnPropertySymbols) {
      var ee = Object.getOwnPropertySymbols(p);
      V && (ee = ee.filter(function(u) {
        return Object.getOwnPropertyDescriptor(p, u).enumerable;
      })), X.push.apply(X, ee);
    }
    return X;
  }
  function U(p) {
    for (var V = 1; V < arguments.length; V++) {
      var X = arguments[V] != null ? arguments[V] : {};
      V % 2 ? E(Object(X), !0).forEach(function(ee) {
        (0, r.default)(p, ee, X[ee]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(p, Object.getOwnPropertyDescriptors(X)) : E(Object(X)).forEach(function(ee) {
        Object.defineProperty(p, ee, Object.getOwnPropertyDescriptor(X, ee));
      });
    }
    return p;
  }
  function T(p) {
    var V = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, X = V.series;
    X || (X = []);
    var ee = (0, z.initNeedSeries)(X, o.radarConfig, "radar");
    ee = L(ee, p), ee = d(ee, p), ee = B(ee, p), (0, l.doUpdate)({
      chart: p,
      series: ee,
      key: "radar",
      getGraphConfig: W,
      getStartGraphConfig: q,
      beforeChange: y
    }), (0, l.doUpdate)({
      chart: p,
      series: ee,
      key: "radarPoint",
      getGraphConfig: f,
      getStartGraphConfig: D
    }), (0, l.doUpdate)({
      chart: p,
      series: ee,
      key: "radarLabel",
      getGraphConfig: $
    });
  }
  function L(p, V) {
    var X = V.radarAxis;
    if (!X) return [];
    var ee = X.indicator, u = X.axisLineAngles, I = X.radius, g = X.centerPos;
    return p.forEach(function(v) {
      var S = v.data;
      v.dataRadius = [], v.radarPosition = ee.map(function(J, Q) {
        var te = J.max, oe = J.min, ve = S[Q];
        typeof te != "number" && (te = ve), typeof oe != "number" && (oe = 0), typeof ve != "number" && (ve = oe);
        var Y = (ve - oe) / (te - oe) * I;
        return v.dataRadius[Q] = Y, _.getCircleRadianPoint.apply(void 0, (0, n.default)(g).concat([Y, u[Q]]));
      });
    }), p;
  }
  function d(p, V) {
    var X = V.radarAxis;
    if (!X) return [];
    var ee = X.centerPos, u = X.axisLineAngles;
    return p.forEach(function(I) {
      var g = I.dataRadius, v = I.label, S = v.labelGap;
      I.labelPosition = g.map(function(J, Q) {
        return _.getCircleRadianPoint.apply(void 0, (0, n.default)(ee).concat([J + S, u[Q]]));
      });
    }), p;
  }
  function B(p, V) {
    var X = V.radarAxis;
    if (!X) return [];
    var ee = (0, t.default)(X.centerPos, 2), u = ee[0], I = ee[1];
    return p.forEach(function(g) {
      var v = g.labelPosition, S = v.map(function(J) {
        var Q = (0, t.default)(J, 2), te = Q[0], oe = Q[1], ve = te > u ? "left" : "right", Y = oe > I ? "top" : "bottom";
        return {
          textAlign: ve,
          textBaseline: Y
        };
      });
      g.labelAlign = S;
    }), p;
  }
  function W(p) {
    var V = p.animationCurve, X = p.animationFrame, ee = p.rLevel;
    return [{
      name: "polyline",
      index: ee,
      animationCurve: V,
      animationFrame: X,
      shape: G(p),
      style: m(p)
    }];
  }
  function q(p, V) {
    var X = V.chart.radarAxis.centerPos, ee = W(p)[0], u = ee.shape.points.length, I = new Array(u).fill(0).map(function(g) {
      return (0, n.default)(X);
    });
    return ee.shape.points = I, [ee];
  }
  function G(p) {
    var V = p.radarPosition;
    return {
      points: V,
      close: !0
    };
  }
  function m(p) {
    var V = p.radarStyle, X = p.color, ee = (0, x.getRgbaValue)(X);
    ee[3] = 0.5;
    var u = {
      stroke: X,
      fill: (0, x.getColorFromRgbValue)(ee)
    };
    return (0, z.deepMerge)(u, V);
  }
  function y(p, V) {
    var X = V.shape, ee = p.shape.points, u = ee.length, I = X.points.length;
    if (I > u) {
      var g = ee.slice(-1)[0], v = new Array(I - u).fill(0).map(function(S) {
        return (0, n.default)(g);
      });
      ee.push.apply(ee, (0, n.default)(v));
    } else I < u && ee.splice(I);
  }
  function f(p) {
    var V = p.radarPosition, X = p.animationCurve, ee = p.animationFrame, u = p.rLevel;
    return V.map(function(I, g) {
      return {
        name: "circle",
        index: u,
        animationCurve: X,
        animationFrame: ee,
        visible: p.point.show,
        shape: k(p, g),
        style: C(p)
      };
    });
  }
  function D(p) {
    var V = f(p);
    return V.forEach(function(X) {
      return X.shape.r = 0.01;
    }), V;
  }
  function k(p, V) {
    var X = p.radarPosition, ee = p.point, u = ee.radius, I = X[V];
    return {
      rx: I[0],
      ry: I[1],
      r: u
    };
  }
  function C(p, V) {
    var X = p.point, ee = p.color, u = X.style;
    return (0, z.deepMerge)({
      stroke: ee
    }, u);
  }
  function $(p) {
    var V = p.labelPosition, X = p.animationCurve, ee = p.animationFrame, u = p.rLevel;
    return V.map(function(I, g) {
      return {
        name: "text",
        index: u,
        visible: p.label.show,
        animationCurve: X,
        animationFrame: ee,
        shape: c(p, g),
        style: A(p, g)
      };
    });
  }
  function c(p, V) {
    var X = p.labelPosition, ee = p.label, u = p.data, I = ee.offset, g = ee.formatter, v = M(X[V], I), S = u[V] ? u[V].toString() : "0", J = (0, a.default)(g);
    return J === "string" && (S = g.replace("{value}", S)), J === "function" && (S = g(S)), {
      content: S,
      position: v
    };
  }
  function M(p, V) {
    var X = (0, t.default)(p, 2), ee = X[0], u = X[1], I = (0, t.default)(V, 2), g = I[0], v = I[1];
    return [ee + g, u + v];
  }
  function A(p, V) {
    var X = p.label, ee = p.color, u = p.labelAlign, I = X.style, g = U({
      fill: ee
    }, u[V]);
    return (0, z.deepMerge)(g, I);
  }
  return St;
}
var Ot = {}, ga;
function ss() {
  if (ga) return Ot;
  ga = 1;
  var e = we;
  Object.defineProperty(Ot, "__esModule", {
    value: !0
  }), Ot.gauge = T;
  var r = e(Ve()), a = e(Be()), t = e(Ne()), n = e(Te()), l = Xe(), o = Ta(), _ = Fe(), x = ze(), z = yt;
  function E(N, w) {
    var O = Object.keys(N);
    if (Object.getOwnPropertySymbols) {
      var F = Object.getOwnPropertySymbols(N);
      w && (F = F.filter(function(H) {
        return Object.getOwnPropertyDescriptor(N, H).enumerable;
      })), O.push.apply(O, F);
    }
    return O;
  }
  function U(N) {
    for (var w = 1; w < arguments.length; w++) {
      var O = arguments[w] != null ? arguments[w] : {};
      w % 2 ? E(Object(O), !0).forEach(function(F) {
        (0, r.default)(N, F, O[F]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(N, Object.getOwnPropertyDescriptors(O)) : E(Object(O)).forEach(function(F) {
        Object.defineProperty(N, F, Object.getOwnPropertyDescriptor(O, F));
      });
    }
    return N;
  }
  function T(N) {
    var w = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, O = w.series;
    O || (O = []);
    var F = (0, x.initNeedSeries)(O, o.gaugeConfig, "gauge");
    F = L(F, N), F = d(F, N), F = B(F, N), F = W(F), F = q(F), F = G(F), F = m(F), F = y(F), F = f(F), F = D(F), (0, l.doUpdate)({
      chart: N,
      series: F,
      key: "gaugeAxisTick",
      getGraphConfig: C
    }), (0, l.doUpdate)({
      chart: N,
      series: F,
      key: "gaugeAxisLabel",
      getGraphConfig: M
    }), (0, l.doUpdate)({
      chart: N,
      series: F,
      key: "gaugeBackgroundArc",
      getGraphConfig: V,
      getStartGraphConfig: u
    }), (0, l.doUpdate)({
      chart: N,
      series: F,
      key: "gaugeArc",
      getGraphConfig: I,
      getStartGraphConfig: S,
      beforeChange: J
    }), (0, l.doUpdate)({
      chart: N,
      series: F,
      key: "gaugePointer",
      getGraphConfig: Q,
      getStartGraphConfig: Y
    }), (0, l.doUpdate)({
      chart: N,
      series: F,
      key: "gaugeDetails",
      getGraphConfig: ie
    });
  }
  function L(N, w) {
    var O = w.render.area;
    return N.forEach(function(F) {
      var H = F.center;
      H = H.map(function(re, h) {
        return typeof re == "number" ? re : parseInt(re) / 100 * O[h];
      }), F.center = H;
    }), N;
  }
  function d(N, w) {
    var O = w.render.area, F = Math.min.apply(Math, (0, n.default)(O)) / 2;
    return N.forEach(function(H) {
      var re = H.radius;
      typeof re != "number" && (re = parseInt(re) / 100 * F), H.radius = re;
    }), N;
  }
  function B(N, w) {
    var O = w.render.area, F = Math.min.apply(Math, (0, n.default)(O)) / 2;
    return N.forEach(function(H) {
      var re = H.radius, h = H.data, j = H.arcLineWidth;
      h.forEach(function(s) {
        var b = s.radius, P = s.lineWidth;
        b || (b = re), typeof b != "number" && (b = parseInt(b) / 100 * F), s.radius = b, P || (P = j), s.lineWidth = P;
      });
    }), N;
  }
  function W(N, w) {
    return N.forEach(function(O) {
      var F = O.startAngle, H = O.endAngle, re = O.data, h = O.min, j = O.max, s = H - F, b = j - h;
      re.forEach(function(P) {
        var R = P.value, K = Math.abs((R - h) / b * s);
        P.startAngle = F, P.endAngle = F + K;
      });
    }), N;
  }
  function q(N, w) {
    return N.forEach(function(O) {
      var F = O.data;
      F.forEach(function(H) {
        var re = H.color, h = H.gradient;
        (!h || !h.length) && (h = re), h instanceof Array || (h = [h]), H.gradient = h;
      });
    }), N;
  }
  function G(N, w) {
    return N.forEach(function(O) {
      var F = O.startAngle, H = O.endAngle, re = O.splitNum, h = O.center, j = O.radius, s = O.arcLineWidth, b = O.axisTick, P = b.tickLength, R = b.style.lineWidth, K = H - F, ne = j - s / 2, ue = ne - P, de = K / (re - 1), he = 2 * Math.PI * j * K / (Math.PI * 2), pe = Math.ceil(R / 2) / he * K;
      O.tickAngles = [], O.tickInnerRadius = [], O.tickPosition = new Array(re).fill(0).map(function(ge, ye) {
        var Oe = F + de * ye;
        return ye === 0 && (Oe += pe), ye === re - 1 && (Oe -= pe), O.tickAngles[ye] = Oe, O.tickInnerRadius[ye] = ue, [_.getCircleRadianPoint.apply(void 0, (0, n.default)(h).concat([ne, Oe])), _.getCircleRadianPoint.apply(void 0, (0, n.default)(h).concat([ue, Oe]))];
      });
    }), N;
  }
  function m(N, w) {
    return N.forEach(function(O) {
      var F = O.center, H = O.tickInnerRadius, re = O.tickAngles, h = O.axisLabel.labelGap, j = re.map(function(b, P) {
        return _.getCircleRadianPoint.apply(void 0, (0, n.default)(F).concat([H[P] - h, re[P]]));
      }), s = j.map(function(b) {
        var P = (0, t.default)(b, 2), R = P[0], K = P[1];
        return {
          textAlign: R > F[0] ? "right" : "left",
          textBaseline: K > F[1] ? "bottom" : "top"
        };
      });
      O.labelPosition = j, O.labelAlign = s;
    }), N;
  }
  function y(N, w) {
    return N.forEach(function(O) {
      var F = O.axisLabel, H = O.min, re = O.max, h = O.splitNum, j = F.data, s = F.formatter, b = (re - H) / (h - 1), P = new Array(h).fill(0).map(function(K, ne) {
        return parseInt(H + b * ne);
      }), R = (0, a.default)(s);
      j = (0, x.deepMerge)(P, j).map(function(K, ne) {
        var ue = K;
        return R === "string" && (ue = s.replace("{value}", K)), R === "function" && (ue = s({
          value: K,
          index: ne
        })), ue;
      }), F.data = j;
    }), N;
  }
  function f(N, w) {
    return N.forEach(function(O) {
      var F = O.data, H = O.details, re = O.center, h = H.position, j = H.offset, s = F.map(function(b) {
        var P = b.startAngle, R = b.endAngle, K = b.radius, ne = null;
        return h === "center" ? ne = re : h === "start" ? ne = _.getCircleRadianPoint.apply(void 0, (0, n.default)(re).concat([K, P])) : h === "end" && (ne = _.getCircleRadianPoint.apply(void 0, (0, n.default)(re).concat([K, R]))), k(ne, j);
      });
      O.detailsPosition = s;
    }), N;
  }
  function D(N, w) {
    return N.forEach(function(O) {
      var F = O.data, H = O.details, re = H.formatter, h = (0, a.default)(re), j = F.map(function(s) {
        var b = s.value;
        return h === "string" && (b = re.replace("{value}", "{nt}"), b = b.replace("{name}", s.name)), h === "function" && (b = re(s)), b.toString();
      });
      O.detailsContent = j;
    }), N;
  }
  function k(N, w) {
    var O = (0, t.default)(N, 2), F = O[0], H = O[1], re = (0, t.default)(w, 2), h = re[0], j = re[1];
    return [F + h, H + j];
  }
  function C(N) {
    var w = N.tickPosition, O = N.animationCurve, F = N.animationFrame, H = N.rLevel;
    return w.map(function(re, h) {
      return {
        name: "polyline",
        index: H,
        visible: N.axisTick.show,
        animationCurve: O,
        animationFrame: F,
        shape: $(N, h),
        style: c(N)
      };
    });
  }
  function $(N, w) {
    var O = N.tickPosition;
    return {
      points: O[w]
    };
  }
  function c(N, w) {
    var O = N.axisTick.style;
    return O;
  }
  function M(N) {
    var w = N.labelPosition, O = N.animationCurve, F = N.animationFrame, H = N.rLevel;
    return w.map(function(re, h) {
      return {
        name: "text",
        index: H,
        visible: N.axisLabel.show,
        animationCurve: O,
        animationFrame: F,
        shape: A(N, h),
        style: p(N, h)
      };
    });
  }
  function A(N, w) {
    var O = N.labelPosition, F = N.axisLabel.data;
    return {
      content: F[w].toString(),
      position: O[w]
    };
  }
  function p(N, w) {
    var O = N.labelAlign, F = N.axisLabel, H = F.style;
    return (0, x.deepMerge)(U({}, O[w]), H);
  }
  function V(N) {
    var w = N.animationCurve, O = N.animationFrame, F = N.rLevel;
    return [{
      name: "arc",
      index: F,
      visible: N.backgroundArc.show,
      animationCurve: w,
      animationFrame: O,
      shape: X(N),
      style: ee(N)
    }];
  }
  function X(N) {
    var w = N.startAngle, O = N.endAngle, F = N.center, H = N.radius;
    return {
      rx: F[0],
      ry: F[1],
      r: H,
      startAngle: w,
      endAngle: O
    };
  }
  function ee(N) {
    var w = N.backgroundArc, O = N.arcLineWidth, F = w.style;
    return (0, x.deepMerge)({
      lineWidth: O
    }, F);
  }
  function u(N) {
    var w = V(N)[0], O = U({}, w.shape);
    return O.endAngle = w.shape.startAngle, w.shape = O, [w];
  }
  function I(N) {
    var w = N.data, O = N.animationCurve, F = N.animationFrame, H = N.rLevel;
    return w.map(function(re, h) {
      return {
        name: "agArc",
        index: H,
        animationCurve: O,
        animationFrame: F,
        shape: g(N, h),
        style: v(N, h)
      };
    });
  }
  function g(N, w) {
    var O = N.data, F = N.center, H = N.endAngle, re = O[w], h = re.radius, j = re.startAngle, s = re.endAngle, b = re.localGradient;
    return b && (H = s), {
      rx: F[0],
      ry: F[1],
      r: h,
      startAngle: j,
      endAngle: s,
      gradientEndAngle: H
    };
  }
  function v(N, w) {
    var O = N.data, F = N.dataItemStyle, H = O[w], re = H.lineWidth, h = H.gradient;
    return h = h.map(function(j) {
      return (0, z.getRgbaValue)(j);
    }), (0, x.deepMerge)({
      lineWidth: re,
      gradient: h
    }, F);
  }
  function S(N) {
    var w = I(N);
    return w.map(function(O) {
      var F = U({}, O.shape);
      F.endAngle = O.shape.startAngle, O.shape = F;
    }), w;
  }
  function J(N, w) {
    var O = N.style.gradient, F = O.length, H = w.style.gradient.length;
    if (F > H)
      O.splice(H);
    else {
      var re = O.slice(-1)[0];
      O.push.apply(O, (0, n.default)(new Array(H - F).fill(0).map(function(h) {
        return (0, n.default)(re);
      })));
    }
  }
  function Q(N) {
    var w = N.animationCurve, O = N.animationFrame, F = N.center, H = N.rLevel;
    return [{
      name: "polyline",
      index: H,
      visible: N.pointer.show,
      animationCurve: w,
      animationFrame: O,
      shape: te(N),
      style: oe(N),
      setGraphCenter: function(h, j) {
        j.style.graphCenter = F;
      }
    }];
  }
  function te(N) {
    var w = N.center;
    return {
      points: ve(w),
      close: !0
    };
  }
  function oe(N) {
    var w = N.startAngle, O = N.endAngle, F = N.min, H = N.max, re = N.data, h = N.pointer, j = N.center, s = h.valueIndex, b = h.style, P = re[s] ? re[s].value : 0, R = (P - F) / (H - F) * (O - w) + w + Math.PI / 2;
    return (0, x.deepMerge)({
      rotate: (0, x.radianToAngle)(R),
      scale: [1, 1],
      graphCenter: j
    }, b);
  }
  function ve(N) {
    var w = (0, t.default)(N, 2), O = w[0], F = w[1], H = [O, F - 40], re = [O + 5, F], h = [O, F + 10], j = [O - 5, F];
    return [H, re, h, j];
  }
  function Y(N) {
    var w = N.startAngle, O = Q(N)[0];
    return O.style.rotate = (0, x.radianToAngle)(w + Math.PI / 2), [O];
  }
  function ie(N) {
    var w = N.detailsPosition, O = N.animationCurve, F = N.animationFrame, H = N.rLevel, re = N.details.show;
    return w.map(function(h, j) {
      return {
        name: "numberText",
        index: H,
        visible: re,
        animationCurve: O,
        animationFrame: F,
        shape: ce(N, j),
        style: fe(N, j)
      };
    });
  }
  function ce(N, w) {
    var O = N.detailsPosition, F = N.detailsContent, H = N.data, re = N.details, h = O[w], j = F[w], s = H[w].value, b = re.valueToFixed;
    return {
      number: [s],
      content: j,
      position: h,
      toFixed: b
    };
  }
  function fe(N, w) {
    var O = N.details, F = N.data, H = O.style, re = F[w].color;
    return (0, x.deepMerge)({
      fill: re
    }, H);
  }
  return Ot;
}
var Gt = {}, ma;
function us() {
  if (ma) return Gt;
  ma = 1;
  var e = we;
  Object.defineProperty(Gt, "__esModule", {
    value: !0
  }), Gt.legend = x;
  var r = e(Ve()), a = e(Ne()), t = e(Be()), n = Xe(), l = Fe(), o = Ue(), _ = ze();
  function x(u) {
    var I = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, g = I.legend;
    g ? (g = (0, _.deepMerge)((0, l.deepClone)(o.legendConfig, !0), g), g = z(g), g = E(g, I, u), g = U(g, u), g = d(g, u), g = [g]) : g = [], (0, n.doUpdate)({
      chart: u,
      series: g,
      key: "legendIcon",
      getGraphConfig: $
    }), (0, n.doUpdate)({
      chart: u,
      series: g,
      key: "legendText",
      getGraphConfig: A
    });
  }
  function z(u) {
    var I = u.data;
    return u.data = I.map(function(g) {
      var v = (0, t.default)(g);
      return v === "string" ? {
        name: g
      } : v === "object" ? g : {
        name: ""
      };
    }), u;
  }
  function E(u, I, g) {
    var v = I.series, S = g.legendStatus, J = u.data.filter(function(Q) {
      var te = Q.name, oe = v.find(function(ve) {
        var Y = ve.name;
        return te === Y;
      });
      return oe ? (Q.color || (Q.color = oe.color), Q.icon || (Q.icon = oe.type), Q) : !1;
    });
    return (!S || S.length !== u.data.length) && (S = new Array(u.data.length).fill(!0)), J.forEach(function(Q, te) {
      return Q.status = S[te];
    }), u.data = J, g.legendStatus = S, u;
  }
  function U(u, I) {
    var g = I.render.ctx, v = u.data, S = u.textStyle, J = u.textUnselectedStyle;
    return v.forEach(function(Q) {
      var te = Q.status, oe = Q.name;
      Q.textWidth = T(g, oe, te ? S : J);
    }), u;
  }
  function T(u, I, g) {
    return u.font = L(g), u.measureText(I).width;
  }
  function L(u) {
    var I = u.fontFamily, g = u.fontSize;
    return "".concat(g, "px ").concat(I);
  }
  function d(u, I) {
    var g = u.orient;
    return g === "vertical" ? f(u, I) : B(u, I), u;
  }
  function B(u, I) {
    var g = u.iconHeight, v = u.itemGap, S = W(u, I), J = S.map(function(oe) {
      return G(oe, u, I);
    }), Q = m(u, I), te = {
      textAlign: "left",
      textBaseline: "middle"
    };
    S.forEach(function(oe, ve) {
      return oe.forEach(function(Y) {
        var ie = Y.iconPosition, ce = Y.textPosition, fe = J[ve], N = Q + ve * (v + g);
        Y.iconPosition = y(ie, [fe, N]), Y.textPosition = y(ce, [fe, N]), Y.align = te;
      });
    });
  }
  function W(u, I) {
    var g = u.data, v = u.iconWidth, S = I.render.area[0], J = 0, Q = [[]];
    return g.forEach(function(te, oe) {
      var ve = q(J, oe, u), Y = ve + v + 5 + te.textWidth;
      Y >= S && (J = oe, ve = q(J, oe, u), Q.push([])), te.iconPosition = [ve, 0], te.textPosition = [ve + v + 5, 0], Q.slice(-1)[0].push(te);
    }), Q;
  }
  function q(u, I, g) {
    var v = g.data, S = g.iconWidth, J = g.itemGap, Q = v.slice(u, I);
    return (0, _.mulAdd)(Q.map(function(te) {
      var oe = te.textWidth;
      return oe;
    })) + (I - u) * (J + 5 + S);
  }
  function G(u, I, g) {
    var v = I.left, S = I.right, J = I.iconWidth, Q = I.itemGap, te = g.render.area[0], oe = u.length, ve = (0, _.mulAdd)(u.map(function(ie) {
      var ce = ie.textWidth;
      return ce;
    })) + oe * (5 + J) + (oe - 1) * Q, Y = [v, S].findIndex(function(ie) {
      return ie !== "auto";
    });
    return Y === -1 ? (te - ve) / 2 : Y === 0 ? typeof v == "number" ? v : parseInt(v) / 100 * te : (typeof S != "number" && (S = parseInt(S) / 100 * te), te - (ve + S));
  }
  function m(u, I) {
    var g = u.top, v = u.bottom, S = u.iconHeight, J = I.render.area[1], Q = [g, v].findIndex(function(ie) {
      return ie !== "auto";
    }), te = S / 2;
    if (Q === -1) {
      var oe = I.gridArea, ve = oe.y, Y = oe.h;
      return ve + Y + 45 - te;
    } else return Q === 0 ? typeof g == "number" ? g - te : parseInt(g) / 100 * J - te : (typeof v != "number" && (v = parseInt(v) / 100 * J), J - v - te);
  }
  function y(u, I) {
    var g = (0, a.default)(u, 2), v = g[0], S = g[1], J = (0, a.default)(I, 2), Q = J[0], te = J[1];
    return [v + Q, S + te];
  }
  function f(u, I) {
    var g = D(u, I), v = (0, a.default)(g, 2), S = v[0], J = v[1], Q = k(u, I);
    C(u, S);
    var te = {
      textAlign: "left",
      textBaseline: "middle"
    };
    u.data.forEach(function(oe) {
      var ve = oe.textPosition, Y = oe.iconPosition;
      oe.textPosition = y(ve, [J, Q]), oe.iconPosition = y(Y, [J, Q]), oe.align = te;
    });
  }
  function D(u, I) {
    var g = u.left, v = u.right, S = I.render.area[0], J = [g, v].findIndex(function(te) {
      return te !== "auto";
    });
    if (J === -1)
      return [!0, S - 10];
    var Q = [g, v][J];
    return typeof Q != "number" && (Q = parseInt(Q) / 100 * S), [!!J, Q];
  }
  function k(u, I) {
    var g = u.iconHeight, v = u.itemGap, S = u.data, J = u.top, Q = u.bottom, te = I.render.area[1], oe = S.length, ve = oe * g + (oe - 1) * v, Y = [J, Q].findIndex(function(ce) {
      return ce !== "auto";
    });
    if (Y === -1)
      return (te - ve) / 2;
    var ie = [J, Q][Y];
    return typeof ie != "number" && (ie = parseInt(ie) / 100 * te), Y === 1 && (ie = te - ie - ve), ie;
  }
  function C(u, I) {
    var g = u.data, v = u.iconWidth, S = u.iconHeight, J = u.itemGap, Q = S / 2;
    g.forEach(function(te, oe) {
      var ve = te.textWidth, Y = (S + J) * oe + Q, ie = I ? 0 - v : 0, ce = I ? ie - 5 - ve : v + 5;
      te.iconPosition = [ie, Y], te.textPosition = [ce, Y];
    });
  }
  function $(u, I) {
    var g = u.data, v = u.selectAble, S = u.animationCurve, J = u.animationFrame, Q = u.rLevel;
    return g.map(function(te, oe) {
      return (0, r.default)({
        name: te.icon === "line" ? "lineIcon" : "rect",
        index: Q,
        visible: u.show,
        hover: v,
        click: v,
        animationCurve: S,
        animationFrame: J,
        shape: c(u, oe),
        style: M(u, oe)
      }, "click", ee(u, oe, I));
    });
  }
  function c(u, I) {
    var g = u.data, v = u.iconWidth, S = u.iconHeight, J = (0, a.default)(g[I].iconPosition, 2), Q = J[0], te = J[1], oe = S / 2;
    return {
      x: Q,
      y: te - oe,
      w: v,
      h: S
    };
  }
  function M(u, I) {
    var g = u.data, v = u.iconStyle, S = u.iconUnselectedStyle, J = g[I], Q = J.status, te = J.color, oe = Q ? v : S;
    return (0, _.deepMerge)({
      fill: te
    }, oe);
  }
  function A(u, I) {
    var g = u.data, v = u.selectAble, S = u.animationCurve, J = u.animationFrame, Q = u.rLevel;
    return g.map(function(te, oe) {
      return {
        name: "text",
        index: Q,
        visible: u.show,
        hover: v,
        animationCurve: S,
        animationFrame: J,
        hoverRect: X(u, oe),
        shape: p(u, oe),
        style: V(u, oe),
        click: ee(u, oe, I)
      };
    });
  }
  function p(u, I) {
    var g = u.data[I], v = g.textPosition, S = g.name;
    return {
      content: S,
      position: v
    };
  }
  function V(u, I) {
    var g = u.textStyle, v = u.textUnselectedStyle, S = u.data[I], J = S.status, Q = S.align, te = J ? g : v;
    return (0, _.deepMerge)((0, l.deepClone)(te, !0), Q);
  }
  function X(u, I) {
    var g = u.textStyle, v = u.textUnselectedStyle, S = u.data[I], J = S.status, Q = (0, a.default)(S.textPosition, 2), te = Q[0], oe = Q[1], ve = S.textWidth, Y = J ? g : v, ie = Y.fontSize;
    return [te, oe - ie / 2, ve, ie];
  }
  function ee(u, I, g) {
    var v = u.data[I].name;
    return function() {
      var S = g.chart, J = S.legendStatus, Q = S.option, te = !J[I], oe = Q.series.find(function(ve) {
        var Y = ve.name;
        return Y === v;
      });
      oe.show = te, J[I] = te, g.chart.setOption(Q);
    };
  }
  return Gt;
}
var ya;
function cs() {
  return ya || (ya = 1, function(e) {
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), Object.defineProperty(e, "mergeColor", {
      enumerable: !0,
      get: function() {
        return r.mergeColor;
      }
    }), Object.defineProperty(e, "title", {
      enumerable: !0,
      get: function() {
        return a.title;
      }
    }), Object.defineProperty(e, "grid", {
      enumerable: !0,
      get: function() {
        return t.grid;
      }
    }), Object.defineProperty(e, "axis", {
      enumerable: !0,
      get: function() {
        return n.axis;
      }
    }), Object.defineProperty(e, "line", {
      enumerable: !0,
      get: function() {
        return l.line;
      }
    }), Object.defineProperty(e, "bar", {
      enumerable: !0,
      get: function() {
        return o.bar;
      }
    }), Object.defineProperty(e, "pie", {
      enumerable: !0,
      get: function() {
        return _.pie;
      }
    }), Object.defineProperty(e, "radarAxis", {
      enumerable: !0,
      get: function() {
        return x.radarAxis;
      }
    }), Object.defineProperty(e, "radar", {
      enumerable: !0,
      get: function() {
        return z.radar;
      }
    }), Object.defineProperty(e, "gauge", {
      enumerable: !0,
      get: function() {
        return E.gauge;
      }
    }), Object.defineProperty(e, "legend", {
      enumerable: !0,
      get: function() {
        return U.legend;
      }
    });
    var r = Zl(), a = es(), t = ts(), n = rs(), l = ns(), o = as(), _ = is(), x = os(), z = ls(), E = ss(), U = us();
  }(Ar)), Ar;
}
var ba;
function fs() {
  return ba || (ba = 1, function(e) {
    var r = we;
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.default = void 0;
    var a = r(Be()), t = r(mt()), n = r(jt), l = Fe(), o = cs(), _ = function x(z) {
      if ((0, t.default)(this, x), !z)
        return console.error("Charts Missing parameters!"), !1;
      var E = z.clientWidth, U = z.clientHeight, T = document.createElement("canvas");
      T.setAttribute("width", E), T.setAttribute("height", U), z.appendChild(T);
      var L = {
        container: z,
        canvas: T,
        render: new n.default(T),
        option: null
      };
      Object.assign(this, L);
    };
    e.default = _, _.prototype.setOption = function(x) {
      var z = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;
      if (!x || (0, a.default)(x) !== "object")
        return console.error("setOption Missing parameters!"), !1;
      z && this.render.graphs.forEach(function(U) {
        return U.animationEnd();
      });
      var E = (0, l.deepClone)(x, !0);
      (0, o.mergeColor)(this, E), (0, o.grid)(this, E), (0, o.axis)(this, E), (0, o.radarAxis)(this, E), (0, o.title)(this, E), (0, o.bar)(this, E), (0, o.line)(this, E), (0, o.pie)(this, E), (0, o.radar)(this, E), (0, o.gauge)(this, E), (0, o.legend)(this, E), this.option = x, this.render.launchAnimation();
    }, _.prototype.resize = function() {
      var x = this.container, z = this.canvas, E = this.render, U = this.option, T = x.clientWidth, L = x.clientHeight;
      z.setAttribute("width", T), z.setAttribute("height", L), E.area = [T, L], this.setOption(U);
    };
  }(kr)), kr;
}
(function(e) {
  var r = we;
  Object.defineProperty(e, "__esModule", {
    value: !0
  }), Object.defineProperty(e, "changeDefaultConfig", {
    enumerable: !0,
    get: function() {
      return t.changeDefaultConfig;
    }
  }), e.default = void 0;
  var a = r(fs()), t = Ue(), n = a.default;
  e.default = n;
})(Ma);
const Fa = /* @__PURE__ */ Aa(Ma), ds = {
  __name: "index",
  props: {
    option: {
      type: Object,
      default: () => ({})
    }
  },
  setup(e) {
    const r = e, a = me(null), t = me(null);
    let n = Pe({});
    xe(t, _, l), ke(() => r.option, () => {
      n && n.setOption(r.option, !0);
    }, { deep: !0 });
    function l() {
      o();
    }
    function o() {
      n = new Fa(t.value), r.option && n.setOption(r.option);
    }
    function _() {
      n && n.resize();
    }
    return (x, z) => (le(), se("div", {
      ref_key: "chartsContainerRef",
      ref: a,
      class: "dv-charts-container"
    }, [
      ae("div", {
        ref_key: "chartRef",
        ref: t,
        class: "charts-canvas-container"
      }, null, 512)
    ], 512));
  }
}, Sr = {
  install(e) {
    e.component("DvCharts", ds);
  }
}, hs = { class: "dv-capsule-chart" }, vs = { class: "label-column" }, ps = { class: "capsule-container" }, gs = {
  key: 0,
  class: "capsule-item-value"
}, ms = { class: "unit-label" }, ys = {
  key: 0,
  class: "unit-text"
}, bs = {
  __name: "index",
  props: {
    config: {
      type: Object,
      default: () => ({})
    }
  },
  setup(e) {
    pt((x) => ({
      "1b634ae3": i(n),
      "63348aba": i(t)
    }));
    const r = e, a = Pe({
      defaultConfig: {
        /**
         * @description Capsule chart data
         * @type {Array<object>}
         * @default data = []
         * @example data = [{ name: 'foo1', value: 100 }, { name: 'foo2', value: 100 }]
         */
        data: [],
        /**
         * @description Colors (hex|rgb|rgba|color keywords)
         * @type {Array<string>}
         * @default color = ['#37a2da', '#32c5e9', '#67e0e3', '#9fe6b8', '#ffdb5c', '#ff9f7f', '#fb7293']
         * @example color = ['#000', 'rgb(0, 0, 0)', 'rgba(0, 0, 0, 1)', 'red']
         */
        colors: [
          "#37a2da",
          "#32c5e9",
          "#67e0e3",
          "#9fe6b8",
          "#ffdb5c",
          "#ff9f7f",
          "#fb7293"
        ],
        /**
         * @description Chart unit
         * @type {string}
         * @default unit = ''
         */
        unit: "",
        /**
         * @description Show item value
         * @type {boolean}
         * @default showValue = false
         */
        showValue: !1,
        /**
         * @description Text color
         * @type {string}
         * @default textColor = '#fff'
         */
        textColor: "#fff",
        /**
         * @description Chart font size
         * @type {number}
         * @default fontSize = 12
         */
        fontSize: 12,
        /**
         * @description num of labels
         * @type {number}
         * @default labelNum = 6
         */
        labelNum: 6
      },
      mergedConfig: null,
      capsuleLength: [],
      capsuleValue: [],
      labelData: [],
      labelDataLength: []
    });
    ke(() => r.config, () => {
      l();
    }, {
      deep: !0
    });
    const t = be(() => `${r.config.fontSize ? r.config.fontSize : a.defaultConfig.fontSize}px`), n = be(() => r.config.textColor ? r.config.textColor : a.defaultConfig.textColor);
    function l() {
      o(), _();
    }
    function o() {
      a.mergedConfig = Ce(
        _e(a.defaultConfig),
        r.config || {}
      );
    }
    function _() {
      const { data: x, labelNum: z } = a.mergedConfig;
      if (!x.length || x.length === 0) {
        a.labelData = [], a.capsuleLength = [];
        return;
      }
      const E = x.map(({ value: d }) => d), U = Math.max(...E);
      a.capsuleValue = E, a.capsuleLength = E.map((d) => U ? d / U : 0);
      const T = U / 5, L = Array.from(
        new Set(Array.from({ length: z }).fill(0).map((d, B) => Math.ceil(B * T)))
      );
      a.labelData = L, a.labelDataLength = Array.from(L).map(
        (d) => U ? d / U : 0
      );
    }
    return Re(() => {
      l();
    }), (x, z) => (le(), se("div", hs, [
      i(a).mergedConfig ? (le(), se(Ae, { key: 0 }, [
        ae("div", vs, [
          (le(!0), se(Ae, null, Se(i(a).mergedConfig.data, (E) => (le(), se("div", {
            key: E.name
          }, We(E.name), 1))), 128)),
          z[0] || (z[0] = ae("div", null, " ", -1))
        ]),
        ae("div", ps, [
          (le(!0), se(Ae, null, Se(i(a).capsuleLength, (E, U) => (le(), se("div", {
            key: U,
            class: "capsule-item"
          }, [
            ae("div", {
              class: "capsule-item-column",
              style: Ge(`width: ${E * 100}%; background-color: ${i(a).mergedConfig.colors[U % i(a).mergedConfig.colors.length]};`)
            }, [
              i(a).mergedConfig.showValue ? (le(), se("div", gs, We(i(a).capsuleValue[U]), 1)) : $e("", !0)
            ], 4)
          ]))), 128)),
          ae("div", ms, [
            (le(!0), se(Ae, null, Se(i(a).labelData, (E, U) => (le(), se("div", {
              key: E + U
            }, We(E), 1))), 128))
          ])
        ]),
        i(a).mergedConfig.unit ? (le(), se("div", ys, We(i(a).mergedConfig.unit), 1)) : $e("", !0)
      ], 64)) : $e("", !0)
    ]));
  }
}, Or = {
  install(e) {
    e.component("DvCapsuleChart", bs);
  }
}, xs = { class: "dv-digital-flop" }, Ba = {
  __name: "index",
  props: {
    config: {
      type: Object,
      default: () => {
      }
    }
  },
  setup(e) {
    const r = e, a = me(null), t = Pe({
      renderer: null,
      defaultConfig: {
        /**
         * @description Number for digital flop
         * @type {Array<number>}
         * @default number = []
         * @example number = [10]
         */
        number: [],
        /**
         * @description Content formatter
         * @type {string}
         * @default content = ''
         * @example content = '{nt}个'
         */
        content: "",
        /**
         * @description Number toFixed
         * @type {number}
         * @default toFixed = 0
         */
        toFixed: 0,
        /**
         * @description Text align
         * @type {string}
         * @default textAlign = 'center'
         * @example textAlign = 'center' | 'left' | 'right'
         */
        textAlign: "center",
        /**
         * @description rowGap
         * @type {number}
             @default rowGap = 0
         */
        rowGap: 0,
        /**
         * @description Text style configuration
         * @type {object} {CRender Class Style}
         */
        style: {
          fontSize: 30,
          fill: "#3de7c9"
        },
        /**
         * @description Number formatter
         * @type {null | Function}
         */
        formatter: void 0,
        /**
         * @description CRender animationCurve
         * @type {string}
         * @default animationCurve = 'easeOutCubic'
         */
        animationCurve: "easeOutCubic",
        /**
         * @description CRender animationFrame
         * @type {string}
         * @default animationFrame = 50
         */
        animationFrame: 50
      },
      mergedConfig: null,
      graph: null
    });
    ke(() => r.config, () => {
      E();
    }, { deep: !0 }), Re(() => {
      n();
    });
    function n() {
      l(), o(), _();
    }
    function l() {
      t.renderer = new Ga(a.value);
    }
    function o() {
      t.mergedConfig = Ce(_e(t.defaultConfig), r.config || {});
    }
    function _() {
      const T = x(), L = z();
      t.graph = t.renderer.add({
        name: "numberText",
        animationCurve: t.mergedConfig.animationCurve,
        animationFrame: t.mergedConfig.animationFrame,
        shape: T,
        style: L
      });
    }
    function x() {
      const { number: T, content: L, toFixed: d, textAlign: B, rowGap: W, formatter: q } = t.mergedConfig, [G, m] = t.renderer.area, y = [G / 2, m / 2];
      return B === "left" && (y[0] = 0), B === "right" && (y[0] = G), {
        number: T,
        content: L,
        toFixed: d,
        position: y,
        rowGap: W,
        formatter: q
      };
    }
    function z() {
      const { style: T, textAlign: L } = t.mergedConfig;
      return Ce(T, {
        textAlign: L,
        textBaseline: "middle"
      });
    }
    function E() {
      if (t.graph.animationEnd(), o(), !t.graph)
        return;
      const { animationCurve: T, animationFrame: L } = t.mergedConfig, d = x(), B = z();
      U(t.graph, d), t.graph.animationCurve = T, t.graph.animationFrame = L, t.graph.animation("style", B, !0), t.graph.animation("shape", d);
    }
    function U(T, L) {
      const d = T.shape.number.length, B = L.number.length;
      d !== B && (T.shape.number = L.number);
    }
    return (T, L) => (le(), se("div", xs, [
      ae("canvas", {
        ref_key: "digitalFlop",
        ref: a
      }, null, 512)
    ]));
  }
}, Cs = { class: "dv-active-ring-chart" }, $s = { class: "active-ring-info" }, _s = { key: 0 }, Ps = {
  __name: "index",
  props: {
    config: {
      type: Object,
      default: () => ({})
    },
    isDigitalFlop: {
      type: Boolean,
      default: !0
    }
  },
  setup(e) {
    pt((q) => ({
      "18d51787": i(z)
    }));
    const r = e, a = me(null), t = Pe({
      defaultConfig: {
        /**
         * @description Ring radius
         * @type {string | number}
         * @default radius = '50%'
         * @example radius = '50%' | 100
         */
        radius: "50%",
        /**
         * @description Active ring radius
         * @type {string | number}
         * @default activeRadius = '55%'
         * @example activeRadius = '55%' | 110
         */
        activeRadius: "55%",
        /**
         * @description Ring data
         * @type {Array<object>}
         * @default data = [{ name: '', value: 0 }]
         */
        data: [{ name: "", value: 0 }],
        /**
         * @description Ring line width
         * @type {number}
         * @default lineWidth = 20
         */
        lineWidth: 20,
        /**
         * @description Active time gap (ms)
         * @type {number}
         * @default activeTimeGap = 3000
         */
        activeTimeGap: 3e3,
        /**
         * @description Ring color (hex|rgb|rgba|color keywords)
         * @type {Array<string>}
         * @default color = [Charts Default Color]
         * @example color = ['#000', 'rgb(0, 0, 0)', 'rgba(0, 0, 0, 1)', 'red']
         */
        color: [],
        /**
         * @description Text color
         * @type {string}
         * @default textColor = '#fff'
         */
        textColor: "#fff",
        /**
         * @description Digital flop style
         * @type {object}
         */
        digitalFlopStyle: {
          fontSize: 25,
          fill: "#fff"
        },
        /**
         * @description Digital flop toFixed
         * @type {number}
         */
        digitalFlopToFixed: 0,
        /**
         * @description percent number toFixed
         * @type {number}
         */
        numToFixed: 0,
        /**
         * @description Digital flop unit
         * @type {string}
         */
        digitalFlopUnit: "",
        /**
         * @description CRender animationCurve
         * @type {string}
         * @default animationCurve = 'easeOutCubic'
         */
        animationCurve: "easeOutCubic",
        /**
         * @description CRender animationFrame
         * @type {string}
         * @default animationFrame = 50
         */
        animationFrame: 50,
        /**
         * @description showOriginValue
         * @type {boolean}
         * @default showOriginValue = false
         */
        showOriginValue: !1
      },
      mergedConfig: null,
      chart: null,
      activeIndex: 0,
      animationHandler: ""
    }), n = be(() => {
      if (!t.mergedConfig)
        return 0;
      const { data: q, showOriginValue: G } = t.mergedConfig, m = q.map(({ value: f }) => f);
      let y;
      if (G)
        y = m[t.activeIndex];
      else {
        const f = m.reduce((k, C) => k + C, 0);
        y = Number.parseFloat(m[t.activeIndex] / f * 100) || 0;
      }
      return y;
    }), l = be(() => {
      if (!t.mergedConfig)
        return n.value.toFixed(t.defaultConfig.numToFixed);
      const { numToFixed: q, showOriginValue: G } = t.mergedConfig;
      return `${G ? n.value.toFixed(q) : `${n.value.toFixed(q)}%`}`;
    }), o = be(() => {
      if (!t.mergedConfig)
        return {};
      const {
        digitalFlopStyle: q,
        digitalFlopToFixed: G,
        showOriginValue: m,
        digitalFlopUnit: y
      } = t.mergedConfig;
      return {
        content: m ? `{nt}${y}` : `{nt}${y || "%"}`,
        number: [n.value],
        style: q,
        toFixed: G
      };
    }), _ = be(() => t.mergedConfig ? t.mergedConfig.data[t.activeIndex].name : ""), x = be(() => t.mergedConfig ? `font-size: ${t.mergedConfig.digitalFlopStyle.fontSize}px;` : ""), z = be(() => r.config.textColor ? r.config.textColor : t.defaultConfig.textColor);
    ke(() => r.config, () => {
      clearTimeout(t.animationHandler), t.activeIndex = 0, T(), L();
    }, {
      deep: !0
    }), Re(() => {
      E();
    }), Ft(() => {
      clearTimeout(t.animationHandler);
    });
    function E() {
      U(), T(), L();
    }
    function U() {
      t.chart = new Fa(a.value);
    }
    function T() {
      t.mergedConfig = Ce(
        _e(t.defaultConfig),
        r.config || {}
      );
    }
    function L() {
      const q = d();
      t.chart.setOption(q, !0), W();
    }
    function d() {
      const q = B();
      return t.mergedConfig.data.forEach((G) => {
        G.radius = q;
      }), {
        series: [
          {
            type: "pie",
            ...t.mergedConfig,
            outsideLabel: {
              show: !1
            }
          }
        ],
        color: t.mergedConfig.color
      };
    }
    function B(q = !1) {
      const { radius: G, activeRadius: m, lineWidth: y } = t.mergedConfig, f = Math.min(...t.chart.render.area) / 2, D = y / 2;
      let k = q ? m : G;
      typeof k != "number" && (k = Number.parseInt(k) / 100 * f);
      const C = k - D, $ = k + D;
      return [C, $];
    }
    function W() {
      const q = B(), G = B(!0), m = d(), { data: y } = m.series[0];
      y.forEach((D, k) => {
        k === t.activeIndex ? D.radius = G : D.radius = q;
      }), t.chart.setOption(m, !0);
      const { activeTimeGap: f } = m.series[0];
      t.animationHandler = setTimeout(() => {
        t.activeIndex += 1, t.activeIndex >= y.length && (t.activeIndex = 0), W();
      }, f);
    }
    return (q, G) => (le(), se("div", Cs, [
      ae("div", {
        ref_key: "activeRingChart",
        ref: a,
        class: "active-ring-chart-container"
      }, null, 512),
      ae("div", $s, [
        e.isDigitalFlop ? (le(), se("div", _s, [
          Z(Ba, { config: i(o) }, null, 8, ["config"])
        ])) : (le(), se("div", {
          key: 1,
          class: "active-ring-name",
          style: Ge(i(x))
        }, We(i(l)), 5)),
        ae("div", {
          class: "active-ring-name",
          style: Ge(i(x))
        }, We(i(_)), 5)
      ])
    ]));
  }
}, Gr = {
  install(e) {
    e.component("DvActiveRingChart", Ps);
  }
}, Mr = {
  install(e) {
    e.component("DvDigitalFlop", Ba);
  }
}, ws = /* @__PURE__ */ Le({
  __name: "index",
  setup(e) {
    const r = me(null), a = Pe({
      allWidth: 0,
      scale: 0,
      datavRoot: "",
      ready: !1
    });
    function t() {
      const { width: _, height: x } = screen;
      a.allWidth = _, r.value && (r.value.style.width = `${_}px`, r.value.style.height = `${x}px`);
    }
    function n() {
      const _ = document.body.clientWidth;
      r.value && (r.value.style.transform = `scale(${_ / a.allWidth})`);
    }
    function l() {
      n();
    }
    function o() {
      t(), n(), a.ready = !0;
    }
    return xe(r, l, o), (_, x) => (le(), se("div", {
      id: "dv-full-screen-container",
      ref_key: "fullScreenContainer",
      ref: r
    }, [
      i(a).ready ? Me(_.$slots, "default", { key: 0 }) : $e("", !0)
    ], 512));
  }
}), Rr = {
  install(e) {
    e.component("DvFullScreenContainer", ws);
  }
}, ks = ["width", "height"], As = ["fill", "x", "y", "width", "height"], Ls = ["values", "begin"], Ss = ["fill", "x", "y", "width", "height"], Os = ["values"], Gs = ["values"], Ms = ["values"], Rs = ["values"], Ds = ["fill", "x", "y", "height"], Ts = ["values"], Fs = /* @__PURE__ */ Le({
  __name: "index",
  props: {
    color: {
      type: Array,
      default: () => []
    }
  },
  setup(e) {
    const r = e, a = me(null), t = Pe([200, 50]), n = me(4), l = me(20), o = me(2.5), _ = me(o.value / 2), x = Pe(["#fff", "#0de7c2"]), z = Pe({
      mergedColor: [],
      rects: [],
      points: [],
      svgScale: [1, 1]
    });
    function E() {
      q();
    }
    function U() {
      q();
    }
    const { width: T, height: L } = xe(a, E, U);
    function d() {
      const [m, y] = t, f = m / (l.value + 1), D = y / (n.value + 1), k = Array.from({ length: n.value }).fill(0).map((C, $) => Array.from({ length: l.value }).fill(0).map((c, M) => [
        f * (M + 1),
        D * ($ + 1)
      ]));
      z.points = k.reduce((C, $) => [...C, ...$], []);
    }
    function B() {
      const m = z.points[l.value * 2 - 1], y = z.points[l.value * 2 - 3];
      z.rects = [m, y];
    }
    function W() {
      const [m, y] = t;
      z.svgScale = [T.value / m, L.value / y];
    }
    function q() {
      d(), B(), W();
    }
    function G() {
      z.mergedColor = Ce(_e(x), r.color || []);
    }
    return ke(() => r.color, () => {
      G();
    }, { deep: !0 }), Re(() => {
      G();
    }), (m, y) => (le(), se("div", {
      ref_key: "dvDecoration1",
      ref: a,
      class: "dv-decoration-1"
    }, [
      (le(), se("svg", {
        width: `${i(t)[0]}px`,
        height: `${i(t)[1]}px`,
        style: Ge(`transform:scale(${i(z).svgScale[0]}, ${i(z).svgScale[1]});`)
      }, [
        (le(!0), se(Ae, null, Se(i(z).points, (f) => (le(), se(Ae, { key: f }, [
          Math.random() > 0.6 ? (le(), se("rect", {
            key: 0,
            fill: i(z).mergedColor[0],
            x: f[0] - i(_),
            y: f[1] - i(_),
            width: i(o),
            height: i(o)
          }, [
            Math.random() > 0.6 ? (le(), se("animate", {
              key: 0,
              attributeName: "fill",
              values: `${i(z).mergedColor[0]};transparent`,
              dur: "1s",
              begin: Math.random() * 2,
              repeatCount: "indefinite"
            }, null, 8, Ls)) : $e("", !0)
          ], 8, As)) : $e("", !0)
        ], 64))), 128)),
        i(z).rects[0] ? (le(), se("rect", {
          key: 0,
          fill: i(z).mergedColor[1],
          x: i(z).rects[0][0] - i(o),
          y: i(z).rects[0][1] - i(o),
          width: i(o) * 2,
          height: i(o) * 2
        }, [
          ae("animate", {
            attributeName: "width",
            values: `0;${i(o) * 2}`,
            dur: "2s",
            repeatCount: "indefinite"
          }, null, 8, Os),
          ae("animate", {
            attributeName: "height",
            values: `0;${i(o) * 2}`,
            dur: "2s",
            repeatCount: "indefinite"
          }, null, 8, Gs),
          ae("animate", {
            attributeName: "x",
            values: `${i(z).rects[0][0]};${i(z).rects[0][0] - i(o)}`,
            dur: "2s",
            repeatCount: "indefinite"
          }, null, 8, Ms),
          ae("animate", {
            attributeName: "y",
            values: `${i(z).rects[0][1]};${i(z).rects[0][1] - i(o)}`,
            dur: "2s",
            repeatCount: "indefinite"
          }, null, 8, Rs)
        ], 8, Ss)) : $e("", !0),
        i(z).rects[1] ? (le(), se("rect", {
          key: 1,
          fill: i(z).mergedColor[1],
          x: i(z).rects[1][0] - 40,
          y: i(z).rects[1][1] - i(o),
          width: 40,
          height: i(o) * 2
        }, [
          y[0] || (y[0] = ae("animate", {
            attributeName: "width",
            values: "0;40;0",
            dur: "2s",
            repeatCount: "indefinite"
          }, null, -1)),
          ae("animate", {
            attributeName: "x",
            values: `${i(z).rects[1][0]};${i(z).rects[1][0] - 40};${i(z).rects[1][0]}`,
            dur: "2s",
            repeatCount: "indefinite"
          }, null, 8, Ts)
        ], 8, Ds)) : $e("", !0)
      ], 12, ks))
    ], 512));
  }
}), Dr = {
  install(e) {
    e.component("DvDecoration1", Fs);
  }
}, Bs = ["width", "height"], Ns = ["x", "y", "width", "height", "fill"], Ws = ["attributeName", "to", "dur"], js = ["x", "y", "fill"], Es = ["attributeName", "to", "dur"], zs = /* @__PURE__ */ Le({
  __name: "index",
  props: {
    color: {
      type: Array,
      default: () => []
    },
    reverse: {
      type: Boolean,
      default: !1
    },
    dur: {
      type: Number,
      default: 6
    }
  },
  setup(e) {
    const r = e, a = me(null), t = Pe({
      x: 0,
      y: 0,
      w: 0,
      h: 0,
      defaultColor: ["#3faacb", "#fff"],
      mergedColor: []
    });
    function n() {
      t.mergedColor = Ce(_e(t.defaultColor), r.color || []);
    }
    function l() {
      z();
    }
    function o() {
      z();
    }
    const { width: _, height: x } = xe(a, l, o);
    function z() {
      r.reverse ? (t.w = 1, t.h = x.value, t.x = _.value / 2, t.y = 0) : (t.w = _.value, t.h = 1, t.x = 0, t.y = x.value / 2);
    }
    return ke(() => r.color, () => {
      n();
    }, { deep: !0 }), ke(() => r.reverse, () => {
      z();
    }), Re(() => {
      n();
    }), (E, U) => (le(), se("div", {
      ref_key: "decoration2",
      ref: a,
      class: "dv-decoration-2"
    }, [
      (le(), se("svg", {
        width: `${i(_)}px`,
        height: `${i(x)}px`
      }, [
        ae("rect", {
          x: i(t).x,
          y: i(t).y,
          width: i(t).w,
          height: i(t).h,
          fill: i(t).mergedColor[0]
        }, [
          ae("animate", {
            attributeName: e.reverse ? "height" : "width",
            from: "0",
            to: e.reverse ? i(x) : i(_),
            dur: `${e.dur}s`,
            calcMode: "spline",
            keyTimes: "0;1",
            keySplines: ".42,0,.58,1",
            repeatCount: "indefinite"
          }, null, 8, Ws)
        ], 8, Ns),
        ae("rect", {
          x: i(t).x,
          y: i(t).y,
          width: "1",
          height: "1",
          fill: i(t).mergedColor[1]
        }, [
          ae("animate", {
            attributeName: e.reverse ? "y" : "x",
            from: "0",
            to: e.reverse ? i(x) : i(_),
            dur: `${e.dur}s`,
            calcMode: "spline",
            keyTimes: "0;1",
            keySplines: "0.42,0,0.58,1",
            repeatCount: "indefinite"
          }, null, 8, Es)
        ], 8, js)
      ], 8, Bs))
    ], 512));
  }
}), Tr = {
  install(e) {
    e.component("DvDecoration2", zs);
  }
}, qs = ["width", "height"], Is = ["fill", "x", "y"], Hs = ["values", "dur", "begin"], Mt = 7, Vs = /* @__PURE__ */ Le({
  __name: "index",
  props: {
    color: {
      type: Array,
      default: () => []
    }
  },
  setup(e) {
    const r = e, a = me(null), t = Pe({
      svgWH: [300, 35],
      svgScale: [1, 1],
      rowNum: 2,
      rowPoints: 25,
      pointSideLength: Mt,
      halfPointSideLength: Mt / 2,
      points: [],
      defaultColor: ["#7acaec", "transparent"],
      mergedColor: []
    });
    function n() {
      const [T, L] = t.svgWH, d = T / (t.rowPoints + 1), B = L / (t.rowNum + 1), W = Array.from({ length: t.rowNum }).fill(0).map((q, G) => Array.from({ length: t.rowPoints }).fill(0).map((m, y) => [
        d * (y + 1),
        B * (G + 1)
      ]));
      t.points = W.reduce((q, G) => [...q, ...G], []);
    }
    function l() {
      o();
    }
    function o() {
      n(), E();
    }
    function _() {
      o();
    }
    const { width: x, height: z } = xe(a, _, l);
    function E() {
      const [T, L] = t.svgWH;
      t.svgScale = [x.value / T, z.value / L];
    }
    function U() {
      t.mergedColor = Ce(_e(t.defaultColor), r.color || []);
    }
    return ke(() => r.color, () => {
      U();
    }, { deep: !0 }), Re(() => {
      U();
    }), (T, L) => (le(), se("div", {
      ref_key: "decoration3",
      ref: a,
      class: "dv-decoration-3"
    }, [
      (le(), se("svg", {
        width: `${i(t).svgWH[0]}px`,
        height: `${i(t).svgWH[1]}px`,
        style: Ge(`transform:scale(${i(t).svgScale[0]},${i(t).svgScale[1]});`)
      }, [
        (le(!0), se(Ae, null, Se(i(t).points, (d) => (le(), se("rect", {
          key: d,
          fill: i(t).mergedColor[0],
          x: d[0] - i(t).halfPointSideLength,
          y: d[1] - i(t).halfPointSideLength,
          width: Mt,
          height: Mt
        }, [
          Math.random() > 0.6 ? (le(), se("animate", {
            key: 0,
            attributeName: "fill",
            values: `${i(t).mergedColor.join(";")}`,
            dur: `${Math.random() + 1}s`,
            begin: Math.random() * 2,
            repeatCount: "indefinite"
          }, null, 8, Hs)) : $e("", !0)
        ], 8, Is))), 128))
      ], 12, qs))
    ], 512));
  }
}), Fr = {
  install(e) {
    e.component("DvDecoration3", Vs);
  }
}, Us = ["width", "height"], Xs = ["stroke", "points"], Qs = ["stroke", "points"], Ys = /* @__PURE__ */ Le({
  __name: "index",
  props: {
    color: {
      type: Array,
      default: () => []
    },
    reverse: {
      type: Boolean,
      default: !1
    },
    dur: {
      type: Number,
      default: 3
    }
  },
  setup(e) {
    const r = e, a = me(null), t = Pe({
      defaultColor: ["rgba(255, 255, 255, 0.3)", "rgba(255, 255, 255, 0.3)"],
      mergedColor: []
    });
    function n() {
      t.mergedColor = Ce(_e(t.defaultColor), r.color || []);
    }
    const { width: l, height: o } = xe(a);
    return ke(() => r.color, () => {
      n();
    }, { deep: !0 }), Re(() => {
      n();
    }), (_, x) => (le(), se("div", {
      ref_key: "decoration3",
      ref: a,
      class: "dv-decoration-4"
    }, [
      ae("div", {
        class: Ua(`container ${e.reverse ? "reverse" : "normal"}`),
        style: Ge(e.reverse ? `width:${i(l)}px;height:5px;animation-duration:${e.dur}s` : `width:5px;height:${i(o)}px;animation-duration:${e.dur}s`)
      }, [
        (le(), se("svg", {
          width: e.reverse ? i(l) : 5,
          height: e.reverse ? 5 : i(o)
        }, [
          ae("polyline", {
            stroke: i(t).mergedColor[0],
            points: e.reverse ? `0, 2.5 ${i(l)}, 2.5` : `2.5, 0 2.5, ${i(o)}`
          }, null, 8, Xs),
          ae("polyline", {
            class: "bold-line",
            stroke: i(t).mergedColor[1],
            "stroke-width": "3",
            "stroke-dasharray": "20, 80",
            "stroke-dashoffset": "-30",
            points: e.reverse ? `0, 2.5 ${i(l)}, 2.5` : `2.5, 0 2.5, ${i(o)}`
          }, null, 8, Qs)
        ], 8, Us))
      ], 6)
    ], 512));
  }
}), Br = {
  install(e) {
    e.component("DvDecoration4", Ys);
  }
}, Ks = ["width", "height"], Js = ["stroke", "points"], Zs = ["from", "to", "dur"], eu = ["stroke", "points"], tu = ["from", "to", "dur"], ru = /* @__PURE__ */ Le({
  __name: "index",
  props: {
    color: {
      type: Array,
      default: () => []
    },
    dur: {
      type: Number,
      default: 1.2
    }
  },
  setup(e) {
    const r = e, a = me(null), t = Pe({
      line1Points: "",
      line2Points: "",
      line1Length: 0,
      line2Length: 0,
      defaultColor: ["#3f96a5", "#3f96a5"],
      mergedColor: []
    });
    function n() {
      x();
    }
    function l() {
      x();
    }
    const { width: o, height: _ } = xe(a, l, n);
    function x() {
      const E = [
        { x: 0, y: _.value * 0.2 },
        { x: o.value * 0.18, y: _.value * 0.2 },
        { x: o.value * 0.2, y: _.value * 0.4 },
        { x: o.value * 0.25, y: _.value * 0.4 },
        { x: o.value * 0.27, y: _.value * 0.6 },
        { x: o.value * 0.72, y: _.value * 0.6 },
        { x: o.value * 0.75, y: _.value * 0.4 },
        { x: o.value * 0.8, y: _.value * 0.4 },
        { x: o.value * 0.82, y: _.value * 0.2 },
        { x: o.value, y: _.value * 0.2 }
      ], U = [
        { x: o.value * 0.3, y: _.value * 0.8 },
        { x: o.value * 0.7, y: _.value * 0.8 }
      ], T = hn(E), L = hn(U);
      t.line1Points = vn(E), t.line2Points = vn(U), t.line1Length = T, t.line2Length = L;
    }
    function z() {
      t.mergedColor = Ce(_e(t.defaultColor), r.color || []);
    }
    return ke(() => r.color, () => {
      z();
    }, { deep: !0 }), Re(() => {
      z();
    }), (E, U) => (le(), se("div", {
      ref_key: "decoration5",
      ref: a,
      class: "dv-decoration-5"
    }, [
      (le(), se("svg", {
        width: i(o),
        height: i(_)
      }, [
        ae("polyline", {
          fill: "transparent",
          stroke: i(t).mergedColor[0],
          "stroke-width": "3",
          points: i(t).line1Points
        }, [
          ae("animate", {
            attributeName: "stroke-dasharray",
            attributeType: "XML",
            from: `0, ${i(t).line1Length / 2}, 0, ${i(t).line1Length / 2}`,
            to: `0, 0, ${i(t).line1Length}, 0`,
            dur: `${e.dur}s`,
            begin: "0s",
            calcMode: "spline",
            keyTimes: "0;1",
            keySplines: "0.4,1,0.49,0.98",
            repeatCount: "indefinite"
          }, null, 8, Zs)
        ], 8, Js),
        ae("polyline", {
          fill: "transparent",
          stroke: i(t).mergedColor[1],
          "stroke-width": "2",
          points: i(t).line2Points
        }, [
          ae("animate", {
            attributeName: "stroke-dasharray",
            attributeType: "XML",
            from: `0, ${i(t).line2Length / 2}, 0, ${i(t).line2Length / 2}`,
            to: `0, 0, ${i(t).line2Length}, 0`,
            dur: `${e.dur}s`,
            begin: "0s",
            calcMode: "spline",
            keyTimes: "0;1",
            keySplines: ".4,1,.49,.98",
            repeatCount: "indefinite"
          }, null, 8, tu)
        ], 8, eu)
      ], 8, Ks))
    ], 512));
  }
}), Nr = {
  install(e) {
    e.component("DvDecoration5", ru);
  }
}, nu = ["width", "height"], au = ["fill", "x", "y", "height"], iu = ["values", "dur"], ou = ["values", "dur"], Wr = 7, lu = /* @__PURE__ */ Le({
  __name: "index",
  props: {
    color: {
      type: Array,
      default: () => []
    }
  },
  setup(e) {
    const r = e, a = me(null), t = Pe({
      svgWH: [300, 35],
      svgScale: [1, 1],
      rowNum: 1,
      rowPoints: 40,
      rectWidth: Wr,
      halfRectWidth: Wr / 2,
      points: [],
      heights: [],
      minHeights: [],
      randoms: [],
      defaultColor: ["#7acaec", "#7acaec"],
      mergedColor: []
    });
    ke(() => r.color, () => {
      U();
    }, { deep: !0 }), Re(() => {
      U();
    });
    const { width: n, height: l } = xe(a, E, o);
    function o() {
      _();
    }
    function _() {
      x(), z();
    }
    function x() {
      const [T, L] = t.svgWH, d = T / (t.rowPoints + 1), B = L / (t.rowNum + 1), W = Array.from({ length: t.rowNum }).fill(0).map((G, m) => Array.from({ length: t.rowPoints }).fill(0).map((y, f) => [
        d * (f + 1),
        B * (m + 1)
      ]));
      t.points = W.reduce((G, m) => [...G, ...m], []);
      const q = t.heights = Array.from({ length: t.rowNum * t.rowPoints }).fill(0).map(() => Math.random() > 0.8 ? ht(0.7 * L, L) : ht(0.2 * L, 0.5 * L));
      t.minHeights = Array.from({ length: t.rowNum * t.rowPoints }).fill(0).map((G, m) => q[m] * Math.random()), t.randoms = Array.from({ length: t.rowNum * t.rowPoints }).fill(0).map(() => Math.random() + 1.5);
    }
    function z() {
      const [T, L] = t.svgWH;
      t.svgScale = [n.value / T, l.value / L];
    }
    function E() {
      _();
    }
    function U() {
      t.mergedColor = Ce(_e(t.defaultColor), r.color || []);
    }
    return (T, L) => (le(), se("div", {
      ref_key: "decoration6",
      ref: a,
      class: "dv-decoration-6"
    }, [
      (le(), se("svg", {
        width: `${i(t).svgWH[0]}px`,
        height: `${i(t).svgWH[1]}px`,
        style: Ge(`transform:scale(${i(t).svgScale[0]},${i(t).svgScale[1]});`)
      }, [
        (le(!0), se(Ae, null, Se(i(t).points, (d, B) => (le(), se("rect", {
          key: B,
          fill: i(t).mergedColor[Math.random() > 0.5 ? 0 : 1],
          x: d[0] - i(t).halfRectWidth,
          y: d[1] - i(t).heights[B] / 2,
          width: Wr,
          height: i(t).heights[B]
        }, [
          ae("animate", {
            attributeName: "y",
            values: `${d[1] - i(t).minHeights[B] / 2};${d[1] - i(t).heights[B] / 2};${d[1] - i(t).minHeights[B] / 2}`,
            dur: `${i(t).randoms[B]}s`,
            keyTimes: "0;0.5;1",
            calcMode: "spline",
            keySplines: "0.42,0,0.58,1;0.42,0,0.58,1",
            begin: "0s",
            repeatCount: "indefinite"
          }, null, 8, iu),
          ae("animate", {
            attributeName: "height",
            values: `${i(t).minHeights[B]};${i(t).heights[B]};${i(t).minHeights[B]}`,
            dur: `${i(t).randoms[B]}s`,
            keyTimes: "0;0.5;1",
            calcMode: "spline",
            keySplines: "0.42,0,0.58,1;0.42,0,0.58,1",
            begin: "0s",
            repeatCount: "indefinite"
          }, null, 8, ou)
        ], 8, au))), 128))
      ], 12, nu))
    ], 512));
  }
}), jr = {
  install(e) {
    e.component("DvDecoration6", lu);
  }
}, su = { class: "dv-decoration-7" }, uu = {
  width: "21px",
  height: "20px"
}, cu = ["stroke"], fu = ["stroke"], du = {
  width: "21px",
  height: "20px"
}, hu = ["stroke"], vu = ["stroke"], pu = /* @__PURE__ */ Le({
  __name: "index",
  props: {
    color: {
      type: Array,
      default: () => []
    }
  },
  setup(e) {
    const r = e, a = Pe({
      defaultColor: ["#1dc1f5", "#1dc1f5"],
      mergedColor: []
    });
    ke(() => r.color, () => {
      t();
    }, { deep: !0 }), Re(() => {
      t();
    });
    function t() {
      a.mergedColor = Ce(_e(a.defaultColor), r.color || []);
    }
    return (n, l) => (le(), se("div", su, [
      (le(), se("svg", uu, [
        ae("polyline", {
          "stroke-width": "4",
          fill: "transparent",
          stroke: i(a).mergedColor[0],
          points: "10, 0 19, 10 10, 20"
        }, null, 8, cu),
        ae("polyline", {
          "stroke-width": "2",
          fill: "transparent",
          stroke: i(a).mergedColor[1],
          points: "2, 0 11, 10 2, 20"
        }, null, 8, fu)
      ])),
      Me(n.$slots, "default"),
      (le(), se("svg", du, [
        ae("polyline", {
          "stroke-width": "4",
          fill: "transparent",
          stroke: i(a).mergedColor[0],
          points: "11, 0 2, 10 11, 20"
        }, null, 8, hu),
        ae("polyline", {
          "stroke-width": "2",
          fill: "transparent",
          stroke: i(a).mergedColor[1],
          points: "19, 0 10, 10 19, 20"
        }, null, 8, vu)
      ]))
    ]));
  }
}), Er = {
  install(e) {
    e.component("DvDecoration7", pu);
  }
}, gu = ["width", "height"], mu = ["stroke", "points"], yu = ["stroke", "points"], bu = ["stroke", "points"], xu = /* @__PURE__ */ Le({
  __name: "index",
  props: {
    color: {
      type: Array,
      default: () => []
    },
    reverse: {
      type: Boolean,
      default: !1
    }
  },
  setup(e) {
    const r = e, a = me(null), t = Pe({
      defaultColor: ["#3f96a5", "#3f96a5"],
      mergedColor: []
    });
    ke(() => r.color, () => {
      _();
    }, { deep: !0 }), Re(() => {
      _();
    });
    const { width: n, height: l } = xe(a);
    function o(x) {
      return r.reverse ? n.value - x : x;
    }
    function _() {
      t.mergedColor = Ce(_e(t.defaultColor), r.color || []);
    }
    return (x, z) => (le(), se("div", {
      ref_key: "decoration8",
      ref: a,
      class: "dv-decoration-8"
    }, [
      (le(), se("svg", {
        width: i(n),
        height: i(l)
      }, [
        ae("polyline", {
          stroke: i(t).mergedColor[0],
          "stroke-width": "2",
          fill: "transparent",
          points: `${o(0)}, 0 ${o(30)}, ${i(l) / 2}`
        }, null, 8, mu),
        ae("polyline", {
          stroke: i(t).mergedColor[0],
          "stroke-width": "2",
          fill: "transparent",
          points: `${o(20)}, 0 ${o(50)}, ${i(l) / 2} ${o(i(n))}, ${i(l) / 2}`
        }, null, 8, yu),
        ae("polyline", {
          stroke: i(t).mergedColor[1],
          fill: "transparent",
          "stroke-width": "3",
          points: `${o(0)}, ${i(l) - 3}, ${o(200)}, ${i(l) - 3}`
        }, null, 8, bu)
      ], 8, gu))
    ], 512));
  }
}), zr = {
  install(e) {
    e.component("DvDecoration8", xu);
  }
}, Cu = ["width", "height"], $u = ["id"], _u = ["stroke"], Pu = ["dur"], wu = ["stroke"], ku = ["dur"], Au = ["stroke"], Lu = ["xlink:href", "stroke", "fill"], Su = ["dur", "begin"], Ou = ["stroke"], Gu = {
  __name: "index",
  props: {
    color: {
      type: Array,
      default: () => []
    },
    dur: {
      type: Number,
      default: 3
    }
  },
  setup(e) {
    const r = e, a = He(), t = me(null), n = Pe({
      polygonId: `decoration-9-polygon-${a}`,
      svgWH: [100, 100],
      svgScale: [1, 1],
      defaultColor: ["rgba(3, 166, 224, 0.8)", "rgba(3, 166, 224, 0.5)"],
      mergedColor: []
    });
    ke(() => r.color, () => {
      E();
    }, { deep: !0 }), Re(() => {
      E();
    });
    const { width: l, height: o } = xe(t, z, _);
    function _() {
      x();
    }
    function x() {
      const [U, T] = n.svgWH;
      n.svgScale = [l.value / U, o.value / T];
    }
    function z() {
      x();
    }
    function E() {
      n.mergedColor = Ce(_e(n.defaultColor), r.color || []);
    }
    return (U, T) => (le(), se("div", {
      ref_key: "decoration9",
      ref: t,
      class: "dv-decoration-9"
    }, [
      (le(), se("svg", {
        width: `${i(n).svgWH[0]}px`,
        height: `${i(n).svgWH[1]}px`,
        style: Ge(`transform:scale(${i(n).svgScale[0]},${i(n).svgScale[1]});`)
      }, [
        ae("defs", null, [
          ae("polygon", {
            id: i(n).polygonId,
            points: "15, 46.5, 21, 47.5, 21, 52.5, 15, 53.5"
          }, null, 8, $u)
        ]),
        ae("circle", {
          cx: "50",
          cy: "50",
          r: "45",
          fill: "transparent",
          stroke: i(n).mergedColor[1],
          "stroke-width": "10",
          "stroke-dasharray": "80, 100, 30, 100"
        }, [
          ae("animateTransform", {
            attributeName: "transform",
            type: "rotate",
            values: "0 50 50;360 50 50",
            dur: `${e.dur}s`,
            repeatCount: "indefinite"
          }, null, 8, Pu)
        ], 8, _u),
        ae("circle", {
          cx: "50",
          cy: "50",
          r: "45",
          fill: "transparent",
          stroke: i(n).mergedColor[0],
          "stroke-width": "6",
          "stroke-dasharray": "50, 66, 100, 66"
        }, [
          ae("animateTransform", {
            attributeName: "transform",
            type: "rotate",
            values: "0 50 50;-360 50 50",
            dur: `${e.dur}s`,
            repeatCount: "indefinite"
          }, null, 8, ku)
        ], 8, wu),
        ae("circle", {
          cx: "50",
          cy: "50",
          r: "38",
          fill: "transparent",
          stroke: i(De)(i(n).mergedColor[1] || i(n).defaultColor[1], 30),
          "stroke-width": "1",
          "stroke-dasharray": "5, 1"
        }, null, 8, Au),
        (le(!0), se(Ae, null, Se(new Array(20).fill(0), (L, d) => (le(), se("use", {
          key: d,
          "xlink:href": `#${i(n).polygonId}`,
          stroke: i(n).mergedColor[1],
          fill: Math.random() > 0.4 ? "transparent" : i(n).mergedColor[0]
        }, [
          ae("animateTransform", {
            attributeName: "transform",
            type: "rotate",
            values: "0 50 50;360 50 50",
            dur: `${e.dur}s`,
            begin: `${d * e.dur / 20}s`,
            repeatCount: "indefinite"
          }, null, 8, Su)
        ], 8, Lu))), 128)),
        ae("circle", {
          cx: "50",
          cy: "50",
          r: "26",
          fill: "transparent",
          stroke: i(De)(i(n).mergedColor[1] || i(n).defaultColor[1], 30),
          "stroke-width": "1",
          "stroke-dasharray": "5, 1"
        }, null, 8, Ou)
      ], 12, Cu)),
      Me(U.$slots, "default")
    ], 512));
  }
}, qr = {
  install(e) {
    e.component("DvDecoration9", Gu);
  }
}, Mu = ["width", "height"], Ru = ["stroke", "points"], Du = ["stroke", "points", "stroke-dasharray"], Tu = ["id", "values", "begin"], Fu = ["values", "begin"], Bu = ["stroke", "points", "stroke-dasharray"], Nu = ["id", "values", "begin"], Wu = ["values", "begin"], ju = ["stroke", "points", "stroke-dasharray"], Eu = ["id", "values", "begin"], zu = ["values", "begin"], qu = ["cy", "fill"], Iu = ["id", "values", "begin"], Hu = ["cx", "cy", "fill"], Vu = ["id", "values", "begin"], Uu = ["values", "begin"], Xu = ["cx", "cy", "fill"], Qu = ["id", "values", "begin"], Yu = ["values", "begin"], Ku = ["cx", "cy", "fill"], Ju = ["id", "values", "begin"], Zu = ["values", "begin"], ec = /* @__PURE__ */ Le({
  __name: "index",
  props: {
    color: {
      type: Array,
      default: () => []
    }
  },
  setup(e) {
    const r = e, a = He(), t = me(null), n = Pe({
      animationId1: `d10ani1${a}`,
      animationId2: `d10ani2${a}`,
      animationId3: `d10ani3${a}`,
      animationId4: `d10ani4${a}`,
      animationId5: `d10ani5${a}`,
      animationId6: `d10ani6${a}`,
      animationId7: `d10ani7${a}`,
      defaultColor: ["#00c2ff", "rgba(0, 194, 255, 0.3)"],
      mergedColor: []
    }), { width: l, height: o } = xe(t);
    ke(() => r.color, () => {
      _();
    }, { deep: !0 }), Re(() => {
      _();
    });
    function _() {
      n.mergedColor = Ce(_e(n.defaultColor), r.color || []);
    }
    return (x, z) => (le(), se("div", {
      ref_key: "decoration10",
      ref: t,
      class: "dv-decoration-10"
    }, [
      (le(), se("svg", {
        width: i(l),
        height: i(o)
      }, [
        ae("polyline", {
          stroke: i(n).mergedColor[1],
          "stroke-width": "2",
          points: `0, ${i(o) / 2} ${i(l)}, ${i(o) / 2}`
        }, null, 8, Ru),
        ae("polyline", {
          stroke: i(n).mergedColor[0],
          "stroke-width": "2",
          points: `5, ${i(o) / 2} ${i(l) * 0.2 - 3}, ${i(o) / 2}`,
          "stroke-dasharray": `0, ${i(l) * 0.2}`,
          fill: "freeze"
        }, [
          ae("animate", {
            id: i(n).animationId2,
            attributeName: "stroke-dasharray",
            values: `0, ${i(l) * 0.2};${i(l) * 0.2}, 0;`,
            dur: "3s",
            begin: `${i(n).animationId1}.end`,
            fill: "freeze"
          }, null, 8, Tu),
          ae("animate", {
            attributeName: "stroke-dasharray",
            values: `${i(l) * 0.2}, 0;0, ${i(l) * 0.2}`,
            dur: "0.01s",
            begin: `${i(n).animationId7}.end`,
            fill: "freeze"
          }, null, 8, Fu)
        ], 8, Du),
        ae("polyline", {
          stroke: i(n).mergedColor[0],
          "stroke-width": "2",
          points: `${i(l) * 0.2 + 3}, ${i(o) / 2} ${i(l) * 0.8 - 3}, ${i(o) / 2}`,
          "stroke-dasharray": `0, ${i(l) * 0.6}`
        }, [
          ae("animate", {
            id: i(n).animationId4,
            attributeName: "stroke-dasharray",
            values: `0, ${i(l) * 0.6};${i(l) * 0.6}, 0`,
            dur: "3s",
            begin: `${i(n).animationId3}.end + 1s`,
            fill: "freeze"
          }, null, 8, Nu),
          ae("animate", {
            attributeName: "stroke-dasharray",
            values: `${i(l) * 0.6}, 0;0, ${i(l) * 0.6}`,
            dur: "0.01s",
            begin: `${i(n).animationId7}.end`,
            fill: "freeze"
          }, null, 8, Wu)
        ], 8, Bu),
        ae("polyline", {
          stroke: i(n).mergedColor[0],
          "stroke-width": "2",
          points: `${i(l) * 0.8 + 3}, ${i(o) / 2} ${i(l) - 5}, ${i(o) / 2}`,
          "stroke-dasharray": `0, ${i(l) * 0.2}`
        }, [
          ae("animate", {
            id: i(n).animationId6,
            attributeName: "stroke-dasharray",
            values: `0, ${i(l) * 0.2};${i(l) * 0.2}, 0`,
            dur: "3s",
            begin: `${i(n).animationId5}.end + 1s`,
            fill: "freeze"
          }, null, 8, Eu),
          ae("animate", {
            attributeName: "stroke-dasharray",
            values: `${i(l) * 0.2}, 0;0, ${i(l) * 0.3}`,
            dur: "0.01s",
            begin: `${i(n).animationId7}.end`,
            fill: "freeze"
          }, null, 8, zu)
        ], 8, ju),
        ae("circle", {
          cx: "2",
          cy: i(o) / 2,
          r: "2",
          fill: i(n).mergedColor[1]
        }, [
          ae("animate", {
            id: i(n).animationId1,
            attributeName: "fill",
            values: `${i(n).mergedColor[1]};${i(n).mergedColor[0]}`,
            begin: `0s;${i(n).animationId7}.end`,
            dur: "0.3s",
            fill: "freeze"
          }, null, 8, Iu)
        ], 8, qu),
        ae("circle", {
          cx: i(l) * 0.2,
          cy: i(o) / 2,
          r: "2",
          fill: i(n).mergedColor[1]
        }, [
          ae("animate", {
            id: i(n).animationId3,
            attributeName: "fill",
            values: `${i(n).mergedColor[1]};${i(n).mergedColor[0]}`,
            begin: `${i(n).animationId2}.end`,
            dur: "0.3s",
            fill: "freeze"
          }, null, 8, Vu),
          ae("animate", {
            attributeName: "fill",
            values: `${i(n).mergedColor[1]};${i(n).mergedColor[1]}`,
            dur: "0.01s",
            begin: `${i(n).animationId7}.end`,
            fill: "freeze"
          }, null, 8, Uu)
        ], 8, Hu),
        ae("circle", {
          cx: i(l) * 0.8,
          cy: i(o) / 2,
          r: "2",
          fill: i(n).mergedColor[1]
        }, [
          ae("animate", {
            id: i(n).animationId5,
            attributeName: "fill",
            values: `${i(n).mergedColor[1]};${i(n).mergedColor[0]}`,
            begin: `${i(n).animationId4}.end`,
            dur: "0.3s",
            fill: "freeze"
          }, null, 8, Qu),
          ae("animate", {
            attributeName: "fill",
            values: `${i(n).mergedColor[1]};${i(n).mergedColor[1]}`,
            dur: "0.01s",
            begin: `${i(n).animationId7}.end`,
            fill: "freeze"
          }, null, 8, Yu)
        ], 8, Xu),
        ae("circle", {
          cx: i(l) - 2,
          cy: i(o) / 2,
          r: "2",
          fill: i(n).mergedColor[1]
        }, [
          ae("animate", {
            id: i(n).animationId7,
            attributeName: "fill",
            values: `${i(n).mergedColor[1]};${i(n).mergedColor[0]}`,
            begin: `${i(n).animationId6}.end`,
            dur: "0.3s",
            fill: "freeze"
          }, null, 8, Ju),
          ae("animate", {
            attributeName: "fill",
            values: `${i(n).mergedColor[1]};${i(n).mergedColor[1]}`,
            dur: "0.01s",
            begin: `${i(n).animationId7}.end`,
            fill: "freeze"
          }, null, 8, Zu)
        ], 8, Ku)
      ], 8, Mu))
    ], 512));
  }
}), Ir = {
  install(e) {
    e.component("DvDecoration10", ec);
  }
}, tc = ["width", "height"], rc = ["fill", "stroke"], nc = ["fill", "stroke", "points"], ac = ["fill", "stroke", "points"], ic = ["fill", "stroke", "points"], oc = ["fill", "stroke", "points"], lc = ["stroke", "points"], sc = ["stroke", "points"], uc = { class: "decoration-content" }, cc = {
  __name: "index",
  props: {
    color: {
      type: Array,
      default: () => []
    }
  },
  setup(e) {
    const r = e, a = me(null), t = Pe({
      defaultColor: ["#1a98fc", "#2cf7fe"],
      mergedColor: []
    }), { width: n, height: l } = xe(a);
    ke(() => r.color, () => {
      o();
    }, { deep: !0 }), Re(() => {
      o();
    });
    function o() {
      t.mergedColor = Ce(_e(t.defaultColor), r.color || []);
    }
    return (_, x) => (le(), se("div", {
      ref_key: "decoration11",
      ref: a,
      class: "dv-decoration-11"
    }, [
      (le(), se("svg", {
        width: i(n),
        height: i(l)
      }, [
        ae("polygon", {
          fill: i(De)(i(t).mergedColor[1] || i(t).defaultColor[1], 10),
          stroke: i(t).mergedColor[1],
          points: "20 10, 25 4, 55 4 60 10"
        }, null, 8, rc),
        ae("polygon", {
          fill: i(De)(i(t).mergedColor[1] || i(t).defaultColor[1], 10),
          stroke: i(t).mergedColor[1],
          points: `20 ${i(l) - 10}, 25 ${i(l) - 4}, 55 ${i(l) - 4} 60 ${i(l) - 10}`
        }, null, 8, nc),
        ae("polygon", {
          fill: i(De)(i(t).mergedColor[1] || i(t).defaultColor[1], 10),
          stroke: i(t).mergedColor[1],
          points: `${i(n) - 20} 10, ${i(n) - 25} 4, ${i(n) - 55} 4 ${i(n) - 60} 10`
        }, null, 8, ac),
        ae("polygon", {
          fill: i(De)(i(t).mergedColor[1] || i(t).defaultColor[1], 10),
          stroke: i(t).mergedColor[1],
          points: `${i(n) - 20} ${i(l) - 10}, ${i(n) - 25} ${i(l) - 4}, ${i(n) - 55} ${i(l) - 4} ${i(n) - 60} ${i(l) - 10}`
        }, null, 8, ic),
        ae("polygon", {
          fill: i(De)(i(t).mergedColor[0] || i(t).defaultColor[0], 20),
          stroke: i(t).mergedColor[0],
          points: `
          20 10, 5 ${i(l) / 2} 20 ${i(l) - 10}
          ${i(n) - 20} ${i(l) - 10} ${i(n) - 5} ${i(l) / 2} ${i(n) - 20} 10
        `
        }, null, 8, oc),
        ae("polyline", {
          fill: "transparent",
          stroke: i(De)(i(t).mergedColor[0] || i(t).defaultColor[0], 70),
          points: `25 18, 15 ${i(l) / 2} 25 ${i(l) - 18}`
        }, null, 8, lc),
        ae("polyline", {
          fill: "transparent",
          stroke: i(De)(i(t).mergedColor[0] || i(t).defaultColor[0], 70),
          points: `${i(n) - 25} 18, ${i(n) - 15} ${i(l) / 2} ${i(n) - 25} ${i(l) - 18}`
        }, null, 8, sc)
      ], 8, tc)),
      ae("div", uc, [
        Me(_.$slots, "default")
      ])
    ], 512));
  }
}, Hr = {
  install(e) {
    e.component("DvDecoration11", cc);
  }
}, fc = ["width", "height"], dc = ["id"], hc = ["stroke", "stroke-width", "d"], vc = ["id"], pc = ["stop-color"], gc = ["r", "cx", "cy", "stroke"], mc = ["cx", "cy", "fill"], yc = ["values", "dur"], bc = ["dur"], xc = ["cx", "cy", "fill"], Cc = { key: 0 }, $c = ["points", "stroke"], _c = ["d", "stroke"], Pc = ["xlink:href"], wc = ["values", "dur"], kc = { class: "decoration-content" }, Ac = {
  __name: "index",
  props: {
    color: {
      type: Array,
      default: () => []
    },
    /**
     * @description Scan animation dur
     */
    scanDur: {
      type: Number,
      default: 3
    },
    /**
     * @description Halo animation dur
     */
    haloDur: {
      type: Number,
      default: 2
    }
  },
  setup(e) {
    const r = e, a = He(), t = me(null), { width: n, height: l } = xe(t, () => {
    }, W), o = Pe({
      gId: `decoration-12-g-${a}`,
      gradientId: `decoration-12-gradient-${a}`,
      defaultColor: ["#2783ce", "#2cf7fe"],
      mergedColor: [],
      pathD: [],
      pathColor: [],
      circleR: [],
      splitLinePoints: [],
      arcD: [],
      segment: 30,
      sectorAngle: Math.PI / 3,
      ringNum: 3,
      ringWidth: 1,
      showSplitLine: !0
    }), _ = be(() => n.value / 2), x = be(() => l.value / 2);
    ke(() => r.color, () => {
      E(), T();
    }, { deep: !0 });
    function z() {
      E(), U(), T(), L(), d(), B();
    }
    function E() {
      o.mergedColor = Ce(_e(o.defaultColor), r.color || []);
    }
    function U() {
      const q = -Math.PI / 2, G = o.sectorAngle / o.segment, m = n.value / 4;
      let y = et(_.value, x.value, m, q);
      o.pathD = Array.from({ length: o.segment }).fill("").map((f, D) => {
        const k = et(_.value, x.value, m, q - (D + 1) * G).map(($) => Number.parseFloat($.toFixed(5))), C = `M${y.join(",")} A${m}, ${m} 0 0 0 ${k.join(",")}`;
        return y = k, C;
      });
    }
    function T() {
      const q = 100 / (o.segment - 1);
      o.pathColor = Array.from({ length: o.segment }).fill(o.mergedColor[0]).map((G, m) => De(o.mergedColor[0], 100 - m * q));
    }
    function L() {
      const q = (n.value / 2 - o.ringWidth / 2) / o.ringNum;
      o.circleR = Array.from({ length: o.ringNum }).fill(0).map((G, m) => q * (m + 1));
    }
    function d() {
      const q = Math.PI / 6, G = n.value / 2;
      o.splitLinePoints = Array.from({ length: 6 }).fill("").map((m, y) => {
        const f = q * (y + 1), D = f + Math.PI, k = et(_.value, x.value, G, f), C = et(_.value, x.value, G, D);
        return `${k.join(",")} ${C.join(",")}`;
      });
    }
    function B() {
      const q = Math.PI / 6, G = n.value / 2 - 1;
      o.arcD = Array.from({ length: 4 }).fill("").map((m, y) => {
        const f = q * (3 * y + 1), D = f + q, k = et(_.value, x.value, G, f), C = et(_.value, x.value, G, D);
        return `M${k.join(",")} A${_.value}, ${x.value} 0 0 1 ${C.join(",")}`;
      });
    }
    function W() {
      z();
    }
    return (q, G) => (le(), se("div", {
      ref_key: "decoration12",
      ref: t,
      class: "dv-decoration-12"
    }, [
      (le(), se("svg", {
        width: i(n),
        height: i(l)
      }, [
        ae("defs", null, [
          ae("g", {
            id: i(o).gId
          }, [
            (le(!0), se(Ae, null, Se(i(o).pathD, (m, y) => (le(), se("path", {
              key: m,
              stroke: i(o).pathColor[y],
              "stroke-width": i(n) / 2,
              fill: "transparent",
              d: m
            }, null, 8, hc))), 128))
          ], 8, dc),
          ae("radialGradient", {
            id: i(o).gradientId,
            cx: "50%",
            cy: "50%",
            r: "50%"
          }, [
            G[0] || (G[0] = ae("stop", {
              offset: "0%",
              "stop-color": "transparent",
              "stop-opacity": "1"
            }, null, -1)),
            ae("stop", {
              offset: "100%",
              "stop-color": i(De)(i(o).mergedColor[1] || i(o).defaultColor[1], 30),
              "stop-opacity": "1"
            }, null, 8, pc)
          ], 8, vc)
        ]),
        (le(!0), se(Ae, null, Se(i(o).circleR, (m) => (le(), se("circle", {
          key: m,
          r: m,
          cx: i(_),
          cy: i(x),
          stroke: i(o).mergedColor[1],
          "stroke-width": 0.8,
          fill: "transparent"
        }, null, 8, gc))), 128)),
        ae("circle", {
          r: "1",
          cx: i(_),
          cy: i(x),
          stroke: "transparent",
          fill: `url(#${i(o).gradientId})`
        }, [
          ae("animate", {
            attributeName: "r",
            values: `1;${i(n) / 2}`,
            dur: `${e.haloDur}s`,
            repeatCount: "indefinite"
          }, null, 8, yc),
          ae("animate", {
            attributeName: "opacity",
            values: "1;0",
            dur: `${e.haloDur}s`,
            repeatCount: "indefinite"
          }, null, 8, bc)
        ], 8, mc),
        ae("circle", {
          r: "2",
          cx: i(_),
          cy: i(x),
          fill: i(o).mergedColor[1]
        }, null, 8, xc),
        i(o).showSplitLine ? (le(), se("g", Cc, [
          (le(!0), se(Ae, null, Se(i(o).splitLinePoints, (m) => (le(), se("polyline", {
            key: m,
            points: m,
            stroke: i(o).mergedColor[1],
            "stroke-width": 0.5,
            opacity: "50"
          }, null, 8, $c))), 128))
        ])) : $e("", !0),
        (le(!0), se(Ae, null, Se(i(o).arcD, (m) => (le(), se("path", {
          key: m,
          d: m,
          stroke: i(o).mergedColor[1],
          "stroke-width": "2.3",
          fill: "transparent"
        }, null, 8, _c))), 128)),
        ae("use", {
          "xlink:href": `#${i(o).gId}`
        }, [
          ae("animateTransform", {
            attributeName: "transform",
            type: "rotate",
            values: `0, ${i(_)} ${i(x)};360, ${i(_)} ${i(x)}`,
            dur: `${e.scanDur}s`,
            repeatCount: "indefinite"
          }, null, 8, wc)
        ], 8, Pc)
      ], 8, fc)),
      ae("div", kc, [
        Me(q.$slots, "default")
      ])
    ], 512));
  }
}, Vr = {
  install(e) {
    e.component("DvDecoration12", Ac);
  }
}, qe = {
  color: {
    type: Array,
    default: () => []
  },
  backgroundColor: {
    type: String,
    default: "transparent"
  }
};
function Ie(e, r) {
  return be(() => r.value.length === 0 ? e : r.value);
}
const Lc = ["left-top", "right-top", "left-bottom", "right-bottom"], Sc = ["#4fd2dd", "#235fa7"], Oc = /* @__PURE__ */ Le({
  props: qe,
  setup(e) {
    const r = me(null), a = Ie(Sc, Ee(e, "color")), {
      width: t,
      height: n,
      initWH: l
    } = xe(r);
    return {
      width: t,
      height: n,
      initWH: l,
      mergedColor: a,
      borderBox1: r
    };
  },
  render() {
    const {
      backgroundColor: e,
      width: r,
      height: a,
      mergedColor: t,
      $slots: n
    } = this;
    return Z("div", {
      ref: "borderBox1",
      class: "dv-border-box-1"
    }, [Z("svg", {
      class: "dv-border",
      width: r,
      height: a
    }, [Z("polygon", {
      fill: e,
      points: `10, 27 10, ${a - 27} 13, ${a - 24} 13, ${a - 21} 24, ${a - 11}
      38, ${a - 11} 41, ${a - 8} 73, ${a - 8} 75, ${a - 10} 81, ${a - 10}
      85, ${a - 6} ${r - 85}, ${a - 6} ${r - 81}, ${a - 10} ${r - 75}, ${a - 10}
      ${r - 73}, ${a - 8} ${r - 41}, ${a - 8} ${r - 38}, ${a - 11}
      ${r - 10}, ${a - 27} ${r - 10}, 27 ${r - 13}, 25 ${r - 13}, 21
      ${r - 24}, 11 ${r - 38}, 11 ${r - 41}, 8 ${r - 73}, 8 ${r - 75}, 10
      ${r - 81}, 10 ${r - 85}, 6 85, 6 81, 10 75, 10 73, 8 41, 8 38, 11 24, 11 13, 21 13, 24`
    }, null)]), Lc.map((l) => Z("svg", {
      key: l,
      width: "150px",
      height: "150px",
      class: `${l} dv-border`
    }, [Z("polygon", {
      fill: t[0],
      points: "6,66 6,18 12,12 18,12 24,6 27,6 30,9 36,9 39,6 84,6 81,9 75,9 73.2,7 40.8,7 37.8,10.2 24,10.2 12,21 12,24 9,27 9,51 7.8,54 7.8,63"
    }, [Z("animate", {
      attributeName: "fill",
      values: `${t[0]};${t[1]};${t[0]}`,
      dur: "0.5s",
      begin: "0s",
      repeatCount: "indefinite"
    }, null)]), Z("polygon", {
      fill: t[1],
      points: "27.599999999999998,4.8 38.4,4.8 35.4,7.8 30.599999999999998,7.8"
    }, [Z("animate", {
      attributeName: "fill",
      values: `${t[1]};${t[0]};${t[1]}`,
      dur: "0.5s",
      begin: "0s",
      repeatCount: "indefinite"
    }, null)]), Z("polygon", {
      fill: t[0],
      points: "9,54 9,63 7.199999999999999,66 7.199999999999999,75 7.8,78 7.8,110 8.4,110 8.4,66 9.6,66 9.6,54"
    }, [Z("animate", {
      attributeName: "fill",
      values: `${t[0]};${t[1]};transparent`,
      dur: "1s",
      begin: "0s",
      repeatCount: "indefinite"
    }, null)])])), Z("div", {
      class: "border-box-content"
    }, [Me(n, "default")])]);
  }
}), Ur = {
  install(e) {
    e.component("DvBorderBox1", Oc);
  }
}, Gc = ["#fff", "rgba(255, 255, 255, 0.6)"], Mc = /* @__PURE__ */ Le({
  props: qe,
  setup(e) {
    const r = me(null), a = Ie(Gc, Ee(e, "color")), {
      width: t,
      height: n,
      initWH: l
    } = xe(r);
    return {
      width: t,
      height: n,
      initWH: l,
      mergedColor: a,
      borderBox2: r
    };
  },
  render() {
    const {
      $slots: e,
      backgroundColor: r,
      width: a,
      height: t,
      mergedColor: n
    } = this;
    return Z("div", {
      ref: "borderBox2",
      class: "dv-border-box-2"
    }, [Z("svg", {
      class: "dv-border-svg-container",
      width: a,
      height: t
    }, [Z("polygon", {
      fill: r,
      points: `
        7, 7 ${a - 7}, 7 ${a - 7}, ${t - 7} 7, ${t - 7}
      `
    }, null), Z("polyline", {
      stroke: n[0],
      points: `2, 2 ${a - 2} ,2 ${a - 2}, ${t - 2} 2, ${t - 2} 2, 2`
    }, null), Z("polyline", {
      stroke: n[1],
      points: `6, 6 ${a - 6}, 6 ${a - 6}, ${t - 6} 6, ${t - 6} 6, 6`
    }, null), Z("circle", {
      fill: n[0],
      cx: "11",
      cy: "11",
      r: "1"
    }, null), Z("circle", {
      fill: n[0],
      cx: a - 11,
      cy: "11",
      r: "1"
    }, null), Z("circle", {
      fill: n[0],
      cx: a - 11,
      cy: t - 11,
      r: "1"
    }, null), Z("circle", {
      fill: n[0],
      cx: "11",
      cy: t - 11,
      r: "1"
    }, null)]), Z("div", {
      class: "border-box-content"
    }, [Me(e, "default")])]);
  }
}), Xr = {
  install(e) {
    e.component("DvBorderBox2", Mc);
  }
}, Rc = ["#2862b7", "#2862b7"], Dc = /* @__PURE__ */ Le({
  props: qe,
  setup(e) {
    const r = me(null), {
      width: a,
      height: t,
      initWH: n
    } = xe(r), l = Ie(Rc, Ee(e, "color"));
    return {
      width: a,
      height: t,
      mergedColor: l,
      initWH: n,
      borderBox3: r
    };
  },
  render() {
    const {
      $slots: e,
      width: r,
      height: a,
      backgroundColor: t,
      mergedColor: n
    } = this;
    return Z("div", {
      ref: "borderBox3",
      class: "dv-border-box-3"
    }, [Z("svg", {
      class: "dv-border-svg-container",
      width: r,
      height: a
    }, [Z("polygon", {
      fill: t,
      points: `
              23, 23 ${r - 24}, 23 ${r - 24}, ${a - 24} 23, ${a - 24}
            `
    }, null), Z("polyline", {
      class: "dv-bb3-line1",
      stroke: n[0],
      points: `4, 4 ${r - 22} ,4 ${r - 22}, ${a - 22} 4, ${a - 22} 4, 4`
    }, null), Z("polyline", {
      class: "dv-bb3-line2",
      stroke: n[1],
      points: `10, 10 ${r - 16}, 10 ${r - 16}, ${a - 16} 10, ${a - 16} 10, 10`
    }, null), Z("polyline", {
      class: "dv-bb3-line2",
      stroke: n[1],
      points: `16, 16 ${r - 10}, 16 ${r - 10}, ${a - 10} 16, ${a - 10} 16, 16`
    }, null), Z("polyline", {
      class: "dv-bb3-line2",
      stroke: n[1],
      points: `22, 22 ${r - 4}, 22 ${r - 4}, ${a - 4} 22, ${a - 4} 22, 22`
    }, null)]), Z("div", {
      class: "border-box-content"
    }, [Me(e, "default")])]);
  }
}), Qr = {
  install(e) {
    e.component("DvBorderBox3", Dc);
  }
}, Tc = {
  ...qe,
  reverse: {
    type: Boolean,
    default: !1
  }
}, Fc = ["red", "rgba(0,0,255,0.8)"], Bc = /* @__PURE__ */ Le({
  props: Tc,
  setup(e) {
    const r = me(null), {
      width: a,
      height: t,
      initWH: n
    } = xe(r), l = Ie(Fc, Ee(e, "color"));
    return {
      width: a,
      height: t,
      initWH: n,
      mergedColor: l,
      borderBox4: r
    };
  },
  render() {
    const {
      $slots: e,
      backgroundColor: r,
      reverse: a,
      width: t,
      height: n,
      mergedColor: l
    } = this;
    return Z("div", {
      ref: "borderBox4",
      class: "dv-border-box-4"
    }, [Z("svg", {
      class: `dv-border-svg-container ${a && "dv-reverse"}`,
      width: t,
      height: n
    }, [Z("polygon", {
      fill: r,
      points: `
        ${t - 15}, 22 170, 22 150, 7 40, 7 28, 21 32, 24
        16, 42 16, ${n - 32} 41, ${n - 7} ${t - 15}, ${n - 7}
      `
    }, null), Z("polyline", {
      class: "dv-bb4-line-1",
      stroke: l[0],
      points: `145, ${n - 5} 40, ${n - 5} 10, ${n - 35}
          10, 40 40, 5 150, 5 170, 20 ${t - 15}, 20`
    }, null), Z("polyline", {
      stroke: l[1],
      class: "dv-bb4-line-2",
      points: `245, ${n - 1} 36, ${n - 1} 14, ${n - 23}
          14, ${n - 100}`
    }, null), Z("polyline", {
      class: "dv-bb4-line-3",
      stroke: l[0],
      points: `7, ${n - 40} 7, ${n - 75}`
    }, null), Z("polyline", {
      class: "dv-bb4-line-4",
      stroke: l[0],
      points: "28, 24 13, 41 13, 64"
    }, null), Z("polyline", {
      class: "dv-bb4-line-5",
      stroke: l[0],
      points: "5, 45 5, 140"
    }, null), Z("polyline", {
      class: "dv-bb4-line-6",
      stroke: l[1],
      points: "14, 75 14, 180"
    }, null), Z("polyline", {
      class: "dv-bb4-line-7",
      stroke: l[1],
      points: "55, 11 147, 11 167, 26 250, 26"
    }, null), Z("polyline", {
      class: "dv-bb4-line-8",
      stroke: l[1],
      points: "158, 5 173, 16"
    }, null), Z("polyline", {
      class: "dv-bb4-line-9",
      stroke: l[0],
      points: `200, 17 ${t - 10}, 17`
    }, null), Z("polyline", {
      class: "dv-bb4-line-10",
      stroke: l[1],
      points: `385, 17 ${t - 10}, 17`
    }, null)]), Z("div", {
      class: "border-box-content"
    }, [Me(e, "default")])]);
  }
}), Yr = {
  install(e) {
    e.component("DvBorderBox4", Bc);
  }
}, Nc = {
  ...qe,
  reverse: {
    type: Boolean,
    default: !1
  }
}, Wc = ["rgba(255, 255, 255, 0.35)", "rgba(255, 255, 255, 0.20)"], jc = /* @__PURE__ */ Le({
  props: Nc,
  setup(e) {
    const r = me(null), {
      width: a,
      height: t,
      initWH: n
    } = xe(r), l = Ie(Wc, Ee(e, "color"));
    return {
      width: a,
      height: t,
      initWH: n,
      mergedColor: l,
      borderBox5: r
    };
  },
  render() {
    const {
      $slots: e,
      width: r,
      height: a,
      mergedColor: t,
      backgroundColor: n,
      reverse: l
    } = this;
    return Z("div", {
      ref: "borderBox5",
      class: "dv-border-box-5"
    }, [Z("svg", {
      class: `dv-border-svg-container  ${l && "dv-reverse"}`,
      width: r,
      height: a
    }, [Z("polygon", {
      fill: n,
      points: `
            10, 22 ${r - 22}, 22 ${r - 22}, ${a - 86} ${r - 84}, ${a - 24} 10, ${a - 24}
          `
    }, null), Z("polyline", {
      class: "dv-bb5-line-1",
      stroke: t[0],
      points: `8, 5 ${r - 5}, 5 ${r - 5}, ${a - 100}
          ${r - 100}, ${a - 5} 8, ${a - 5} 8, 5`
    }, null), Z("polyline", {
      class: "dv-bb5-line-2",
      stroke: t[1],
      points: `3, 5 ${r - 20}, 5 ${r - 20}, ${a - 60}
          ${r - 74}, ${a - 5} 3, ${a - 5} 3, 5`
    }, null), Z("polyline", {
      class: "dv-bb5-line-3",
      stroke: t[1],
      points: `50, 13 ${r - 35}, 13`
    }, null), Z("polyline", {
      class: "dv-bb5-line-4",
      stroke: t[1],
      points: `15, 20 ${r - 35}, 20`
    }, null), Z("polyline", {
      class: "dv-bb5-line-5",
      stroke: t[1],
      points: `15, ${a - 20} ${r - 110}, ${a - 20}`
    }, null), Z("polyline", {
      class: "dv-bb5-line-6",
      stroke: t[1],
      points: `15, ${a - 13} ${r - 110}, ${a - 13}`
    }, null)]), Z("div", {
      class: "border-box-content"
    }, [Me(e, "default")])]);
  }
}), Kr = {
  install(e) {
    e.component("DvBorderBox5", jc);
  }
}, Ec = ["rgba(255, 255, 255, 0.35)", "gray"], zc = /* @__PURE__ */ Le({
  props: qe,
  setup(e) {
    const r = me(null), {
      width: a,
      height: t,
      initWH: n
    } = xe(r), l = Ie(Ec, Ee(e, "color"));
    return {
      width: a,
      height: t,
      initWH: n,
      mergedColor: l,
      borderBox6: r
    };
  },
  render() {
    const {
      $slots: e,
      width: r,
      height: a,
      mergedColor: t,
      backgroundColor: n
    } = this;
    return Z("div", {
      ref: "borderBox6",
      class: "dv-border-box-6"
    }, [Z("svg", {
      class: "dv-border-svg-container",
      width: r,
      height: a
    }, [Z("polygon", {
      fill: n,
      points: `
            9, 7 ${r - 9}, 7 ${r - 9}, ${a - 7} 9, ${a - 7}
            `
    }, null), Z("circle", {
      fill: t[1],
      cx: "5",
      cy: "5",
      r: "2"
    }, null), Z("circle", {
      fill: t[1],
      cx: r - 5,
      cy: "5",
      r: "2"
    }, null), Z("circle", {
      fill: t[1],
      cx: r - 5,
      cy: a - 5,
      r: "2"
    }, null), Z("circle", {
      fill: t[1],
      cx: "5",
      cy: a - 5,
      r: "2"
    }, null), Z("polyline", {
      stroke: t[0],
      points: `10, 4 ${r - 10}, 4`
    }, null), Z("polyline", {
      stroke: t[0],
      points: `10, ${a - 4} ${r - 10}, ${a - 4}`
    }, null), Z("polyline", {
      stroke: t[0],
      points: `5, 70 5, ${a - 70}`
    }, null), Z("polyline", {
      stroke: t[0],
      points: `${r - 5}, 70 ${r - 5}, ${a - 70}`
    }, null), Z("polyline", {
      stroke: t[0],
      points: "3, 10, 3, 50"
    }, null), Z("polyline", {
      stroke: t[0],
      points: "7, 30 7, 80"
    }, null), Z("polyline", {
      stroke: t[0],
      points: `${r - 3}, 10 ${r - 3}, 50`
    }, null), Z("polyline", {
      stroke: t[0],
      points: `${r - 7}, 30 ${r - 7}, 80`
    }, null), Z("polyline", {
      stroke: t[0],
      points: `3, ${a - 10} 3, ${a - 50}`
    }, null), Z("polyline", {
      stroke: t[0],
      points: `7, ${a - 30} 7, ${a - 80}`
    }, null), Z("polyline", {
      stroke: t[0],
      points: `${r - 3}, ${a - 10} ${r - 3}, ${a - 50}`
    }, null), Z("polyline", {
      stroke: t[0],
      points: `${r - 7}, ${a - 30} ${r - 7}, ${a - 80}`
    }, null)]), Z("div", {
      class: "border-box-content"
    }, [Me(e, "default")])]);
  }
}), Jr = {
  install(e) {
    e.component("DvBorderBox6", zc);
  }
}, qc = ["rgba(128,128,128,0.3)", "rgba(128,128,128,0.5)"], Ic = /* @__PURE__ */ Le({
  props: qe,
  setup(e) {
    const r = me(null), {
      width: a,
      height: t,
      initWH: n
    } = xe(r), l = Ie(qc, Ee(e, "color"));
    return {
      width: a,
      height: t,
      initWH: n,
      mergedColor: l,
      borderBox7: r
    };
  },
  render() {
    const {
      $slots: e,
      width: r,
      height: a,
      mergedColor: t,
      backgroundColor: n
    } = this;
    return Z("div", {
      ref: "borderBox7",
      class: "dv-border-box-7",
      style: `box-shadow: inset 0 0 40px ${t[0]}; border: 1px solid ${t[0]}; background-color: ${n}`
    }, [Z("svg", {
      class: "dv-border-svg-container",
      width: r,
      height: a
    }, [Z("polyline", {
      class: "dv-bb7-line-width-2",
      stroke: t[0],
      points: "0, 25 0, 0 25, 0"
    }, null), Z("polyline", {
      class: "dv-bb7-line-width-2",
      stroke: t[0],
      points: `${r - 25}, 0 ${r}, 0 ${r}, 25`
    }, null), Z("polyline", {
      class: "dv-bb7-line-width-2",
      stroke: t[0],
      points: `${r - 25}, ${a} ${r}, ${a} ${r}, ${a - 25}`
    }, null), Z("polyline", {
      class: "dv-bb7-line-width-2",
      stroke: t[0],
      points: `0, ${a - 25} 0, ${a} 25, ${a}`
    }, null), Z("polyline", {
      class: "dv-bb7-line-width-5",
      stroke: t[1],
      points: "0, 10 0, 0 10, 0"
    }, null), Z("polyline", {
      class: "dv-bb7-line-width-5",
      stroke: t[1],
      points: `${r - 10}, 0 ${r}, 0 ${r}, 10`
    }, null), Z("polyline", {
      class: "dv-bb7-line-width-5",
      stroke: t[1],
      points: `${r - 10}, ${a} ${r}, ${a} ${r}, ${a - 10}`
    }, null), Z("polyline", {
      class: "dv-bb7-line-width-5",
      stroke: t[1],
      points: `0, ${a - 10} 0, ${a} 10, ${a}`
    }, null)]), Z("div", {
      class: "border-box-content"
    }, [Me(e, "default")])]);
  }
}), Zr = {
  install(e) {
    e.component("DvBorderBox7", Ic);
  }
}, Hc = {
  ...qe,
  reverse: {
    type: Boolean,
    default: !1
  },
  dur: {
    type: Number,
    default: 3
  }
}, Vc = ["#235fa7", "#4fd2dd"], Uc = /* @__PURE__ */ Le({
  props: Hc,
  setup(e) {
    const r = He(), a = me(null), t = Pe({
      path: `border-box-8-path-${r}`,
      gradient: `border-box-8-gradient-${r}`,
      mask: `border-box-8-mask-${r}`
    }), {
      width: n,
      height: l,
      initWH: o
    } = xe(a), _ = be(() => (n.value + l.value - 5) * 2), x = be(() => e.reverse ? `M 2.5, 2.5 L 2.5, ${l.value - 2.5} L ${n.value - 2.5}, ${l.value - 2.5} L ${n.value - 2.5}, 2.5 L 2.5, 2.5` : `M2.5, 2.5 L${n.value - 2.5}, 2.5 L${n.value - 2.5}, ${l.value - 2.5} L2.5, ${l.value - 2.5} L2.5, 2.5`), z = Ie(Vc, Ee(e, "color"));
    return {
      width: n,
      height: l,
      initWH: o,
      state: t,
      mergedColor: z,
      pathD: x,
      length: _,
      borderBox8: a
    };
  },
  render() {
    const {
      $slots: e,
      width: r,
      height: a,
      state: t,
      mergedColor: n,
      pathD: l,
      length: o,
      backgroundColor: _,
      dur: x
    } = this;
    return Z("div", {
      ref: "borderBox8",
      class: "dv-border-box-8"
    }, [Z("svg", {
      class: "dv-border-svg-container",
      width: r,
      height: a
    }, [Z("defs", null, [Z("path", {
      id: t.path,
      d: l,
      fill: "transparent"
    }, null), Z("radialGradient", {
      id: t.gradient,
      cx: "50%",
      cy: "50%",
      r: "50%"
    }, [Z("stop", {
      offset: "0%",
      "stop-color": "#fff",
      "stop-opacity": "1"
    }, null), Z("stop", {
      offset: "100%",
      "stop-color": "#fff",
      "stop-opacity": "0"
    }, null)]), Z("mask", {
      id: t.mask
    }, [Z("circle", {
      cx: "0",
      cy: "0",
      r: "150",
      fill: `url(#${t.gradient})`
    }, [Xa("animateMotion", {
      dur: `${x}s`,
      path: l,
      rotate: "auto",
      repeatCount: "indefinite"
    })])])]), Z("polygon", {
      fill: _,
      points: `5, 5 ${r - 5}, 5 ${r - 5} ${a - 5} 5, ${a - 5}`
    }, null), Z("use", {
      stroke: n[0],
      "stroke-width": "1",
      "xlink:href": `#${t.path}`
    }, null), Z("use", {
      stroke: n[1],
      "stroke-width": "3",
      "xlink:href": `#${t.path}`,
      mask: `url(#${t.mask})`
    }, [Z("animate", {
      attributeName: "stroke-dasharray",
      from: `0, ${o}`,
      to: `${o}, 0`,
      dur: `${x}s`,
      repeatCount: "indefinite"
    }, null)])]), Z("div", {
      class: "border-box-content"
    }, [Me(e, "default")])]);
  }
}), en = {
  install(e) {
    e.component("DvBorderBox8", Uc);
  }
}, Xc = ["#11eefd", "#0078d2"], Qc = /* @__PURE__ */ Le({
  props: qe,
  setup(e) {
    const r = He(), a = me(null), {
      width: t,
      height: n,
      initWH: l
    } = xe(a), o = Pe({
      gradientId: `border-box-9-gradient-${r}`,
      maskId: `border-box-9-mask-${r}`
    }), _ = Ie(Xc, Ee(e, "color"));
    return {
      width: t,
      height: n,
      initWH: l,
      state: o,
      mergedColor: _,
      borderBox9: a
    };
  },
  render() {
    const {
      $slots: e,
      width: r,
      height: a,
      state: t,
      mergedColor: n,
      backgroundColor: l
    } = this;
    return Z("div", {
      ref: "borderBox9",
      class: "dv-border-box-9"
    }, [Z("svg", {
      class: "dv-border-svg-container",
      width: r,
      height: a
    }, [Z("defs", null, [Z("linearGradient", {
      id: t.gradientId,
      x1: "0%",
      y1: "0%",
      x2: "100%",
      y2: "100%"
    }, [Z("animate", {
      attributeName: "x1",
      values: "0%;100%;0%",
      dur: "10s",
      begin: "0s",
      repeatCount: "indefinite"
    }, null), Z("animate", {
      attributeName: "x2",
      values: "100%;0%;100%",
      dur: "10s",
      begin: "0s",
      repeatCount: "indefinite"
    }, null), Z("stop", {
      offset: "0%",
      "stop-color": n[0]
    }, [Z("animate", {
      attributeName: "stop-color",
      values: `${n[0]};${n[1]};${n[0]}`,
      dur: "10s",
      begin: "0s",
      repeatCount: "indefinite"
    }, null)]), Z("stop", {
      offset: "100%",
      "stop-color": n[1]
    }, [Z("animate", {
      attributeName: "stop-color",
      values: `${n[1]};${n[0]};${n[1]}`,
      dur: "10s",
      begin: "0s",
      repeatCount: "indefinite"
    }, null)])]), Z("mask", {
      id: t.maskId
    }, [Z("polyline", {
      stroke: "#fff",
      "stroke-width": "3",
      fill: "transparent",
      points: `8, ${a * 0.4} 8, 3, ${r * 0.4 + 7}, 3`
    }, null), Z("polyline", {
      fill: "#fff",
      points: `8, ${a * 0.15} 8, 3, ${r * 0.1 + 7}, 3
              ${r * 0.1}, 8 14, 8 14, ${a * 0.15 - 7}
            `
    }, null), Z("polyline", {
      stroke: "#fff",
      "stroke-width": "3",
      fill: "transparent",
      points: `${r * 0.5}, 3 ${r - 3}, 3, ${r - 3}, ${a * 0.25}`
    }, null), Z("polyline", {
      fill: "#fff",
      points: `
              ${r * 0.52}, 3 ${r * 0.58}, 3
              ${r * 0.58 - 7}, 9 ${r * 0.52 + 7}, 9
            `
    }, null), Z("polyline", {
      fill: "#fff",
      points: `
              ${r * 0.9}, 3 ${r - 3}, 3 ${r - 3}, ${a * 0.1}
              ${r - 9}, ${a * 0.1 - 7} ${r - 9}, 9 ${r * 0.9 + 7}, 9
            `
    }, null), Z("polyline", {
      stroke: "#fff",
      "stroke-width": "3",
      fill: "transparent",
      points: `8, ${a * 0.5} 8, ${a - 3} ${r * 0.3 + 7}, ${a - 3}`
    }, null), Z("polyline", {
      fill: "#fff",
      points: `
              8, ${a * 0.55} 8, ${a * 0.7}
              2, ${a * 0.7 - 7} 2, ${a * 0.55 + 7}
            `
    }, null), Z("polyline", {
      stroke: "#fff",
      "stroke-width": "3",
      fill: "transparent",
      points: `${r * 0.35}, ${a - 3} ${r - 3}, ${a - 3} ${r - 3}, ${a * 0.35}`
    }, null), Z("polyline", {
      fill: "#fff",
      points: `
              ${r * 0.92}, ${a - 3} ${r - 3}, ${a - 3} ${r - 3}, ${a * 0.8}
              ${r - 9}, ${a * 0.8 + 7} ${r - 9}, ${a - 9} ${r * 0.92 + 7}, ${a - 9}
            `
    }, null)])]), Z("polygon", {
      fill: l,
      points: `
              15, 9 ${r * 0.1 + 1}, 9 ${r * 0.1 + 4}, 6 ${r * 0.52 + 2}, 6
              ${r * 0.52 + 6}, 10 ${r * 0.58 - 7}, 10 ${r * 0.58 - 2}, 6
              ${r * 0.9 + 2}, 6 ${r * 0.9 + 6}, 10 ${r - 10}, 10 ${r - 10}, ${a * 0.1 - 6}
              ${r - 6}, ${a * 0.1 - 1} ${r - 6}, ${a * 0.8 + 1} ${r - 10}, ${a * 0.8 + 6}
              ${r - 10}, ${a - 10} ${r * 0.92 + 7}, ${a - 10}  ${r * 0.92 + 2}, ${a - 6}
              11, ${a - 6} 11, ${a * 0.15 - 2} 15, ${a * 0.15 - 7}
            `
    }, null), Z("rect", {
      x: "0",
      y: "0",
      width: r,
      height: a,
      fill: `url(#${t.gradientId})`,
      mask: `url(#${t.maskId})`
    }, null)]), Z("div", {
      class: "border-box-content"
    }, [Me(e, "default")])]);
  }
}), tn = {
  install(e) {
    e.component("DvBorderBox9", Qc);
  }
}, Yc = ["left-top", "right-top", "left-bottom", "right-bottom"], Kc = ["#1d48c4", "#d3e1f8"], Jc = /* @__PURE__ */ Le({
  props: qe,
  setup(e) {
    const r = me(null), {
      width: a,
      height: t,
      initWH: n
    } = xe(r), l = Ie(Kc, Ee(e, "color"));
    return {
      width: a,
      height: t,
      initWH: n,
      mergedColor: l,
      borderBox10: r
    };
  },
  render() {
    const {
      $slots: e,
      width: r,
      height: a,
      mergedColor: t,
      backgroundColor: n
    } = this;
    return Z("div", {
      ref: "borderBox10",
      class: "dv-border-box-10",
      style: `box-shadow: inset 0 0 25px 3px ${t[0]}`
    }, [Z("svg", {
      class: "dv-border-svg-container",
      width: r,
      height: a
    }, [Z("polygon", {
      fill: n,
      points: `
              4, 0 ${r - 4}, 0 ${r}, 4 ${r}, ${a - 4} ${r - 4}, ${a}
              4, ${a} 0, ${a - 4} 0, 4
            `
    }, null)]), Yc.map((l) => Z("svg", {
      width: "150px",
      height: "150px",
      class: `${l} dv-border-svg-container`
    }, [Z("polygon", {
      fill: t[1],
      points: "40, 0 5, 0 0, 5 0, 16 3, 19 3, 7 7, 3 35, 3"
    }, null)])), Z("div", {
      class: "border-box-content"
    }, [Me(e, "default")])]);
  }
}), rn = {
  install(e) {
    e.component("DvBorderBox10", Jc);
  }
}, Zc = {
  ...qe,
  title: {
    type: String,
    default: ""
  },
  titleWidth: {
    type: Number,
    default: 250
  },
  animate: {
    type: Boolean,
    default: !0
  }
}, xa = ["#8aaafb", "#1f33a2"], ef = /* @__PURE__ */ Le({
  props: Zc,
  setup(e) {
    const r = He(), a = me(null), {
      width: t,
      height: n,
      initWH: l
    } = xe(a), o = me(`border-box-11-filterId-${r}`), _ = Ie(xa, Ee(e, "color"));
    return {
      width: t,
      height: n,
      initWH: l,
      filterId: o,
      mergedColor: _,
      borderBox11: a
    };
  },
  render() {
    const {
      $slots: e,
      width: r,
      height: a,
      filterId: t,
      mergedColor: n,
      backgroundColor: l,
      title: o,
      titleWidth: _,
      animate: x
    } = this;
    return Z("div", {
      ref: "borderBox11",
      class: "dv-border-box-11"
    }, [Z("svg", {
      class: "dv-border-svg-container",
      width: r,
      height: a
    }, [Z("defs", null, [Z("filter", {
      id: t,
      height: "150%",
      width: "150%",
      x: "-25%",
      y: "-25%"
    }, [Z("feMorphology", {
      operator: "dilate",
      radius: "2",
      in: "SourceAlpha",
      result: "thicken"
    }, null), Z("feGaussianBlur", {
      in: "thicken",
      stdDeviation: "3",
      result: "blurred"
    }, null), Z("feFlood", {
      "flood-color": n[1],
      result: "glowColor"
    }, null), Z("feComposite", {
      in: "glowColor",
      in2: "blurred",
      operator: "in",
      result: "softGlowColored"
    }, null), Z("feMerge", null, [Z("feMergeNode", {
      in: "softGlowColored"
    }, null), Z("feMergeNode", {
      in: "SourceGraphic"
    }, null)])])]), Z("polygon", {
      fill: l,
      points: `
        20, 32 ${r * 0.5 - _ / 2}, 32 ${r * 0.5 - _ / 2 + 20}, 53
        ${r * 0.5 + _ / 2 - 20}, 53 ${r * 0.5 + _ / 2}, 32
        ${r - 20}, 32 ${r - 8}, 48 ${r - 8}, ${a - 25} ${r - 20}, ${a - 8}
        20, ${a - 8} 8, ${a - 25} 8, 50
      `
    }, null), Z("polyline", {
      stroke: n[0],
      filter: `url(#${t})`,
      points: `
          ${(r - _) / 2}, 30
          20, 30 7, 50 7, ${50 + (a - 167) / 2}
          13, ${55 + (a - 167) / 2} 13, ${135 + (a - 167) / 2}
          7, ${140 + (a - 167) / 2} 7, ${a - 27}
          20, ${a - 7} ${r - 20}, ${a - 7} ${r - 7}, ${a - 27}
          ${r - 7}, ${140 + (a - 167) / 2} ${r - 13}, ${135 + (a - 167) / 2}
          ${r - 13}, ${55 + (a - 167) / 2} ${r - 7}, ${50 + (a - 167) / 2}
          ${r - 7}, 50 ${r - 20}, 30 ${(r + _) / 2}, 30
          ${(r + _) / 2 - 20}, 7 ${(r - _) / 2 + 20}, 7
          ${(r - _) / 2}, 30 ${(r - _) / 2 + 20}, 52
          ${(r + _) / 2 - 20}, 52 ${(r + _) / 2}, 30
        `
    }, null), Z("polygon", {
      stroke: n[0],
      fill: "transparent",
      points: `
          ${(r + _) / 2 - 5}, 30 ${(r + _) / 2 - 21}, 11
          ${(r + _) / 2 - 27}, 11 ${(r + _) / 2 - 8}, 34
        `
    }, null), Z("polygon", {
      stroke: n[0],
      fill: "transparent",
      points: `
          ${(r - _) / 2 + 5}, 30 ${(r - _) / 2 + 22}, 49
          ${(r - _) / 2 + 28}, 49 ${(r - _) / 2 + 8}, 26
        `
    }, null), Z("polygon", {
      stroke: n[0],
      fill: De(n[1] || xa[1], 30),
      filter: `url(#${t})`,
      points: `
          ${(r + _) / 2 - 11}, 37 ${(r + _) / 2 - 32}, 11
          ${(r - _) / 2 + 23}, 11 ${(r - _) / 2 + 11}, 23
          ${(r - _) / 2 + 33}, 49 ${(r + _) / 2 - 22}, 49
        `
    }, null), Z("polygon", {
      filter: `url(#${t})`,
      fill: n[0],
      opacity: "1",
      points: `
          ${(r - _) / 2 - 10}, 37 ${(r - _) / 2 - 31}, 37
          ${(r - _) / 2 - 25}, 46 ${(r - _) / 2 - 4}, 46
        `
    }, [x && Z("animate", {
      attributeName: "opacity",
      values: "1;0.7;1",
      dur: "2s",
      begin: "0s",
      repeatCount: "indefinite"
    }, null)]), Z("polygon", {
      filter: `url(#${t})`,
      fill: n[0],
      opacity: "0.7",
      points: `
          ${(r - _) / 2 - 40}, 37 ${(r - _) / 2 - 61}, 37
          ${(r - _) / 2 - 55}, 46 ${(r - _) / 2 - 34}, 46
        `
    }, [x && Z("animate", {
      attributeName: "opacity",
      values: "0.7;0.4;0.7",
      dur: "2s",
      begin: "0s",
      repeatCount: "indefinite"
    }, null)]), Z("polygon", {
      filter: `url(#${t})`,
      fill: n[0],
      opacity: "0.5",
      points: `
          ${(r - _) / 2 - 70}, 37 ${(r - _) / 2 - 91}, 37
          ${(r - _) / 2 - 85}, 46 ${(r - _) / 2 - 64}, 46
        `
    }, [x && Z("animate", {
      attributeName: "opacity",
      values: "0.5;0.2;0.5",
      dur: "2s",
      begin: "0s",
      repeatCount: "indefinite"
    }, null)]), Z("polygon", {
      filter: `url(#${t})`,
      fill: n[0],
      opacity: "1",
      points: `
          ${(r + _) / 2 + 30}, 37 ${(r + _) / 2 + 9}, 37
          ${(r + _) / 2 + 3}, 46 ${(r + _) / 2 + 24}, 46
        `
    }, [x && Z("animate", {
      attributeName: "opacity",
      values: "1;0.7;1",
      dur: "2s",
      begin: "0s",
      repeatCount: "indefinite"
    }, null)]), Z("polygon", {
      filter: `url(#${t})`,
      fill: n[0],
      opacity: "0.7",
      points: `
          ${(r + _) / 2 + 60}, 37 ${(r + _) / 2 + 39}, 37
          ${(r + _) / 2 + 33}, 46 ${(r + _) / 2 + 54}, 46
        `
    }, [x && Z("animate", {
      attributeName: "opacity",
      values: "0.7;0.4;0.7",
      dur: "2s",
      begin: "0s",
      repeatCount: "indefinite"
    }, null)]), Z("polygon", {
      filter: `url(#${t})`,
      fill: n[0],
      opacity: "0.5",
      points: `
          ${(r + _) / 2 + 90}, 37 ${(r + _) / 2 + 69}, 37
          ${(r + _) / 2 + 63}, 46 ${(r + _) / 2 + 84}, 46
        `
    }, [x && Z("animate", {
      attributeName: "opacity",
      values: "0.5;0.2;0.5",
      dur: "2s",
      begin: "0s",
      repeatCount: "indefinite"
    }, null)]), Z("text", {
      class: "dv-border-box-11-title",
      x: `${r / 2}`,
      y: "32",
      fill: "#fff",
      "font-size": "18",
      "text-anchor": "middle",
      "dominant-baseline": "middle"
    }, [o]), Z("polygon", {
      fill: n[0],
      filter: `url(#${t})`,
      points: `
          7, ${53 + (a - 167) / 2} 11, ${57 + (a - 167) / 2}
          11, ${133 + (a - 167) / 2} 7, ${137 + (a - 167) / 2}
        `
    }, null), Z("polygon", {
      fill: n[0],
      filter: `url(#${t})`,
      points: `
          ${r - 7}, ${53 + (a - 167) / 2} ${r - 11}, ${57 + (a - 167) / 2}
          ${r - 11}, ${133 + (a - 167) / 2} ${r - 7}, ${137 + (a - 167) / 2}
        `
    }, null)]), Z("div", {
      class: "border-box-content"
    }, [Me(e, "default")])]);
  }
}), nn = {
  install(e) {
    e.component("DvBorderBox11", ef);
  }
}, dt = ["#2e6099", "#7ce7fd"], tf = /* @__PURE__ */ Le({
  props: qe,
  setup(e) {
    const r = He(), a = me(null), {
      width: t,
      height: n,
      initWH: l
    } = xe(a), o = me(`borderr-box-12-filterId-${r}`), _ = Ie(dt, Ee(e, "color"));
    return {
      width: t,
      height: n,
      filterId: o,
      mergedColor: _,
      initWH: l,
      borderBox12: a
    };
  },
  render() {
    const {
      $slots: e,
      width: r,
      height: a,
      filterId: t,
      mergedColor: n,
      backgroundColor: l
    } = this;
    return Z("div", {
      ref: "borderBox12",
      class: "dv-border-box-12"
    }, [Z("svg", {
      class: "dv-border-svg-container",
      width: r,
      height: a
    }, [Z("defs", null, [Z("filter", {
      id: t,
      height: "150%",
      width: "150%",
      x: "-25%",
      y: "-25%"
    }, [Z("feMorphology", {
      operator: "dilate",
      radius: "1",
      in: "SourceAlpha",
      result: "thicken"
    }, null), Z("feGaussianBlur", {
      in: "thicken",
      stdDeviation: "2",
      result: "blurred"
    }, null), Z("feFlood", {
      "flood-color": De(n[1] || dt[1], 70),
      result: "glowColor"
    }, [Z("animate", {
      attributeName: "flood-color",
      values: `
                ${De(n[1] || dt[1], 70)};
                ${De(n[1] || dt[1], 30)};
                ${De(n[1] || dt[1], 70)};
              `,
      dur: "3s",
      begin: "0s",
      repeatCount: "indefinite"
    }, null)]), Z("feComposite", {
      in: "glowColor",
      in2: "blurred",
      operator: "in",
      result: "softGlowColored"
    }, null), Z("feMerge", null, [Z("feMergeNode", {
      in: "softGlowColored"
    }, null), Z("feMergeNode", {
      in: "SourceGraphic"
    }, null)])])]), r && a && Z("path", {
      fill: l,
      "stroke-width": "2",
      stroke: n[0],
      d: `
          M15 5 L ${r - 15} 5 Q ${r - 5} 5, ${r - 5} 15
          L ${r - 5} ${a - 15} Q ${r - 5} ${a - 5}, ${r - 15} ${a - 5}
          L 15, ${a - 5} Q 5 ${a - 5} 5 ${a - 15} L 5 15
          Q 5 5 15 5
        `
    }, null), Z("path", {
      "stroke-width": "2",
      fill: "transparent",
      "stroke-linecap": "round",
      filter: `url(#${t})`,
      stroke: n[1],
      d: "M 20 5 L 15 5 Q 5 5 5 15 L 5 20"
    }, null), Z("path", {
      "stroke-width": "2",
      fill: "transparent",
      "stroke-linecap": "round",
      filter: `url(#${t})`,
      stroke: n[1],
      d: `M ${r - 20} 5 L ${r - 15} 5 Q ${r - 5} 5 ${r - 5} 15 L ${r - 5} 20`
    }, null), Z("path", {
      "stroke-width": "2",
      fill: "transparent",
      "stroke-linecap": "round",
      filter: `url(#${t})`,
      stroke: n[1],
      d: `
          M ${r - 20} ${a - 5} L ${r - 15} ${a - 5}
          Q ${r - 5} ${a - 5} ${r - 5} ${a - 15}
          L ${r - 5} ${a - 20}
          `
    }, null), Z("path", {
      "stroke-width": "2",
      fill: "transparent",
      "stroke-linecap": "round",
      filter: `url(#${t})`,
      stroke: n[1],
      d: `
          M 20 ${a - 5} L 15 ${a - 5}
          Q 5 ${a - 5} 5 ${a - 15}
          L 5 ${a - 20}
          `
    }, null)]), Z("div", {
      class: "border-box-content"
    }, [Me(e, "default")])]);
  }
}), an = {
  install(e) {
    e.component("DvBorderBox12", tf);
  }
}, rf = ["#6586ec", "#2cf7fe"], nf = /* @__PURE__ */ Le({
  props: qe,
  setup(e) {
    const r = me(null), {
      width: a,
      height: t,
      initWH: n
    } = xe(r), l = Ie(rf, Ee(e, "color"));
    return {
      width: a,
      height: t,
      mergedColor: l,
      initWH: n,
      borderBox13: r
    };
  },
  render() {
    const {
      $slots: e,
      width: r,
      height: a,
      mergedColor: t,
      backgroundColor: n
    } = this;
    return Z("div", {
      ref: "borderBox13",
      class: "dv-border-box-13"
    }, [Z("svg", {
      class: "dv-border-svg-container",
      width: r,
      height: a
    }, [Z("path", {
      fill: n,
      stroke: t[0],
      d: `
          M 5 20 L 5 10 L 12 3  L 60 3 L 68 10
          L ${r - 20} 10 L ${r - 5} 25
          L ${r - 5} ${a - 5} L 20 ${a - 5}
          L 5 ${a - 20} L 5 20
        `
    }, null), Z("path", {
      fill: "transparent",
      "stroke-width": "3",
      "stroke-linecap": "round",
      "stroke-dasharray": "10, 5",
      stroke: t[0],
      d: "M 16 9 L 61 9"
    }, null), Z("path", {
      fill: "transparent",
      stroke: t[1],
      d: "M 5 20 L 5 10 L 12 3  L 60 3 L 68 10"
    }, null), Z("path", {
      fill: "transparent",
      stroke: t[1],
      d: `M ${r - 5} ${a - 30} L ${r - 5} ${a - 5} L ${r - 30} ${a - 5}`
    }, null)]), Z("div", {
      class: "border-box-content"
    }, [Me(e, "default")])]);
  }
}), on = {
  install(e) {
    e.component("DvBorderBox13", nf);
  }
}, lf = {
  install(e) {
    var r, a, t, n, l, o, _, x, z, E, U, T, L, d, B, W, q, G, m, y, f, D, k, C, $, c, M, A, p, V, X, ee, u, I, g, v, S, J, Q;
    (r = zt.install) == null || r.call(zt, e), (a = qt.install) == null || a.call(qt, e), (t = It.install) == null || t.call(It, e), (n = xr.install) == null || n.call(xr, e), (l = Cr.install) == null || l.call(Cr, e), (o = $r.install) == null || o.call($r, e), (_ = _r.install) == null || _.call(_r, e), (x = Pr.install) == null || x.call(Pr, e), (z = wr.install) == null || z.call(wr, e), (E = Sr.install) == null || E.call(Sr, e), (U = Or.install) == null || U.call(Or, e), (T = Gr.install) == null || T.call(Gr, e), (L = Mr.install) == null || L.call(Mr, e), (d = Rr.install) == null || d.call(Rr, e), (B = Dr.install) == null || B.call(Dr, e), (W = Tr.install) == null || W.call(Tr, e), (q = Fr.install) == null || q.call(Fr, e), (G = Br.install) == null || G.call(Br, e), (m = Nr.install) == null || m.call(Nr, e), (y = jr.install) == null || y.call(jr, e), (f = Er.install) == null || f.call(Er, e), (D = zr.install) == null || D.call(zr, e), (k = qr.install) == null || k.call(qr, e), (C = Ir.install) == null || C.call(Ir, e), ($ = Hr.install) == null || $.call(Hr, e), (c = Vr.install) == null || c.call(Vr, e), (M = Ur.install) == null || M.call(Ur, e), (A = Xr.install) == null || A.call(Xr, e), (p = Qr.install) == null || p.call(Qr, e), (V = Yr.install) == null || V.call(Yr, e), (X = Kr.install) == null || X.call(Kr, e), (ee = Jr.install) == null || ee.call(Jr, e), (u = Zr.install) == null || u.call(Zr, e), (I = en.install) == null || I.call(en, e), (g = tn.install) == null || g.call(tn, e), (v = rn.install) == null || v.call(rn, e), (S = nn.install) == null || S.call(nn, e), (J = an.install) == null || J.call(an, e), (Q = on.install) == null || Q.call(on, e);
  }
};
export {
  Ps as ActiveRingChart,
  Gr as ActiveRingChartPlugin,
  Oc as BorderBox1,
  Jc as BorderBox10,
  rn as BorderBox10Plugin,
  ef as BorderBox11,
  nn as BorderBox11Plugin,
  tf as BorderBox12,
  an as BorderBox12Plugin,
  nf as BorderBox13,
  on as BorderBox13Plugin,
  Ur as BorderBox1Plugin,
  Mc as BorderBox2,
  Xr as BorderBox2Plugin,
  Dc as BorderBox3,
  Qr as BorderBox3Plugin,
  Bc as BorderBox4,
  Yr as BorderBox4Plugin,
  jc as BorderBox5,
  Kr as BorderBox5Plugin,
  zc as BorderBox6,
  Jr as BorderBox6Plugin,
  Ic as BorderBox7,
  Zr as BorderBox7Plugin,
  Uc as BorderBox8,
  en as BorderBox8Plugin,
  Qc as BorderBox9,
  tn as BorderBox9Plugin,
  Gi as Button,
  zt as ButtonPlugin,
  bs as CapsuleChart,
  Or as CapsuleChartPlugin,
  ds as Charts,
  Sr as ChartsPlugin,
  Ji as ConicalColumnChart,
  qt as ConicalColumnChartPlugin,
  Fs as Decoration1,
  ec as Decoration10,
  Ir as Decoration10Plugin,
  cc as Decoration11,
  Hr as Decoration11Plugin,
  Ac as Decoration12,
  Vr as Decoration12Plugin,
  Dr as Decoration1Plugin,
  zs as Decoration2,
  Tr as Decoration2Plugin,
  Vs as Decoration3,
  Fr as Decoration3Plugin,
  Ys as Decoration4,
  Br as Decoration4Plugin,
  ru as Decoration5,
  Nr as Decoration5Plugin,
  lu as Decoration6,
  jr as Decoration6Plugin,
  pu as Decoration7,
  Er as Decoration7Plugin,
  xu as Decoration8,
  zr as Decoration8Plugin,
  Gu as Decoration9,
  qr as Decoration9Plugin,
  Ba as DigitalFlop,
  Mr as DigitalFlopPlugin,
  wl as FlylineChart,
  il as FlylineChartEnhanced,
  $r as FlylineChartEnhancedPlugin,
  _r as FlylineChartPlugin,
  ws as FullScreenContainer,
  Rr as FullScreenContainerPlugin,
  jo as Loading,
  Cr as LoadingPlugin,
  oo as PercentPond,
  It as PercentPondPlugin,
  Tl as ScrollBoard,
  wr as ScrollBoardPlugin,
  Ml as ScrollRankingBoard,
  Pr as ScrollRankingBoardPlugin,
  To as WaterLevelPond,
  xr as WaterLevelPondPlugin,
  lf as default
};
